<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redmine | ALEX BEVILACQUA]]></title>
  <link href="http://www.alexbevi.com/blog/categories/redmine/atom.xml" rel="self"/>
  <link href="http://www.alexbevi.com/"/>
  <updated>2014-04-21T07:50:52-04:00</updated>
  <id>http://www.alexbevi.com/</id>
  <author>
    <name><![CDATA[Alex Bevilacqua]]></name>
    <email><![CDATA[alex@alexbevi.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Production Timeline]]></title>
    <link href="http://www.alexbevi.com/blog/2014/03/03/8748os-production-timeline/"/>
    <updated>2014-03-03T08:22:30-05:00</updated>
    <id>http://www.alexbevi.com/blog/2014/03/03/8748os-production-timeline</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s been a long (longer than anticipated) journey, but <a href="http://www.packtpub.com/redmine-plugin-extension-and-development/book">Redmine Plugin Extension and Development</a> (code number 8748OS) is in the final stages of production.</p>

<p>Since I wanted to share a bit more detail about what went into the production of this book, I&rsquo;m attaching a (slightly edited) copy of the production timeline I received from my Technial Editor.</p>

<!-- more -->


<h2>Technical Editing / Copy Editing</h2>

<p>We would be editing chapters for language and content-related clarity. There might be instances when we&rsquo;ll require your assistance while we make any content-related changes. Even if there are no queries, we would be sending our first edited chapter (Per TE) to you to ensure that you are happy with the quality of editing. When chapter are sent across to you, the expected turnaround time will be 24 hours per chapter.</p>

<ul>
<li>Start of Editing: <em>21st February 2014</em></li>
<li>End of Editing: <em>6th March 2014</em></li>
</ul>


<p>After the chapters  are edited, they are indexed  and then laid out. The laid out chapters are then sent across to the Proof Reader, who are experts in English language. The Proof read chapters are then finalized and made into what we term as &ldquo;Pre-Finals&rdquo;. This is the stage where-in you will get to see the final chapters as you would see them in the book.</p>

<h2>Schedule for Pre-finals</h2>

<p>2 to 4 Pre-Finals will be sent across to you in a batch. The expected turnaround time will be 24 hours for a batch of two chapters.</p>

<p>At this stage, you&rsquo;ll be expected to just go through the chapters and provide feedback, if any. Any major content changes should be avoided. We plan to start sending these within 7-10 days from today and would continue to do so, until the day the book is clubbed and finalized.</p>

<h2>Upload Date</h2>

<p>This is the day when the clubbed book will be finalized and then sent to our printers. We call it the upload day, since the files are transferred to our printers and we cannot make any changes here after.</p>

<ul>
<li>Current Upload Date: <em>17th March 2014</em></li>
</ul>


<h2>Publishing Date</h2>

<p>The book gets published and will be available for purchase in five to eight working days from the day of upload.</p>

<p>So all going well, it looks like the book will officially be available by the end of March 2014. For those who were anticipating the original January 2014 release date, I sincerly apologize for the delay. I felt the delay resulted in a more cohesive final product, and hope that it meets (and even exceeds) your expectations!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Rewrites Over 50% Done]]></title>
    <link href="http://www.alexbevi.com/blog/2014/02/18/final-rewrites-over-50-percent-done/"/>
    <updated>2014-02-18T22:08:21-05:00</updated>
    <id>http://www.alexbevi.com/blog/2014/02/18/final-rewrites-over-50-percent-done</id>
    <content type="html"><![CDATA[<p>This is just a quick post to update everyone that chapters 1, 2 and 3 of <a href="http://www.packtpub.com/redmine-plugin-extension-and-development/book">Redmine Plugin Extension and Development</a> have been submitted to Packt with final revisions. Chapter 8 as well as the Appendix were accepted after the initial round of rewrites, so that means <em>4 MORE CHAPTERS TO GO!!!</em></p>

<p>Clearly I didn&rsquo;t meet the target I hinted at in my last post, but it was <a href="http://www.statutoryholidays.com/family-day.php">Family Day</a> here so I took the family away for the long weekend to go skating on the <a href="http://www.ncc-ccn.gc.ca/places-to-visit/rideau-canal-skateway">Rideau Canal</a> in Ottawa :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Round of Rewrites Completed!]]></title>
    <link href="http://www.alexbevi.com/blog/2014/02/09/first-round-of-rewrites-completed/"/>
    <updated>2014-02-09T21:48:29-05:00</updated>
    <id>http://www.alexbevi.com/blog/2014/02/09/first-round-of-rewrites-completed</id>
    <content type="html"><![CDATA[<p>This is just a quick update that I&rsquo;ve finally finished the first round of rewrites for the upcoming <a href="http://www.packtpub.com/redmine-plugin-extension-and-development/book">Redmine Plugin Extension and Development</a> book.</p>

<p>The issue I was struggling with was little more than a complete lack of motivation. Since I work full time and do contract development on the side (plus have a wife and kids), yet another distraction can be difficult to find time for; especially if it&rsquo;s not a primary source of income.</p>

<p><a href="http://www.packtpub.com">Packt Publishing</a> has been very patient with me though so I&rsquo;m going to try to find the time in the coming week to get through the second round of revisions and rewrites and hopefully get this puppy to market ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Book: Almost Ready for Production]]></title>
    <link href="http://www.alexbevi.com/blog/2014/01/27/my-first-book-is-almost-ready-for-production/"/>
    <updated>2014-01-27T15:37:10-05:00</updated>
    <id>http://www.alexbevi.com/blog/2014/01/27/my-first-book-is-almost-ready-for-production</id>
    <content type="html"><![CDATA[<p>For the last 4 months I&rsquo;ve been working with <a href="http://www.packtpub.com">Packt Publishing</a> on a book about <a href="http://www.redmine.org">Redmine</a> plugin extension and development.</p>

<p><img class="left" src="/images/8748OS_mockupcover_normal_0.jpg"></p>

<p>Although it likely won&rsquo;t be ready until February 2014, the book is now available for <a href="http://www.packtpub.com/redmine-plugin-extension-and-development/book">pre-order on Packt&rsquo;s site</a>.</p>

<p>Since the book is <em>almost</em> through the first stage of rewrites, I though it might be a good idea to start documenting the process.</p>

<p>What I&rsquo;m going to write about initially are my first impressions on writing a book, as well as a few notes (which may sound like complaints) about what I did &ldquo;wrong&rdquo; and could improve upon in the future.</p>

<!-- more -->


<p>Originally, I wasn&rsquo;t sure that I would be a good choice as an author as I didn&rsquo;t have the community recognition that some other plugin developers had, and I hadn&rsquo;t been &ldquo;on the scene&rdquo; for more than a few years.</p>

<p>After much consideration, I decided to dive in and start writing.</p>

<p>The first step was to provide the publisher with a rough outline that also included the page count. Initially, I just threw together a handful of topics that I wanted to cover, then (very generically) estimated how many pages I would need to completely cover those topics.</p>

<p>Once approved, and I actually <em>started</em> writing, I very quickly realized that meeting my page estimates was almost impossible; some chapters would be way too short, and others WAY too long.</p>

<p>I also had to provide a rough outline as to how long I thoght it would take me to write each chapter. This step, in retrospect, I wish I had taken more time to properly prepare.</p>

<p>Writing a technically-oriented book involves a lot more research than you may think (no matter how well you think you know the source material). As such, the further I got into the book, the more time I found myself researching, writing code, testing code, then writing about the code I&rsquo;d built.</p>

<p>This process took a good 3x longer than I anticipated, and as such, my deadlines tended to slip by. As a result, the tentative release date for the final book of January 2014 is not very likely.</p>

<p>I&rsquo;m hoping that this blog post will also serve as a motivator to get my ass in gear and finish the final revisions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetching Changesets in Redmine from Heroku using Subversion]]></title>
    <link href="http://www.alexbevi.com/blog/2012/11/21/fetching-changesets-in-redmine-from-heroku-using-svn/"/>
    <updated>2012-11-21T08:44:00-05:00</updated>
    <id>http://www.alexbevi.com/blog/2012/11/21/fetching-changesets-in-redmine-from-heroku-using-svn</id>
    <content type="html"><![CDATA[<p>I manage my open source and contract development projects using <a href="http://www.redmine.org">Redmine</a>.</p>

<p>Since I&rsquo;m &ldquo;frugal&rdquo;, I tend to try to push the free hosting envelope as far as possible. As a result, I have my Redmine deployment on <a href="http://www.heroku.com">Heroku</a>, my files and attachments on <a href="http://www.dropbox.com">Dropbox</a> and my source on <a href="https://github.com">GitHub</a>.</p>

<p>I also like to link to changesets in my projects, which is easy enough to do when you host the source and the Redmine server on the same machine.</p>

<p>Not so easy with Heroku+GitHub &hellip;. until now!</p>

<p>By the end of this tutorial, we will have:</p>

<ul>
<li>Setup a build system using Vagrant that matches the Heroku hosting environment</li>
<li>Compiled a statically linked <a href="http://subversion.apache.org/">Subversion</a> client</li>
<li>Added the svn client to our Redmine repository and pushed it to Heroku</li>
<li>Configured a project in Redmine to fetch changesets from GitHub using Subversion</li>
</ul>


<!-- more -->


<h2>Overview</h2>

<p>In 2012, <a href="https://github.com/blog/626-announcing-svn-support">GitHub announced SVN support</a>, which primarly opened the service up to developers who hadn&rsquo;t given up the centralized development model.</p>

<p>As an added bonus, it gave us an alternative view into the commit logs for our projects without the need for a local copy.</p>

<p>In order to proceed, I&rsquo;m making the following assumptions:</p>

<ul>
<li>You are hosting an instance of Redmine on Heroku</li>
<li>You are comfortable using <a href="http://git-scm.com">Git</a></li>
<li>You&rsquo;ve used a <a href="http://debian.org">Debian</a>-based Linux distribution in the past</li>
<li>You&rsquo;ve used the <a href="http://en.wikipedia.org/wiki/GNU_build_system">GNU Build System</a> before</li>
<li>You have <a href="http://www.ruby-lang.org">Ruby</a> and <a href="http://rubygems.org">RubyGems</a> configured (if not, <a href="http://rvm.io">RVM</a> is a good place to start)</li>
<li>You are not crazy enough to try doing this from Windows or OSX ;)</li>
<li>You have a sense of humour and realize the winky above indicates this guide was written for Linux, but could easily be adapted for any OS</li>
</ul>


<h2>Configuring the Build Environment</h2>

<p>Heroku (as of November, 2012 at least) deploys applications to an Ubuntu 10.04 x86_64 environment, and we&rsquo;re going to be statically linking for that environment, so we need to setup a build system that reflects this requirement.</p>

<p>The most efficient way of doing this is to use <a href="http://vagrantup.com">Vagrant</a> to initialize a bare-bones <a href="http://releases.ubuntu.com/lucid">Ubuntu Lucid</a> system.</p>

<p>Since Rubygems should already be installed, it can be used to quickly setup Vagrant:</p>

<pre><code>gem install vagrant
</code></pre>

<p>Now, let&rsquo;s fetch a pre-build lucid system (thanks Vagrant!) and initialize it in the current directory:</p>

<pre><code>vagrant box add lucid64 http://files.vagrantup.com/lucid64.box
vagrant init
</code></pre>

<p>This will create a <code>Vagrantfile</code> in the current director, which contains configuration information for our build system. In order to tell Vagrant to use the <em>lucid64</em> instace we&rsquo;ve downloaded, the <code>Vagrantfile</code> needs to be edited and the <em>config.vm.box</em> section updated.</p>

<p>``` ruby</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>Vagrant::Config.run do |config|<br/>
  # &hellip;
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = &ldquo;lucid64&rdquo;
  # &hellip;
```</p>

<p>Now that everything is ready to go, let&rsquo;s start the instance.</p>

<pre><code>vagrant up
</code></pre>

<p>Once vagrant has started the virtual machine, we can access it via ssh using:</p>

<pre><code>vagrant ssh
</code></pre>

<h2>Building Subversion</h2>

<p>For the purposes of this tutorial, I&rsquo;m going to be using the 1.6 branch of Subversion, which still had the <em>subversion-deps</em> packaged seperately.</p>

<blockquote><p><strong>NOTE</strong> With the 1.7 branch, there is a script that automates the process, and I&rsquo;ll likely update this tutorial at some point to use this.</p></blockquote>

<p>First, we need to get the source:</p>

<pre><code>wget http://subversion.tigris.org/downloads/subversion-deps-1.6.19.tar.bz2
wget http://subversion.tigris.org/downloads/subversion-1.6.19.tar.bz2
tar xvf subversion-deps-1.6.19.tar.bz2
tar xvf subversion-1.6.19.tar.bz2
cd subversion-1.6.19
</code></pre>

<p>Second, we&rsquo;ll install any additonal components required to compile successfully:</p>

<pre><code>sudo apt-get install build-essential libxml2-dev
</code></pre>

<p>Finally, we&rsquo;ll configure the build to exclude as much as possible and to produce a static binary:</p>

<pre><code>./configure --with-ssl \
            --without-gssapi \
            --without-swig \
            --without-neon \
            --enable-all-static
make
</code></pre>

<p>Once the build completes, the only file we&rsquo;re interested in is the <code>svn</code> client, so we&rsquo;ll copy that to the <code>/vagrant</code> directory of our build machine, but first we&rsquo;ll strip it.</p>

<pre><code>strip subversion/svn/svn
cp subversion/svn/svn /vagrant
</code></pre>

<blockquote><p><strong>NOTE</strong> stripping the binary reduces the overall size from ~ 12 MB to ~ 4 MB, which is important since we have limited space on Heroku.</p>

<pre><code>vagrant@lucid64:~/subversion-1.6.19$ ls -l subversion/svn/svn
-rwxr-xr-x 1 vagrant vagrant 12060462 2012-11-21 14:37 subversion/svn/svn*

vagrant@lucid64:~/subversion-1.6.19$ strip subversion/svn/svn   

vagrant@lucid64:~/subversion-1.6.19$ ls -l subversion/svn/svn
-rwxr-xr-x 1 vagrant vagrant 4257472 2012-11-21 14:56 subversion/svn/svn*
</code></pre></blockquote>

<p>The <code>/vagrant</code> directory is shared between the host and the guest machine by default, so this gives us access to the Subversion client if we open a new console and access the project folder we started Vagrant in.</p>

<p>Since we&rsquo;re now done, we can end the ssh session and stop the virtual machine</p>

<pre><code>exit
vagrant halt
</code></pre>

<h2>Adding Subversion to Redmine</h2>

<p>Go to the root of your local Redmine repository, and create a <code>bin</code> folder. Now copy the <code>svn</code> binary to this folder, add the result to your repository and push to Heroku.</p>

<pre><code>mkdir bin
cp /path/to/static/svn bin  
git commit -a -m "Adding a Statically Linked Subversion to Redmine"
git push heroku master
</code></pre>

<p>If all went well, when you access the <em>Repositories</em> tab under <em>Administration &ndash;> Settings</em>, Subversion should be listed and the version we just uploaded displayed.</p>

<p><img class="center" src="/images/heroku-svn-01.jpg"></p>

<h2>Accessing Changesets from GitHub</h2>

<p>The final step is to configure an existing project to access a project on GitHub.</p>

<p>First, add a new repository and point it to the GitHub url you would normally use to access the project on the web.</p>

<blockquote><p><strong>NOTE</strong> Leave the <em>Login</em> and <em>Password</em> fields blank unless this is a private repository</p></blockquote>

<p><img class="center" src="/images/heroku-svn-02.jpg"></p>

<p>Once configured, clicking on the <em>Repository</em> tab should fetch the changesets and show the source tree</p>

<p><img class="center" src="/images/heroku-svn-03.jpg"></p>

<blockquote><p><strong>NOTE</strong> This can potentially time out on a larger project and require clicking on the <em>Repository</em> tab multiple times until all changesets have been fetched and parsed.</p>

<p><strong>NOTE</strong> Viewing changeset diffs doesn&rsquo;t work</p></blockquote>

<p>I&rsquo;ve used my personal installation as an example at <a href="http://alexbevi-pm.herokuapp.com/projects/redmine-dropbox-attachments">http://alexbevi-pm.herokuapp.com/projects/redmine-dropbox-attachments</a>.</p>

<p>This method isn&rsquo;t on-par with a self-hosted solution, but it&rsquo;s good enough if you don&rsquo;t have a VPS in your budget ;)</p>

<h3>REFERENCES</h3>

<ul>
<li><a href="http://rickvanderzwet.blogspot.ca/2007/11/building-static-subversion.html">http://rickvanderzwet.blogspot.ca/2007/11/building-static-subversion.html</a></li>
<li><a href="http://bindle.me/blog/index.php/405/running-binaries-on-heroku">http://bindle.me/blog/index.php/405/running-binaries-on-heroku</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
