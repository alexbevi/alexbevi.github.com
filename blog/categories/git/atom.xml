<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: git | ALEX BEVILACQUA]]></title>
    <link href="http://www.alexbevi.com/blog/categories/git/atom.xml" rel="self"/>
    <link href="http://www.alexbevi.com/"/>
    <updated>2016-11-29T04:36:37-05:00</updated>
    <id>http://www.alexbevi.com/</id>
    <author>
        <name><![CDATA[Alex Bevilacqua]]></name>
        <email><![CDATA[alex@alexbevi.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Git Push to GitHub and Bitbucket]]></title>
        <link href="http://www.alexbevi.com/blog/2014/12/19/git-push-to-github-and-bitbucket/"/>
        <updated>2014-12-19T13:05:35-05:00</updated>
        <id>http://www.alexbevi.com/blog/2014/12/19/git-push-to-github-and-bitbucket</id>
        <content type="html"><![CDATA[I just want to start off by saying how much I LOVE [Git](http://git-scm.com). I've been working with it for a number of years now (coming from [Subversion](https://subversion.apache.org) and sharing code on [Google Code](https://code.google.com) and [SourceForge](http://sourceforge.net)) and have fully embraced [GitHub](https://github.com) as the "victor" (IMHO) for both online source control and collaborative development.

The one "downside" to GitHub though is that you don't have the ability to manage a private repository for free. They do offer reasonable hosting plans, but I generally use private repos for client work or other professional backups.

[Bitbucket](https://bitbucket.org) on the other hand offers unlimited private repositories. They limit the collaborative features you have access to, but if you're strictly mirroring or backing up, that's not an issue.

In order to configure your repository to push to both, all you need to do is:

**1)** create a new repository on Bitbucket

**2a)** edit the `.git/config` of your local repository

**2b)** add a second `url` entry under the same **remote** as you're already pushing to

<img src="/images/20141219-git-001.png">

**3)** now to initialze the Bitbucket remote execute `git push origin -u --all`. 

<img src="/images/20141219-git-002.png">

This will attempt to push all branches to the remote named *origin*. Since the version on GitHub is already up to date, the Bitbucket version will be initialized and all changes will be pushed.

Now, whenever you issue a `git push` command, both remote repositories will receive the changesets!
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Keeping Pry Breakpoints out of Git]]></title>
        <link href="http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git/"/>
        <updated>2012-08-23T07:57:00-04:00</updated>
        <id>http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git</id>
        <content type="html"><![CDATA[My Ruby workflow as of late has almost always contained [Git](http://www.git-scm.com) for version control, and [Pry](http://pryrepl.org/) for debugging.

Although it's extremely convenient during development to add a quick breakpoint using `binding.pry`, it can be a bit frustrating to clients if you accidentally deploy with these breakpoints still intact.

<!-- more -->

After hunting around for a bit, I decided to write a pre-commit [hook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks) that would check the files I was about to check in to ensure that I didn't accidentally still have breakpoints enabled.

<script src="https://gist.github.com/alexbevi/3436040.js"> </script>

This file just needs to be saved to `/path/to/source/.git/hooks/pre-commit` and made executable.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HOOK_URL="https://gist.githubusercontent.com/alexbevi/3436040/raw/pre-commit.sh"
</span><span class='line'>curl $HOOK_URL &gt; /path/to/source/.git/hooks/pre-commit
</span><span class='line'>chmod +x /path/to/source/.git/hooks/pre-commit</span></code></pre></td></tr></table></div></figure>

If you happen to leave a breakpoint intact, the next time you try to commit your changes, the commit will fail and indicate where these breakpoints are, and what files need to be updated to allow the commit to succeed.

<img src="/images/2012-08-23-ss.png">
]]></content>
    </entry>
    
</feed>
