<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: mongodb | ALEX BEVILACQUA]]></title>
    <link href="http://www.alexbevi.com/blog/categories/mongodb/atom.xml" rel="self"/>
    <link href="http://www.alexbevi.com/"/>
    <updated>2016-02-10T15:54:03-05:00</updated>
    <id>http://www.alexbevi.com/</id>
    <author>
        <name><![CDATA[Alex Bevilacqua]]></name>
        <email><![CDATA[alex@alexbevi.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Identifying failing system.js functions in MongoDb]]></title>
        <link href="http://www.alexbevi.com/blog/2016/02/10/identifying-failing-system-dot-js-functions-in-mongodb/"/>
        <updated>2016-02-10T15:17:56-05:00</updated>
        <id>http://www.alexbevi.com/blog/2016/02/10/identifying-failing-system-dot-js-functions-in-mongodb</id>
        <content type="html"><![CDATA[``` bash
laptop(mongod-3.2.1) test> db.loadServerScripts()
2016-02-10T15:18:42.322-0500 E QUERY    [thread1] SyntaxError: unterminated string literal :
DB.prototype.loadServerScripts/<@src/mongo/shell/db.js:1158:9
DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
@(shell):1:1

2016-02-10T15:18:42.323-0500 E QUERY    [thread1] Error: SyntaxError: unterminated string literal :
DB.prototype.loadServerScripts/<@src/mongo/shell/db.js:1158:9
DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
@(shell):1:1
 :
DB.prototype.loadServerScripts/<@src/mongo/shell/db.js:1158:9
DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
@(shell):1:15:17:56
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Occasionally we'll run into these scenarios where we need to load the `system.js` functions into the global context, but for whatever reason one (or more) scripts are borked.
</span><span class='line'>
</span><span class='line'>I created on that essentially looks like the following to illustrate this point.
</span></code></pre></td></tr></table></div></figure> javascript
var thisFunctionShouldFail = function() {
    return "Fail
}
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>When you try to execute a `db.loadServerScripts()` call, the entire process will fail as there is a malformed script.
</span><span class='line'>
</span><span class='line'>This is a major pain in the ass when you have large background processes that rely heavily on internal system scripts.
</span><span class='line'>
</span><span class='line'>In order to address this, we wrote a small script that you can run against any database to validate the internal scripts:
</span></code></pre></td></tr></table></div></figure> javascript
var testSystemJs = function() {
    var coll = db.system.js;
    coll.find({}, {_id: 1}).forEach(function(doc) {
       try {
           var func = coll.findOne({_id: doc._id});
           eval(func.value);
       } catch (ex) {
           print("LOAD_ERROR: " + doc._id);       
       }
    });
}
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Now if you run the above, it will give you a bit more context into the failures you may have ;)
</span></code></pre></td></tr></table></div></figure>
laptop(mongod-3.2.1) test> testSystemJs()
2016-02-10T15:52:13.086-0500 E QUERY    [thread1] SyntaxError: unterminated string literal :
testSystemJs/<@(shell):1:190
DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
testSystemJs@(shell):1:66
@(shell):1:1

LOAD_ERROR: thisFunctionShouldFail
2016-02-10T15:52:13.088-0500 E QUERY    [thread1] SyntaxError: unterminated string literal :
testSystemJs/<@(shell):1:190
DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
testSystemJs@(shell):1:66
@(shell):1:1

LOAD_ERROR: thisFunctionShouldAlsoFail
```

I'm testing this on a mongo 3.2.1 system, but this method should be applicable to older releases as well.]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Install Latest MongoDB in Ubuntu]]></title>
        <link href="http://www.alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu/"/>
        <updated>2012-08-29T13:46:00-04:00</updated>
        <id>http://www.alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu</id>
        <content type="html"><![CDATA[A couple projects I work on use [MongoDB](http://www.mongodb.org/) as the database, and I'm generally not satisfied to use the (often outdated) version that ships with Ubuntu.

As a result, I wrote this script to automate fetching, extracting and linking the latest version.

<!-- more -->

To configure the script, just replace the `PKG` information with whatever value is most relevant for your configuration at [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).

<div><script src='https://gist.github.com/3516100.js'></script>
<noscript><pre><code>#!/bin/bash

PKG=mongodb-linux-x86_64-2.2.0
URL=http://fastdl.mongodb.org/linux

if [ -f /etc/init.d/mongod ]
then
  echo &quot;mongod already installed ... stopping&quot;
  sudo service mongod stop
else
  echo &quot;installing mongod script&quot;
  wget https://raw.github.com/gist/3516078/713ad981715236473999f30636bca2ee3dcc5f24/mongod
  sudo mv mongod /etc/init.d/mongod
  sudo chmod +x /etc/init.d/mongod
  echo &quot;creating mongodb user&quot;
  sudo useradd mongodb
  echo &quot;creating directories&quot;
  sudo mkdir -p /var/lib/mongodb
  sudo mkdir -p /var/log/mongodb
  sudo chown mongodb.mongodb /var/lib/mongodb
  sudo chown mongodb.mongodb /var/log/mongodb
  sudo update-rc.d mongod defaults
fi

wget $URL/$PKG.tgz
sudo tar -xvzf $PKG.tgz -C /usr/local/

if [ -d /usr/local/mongodb ]
then
  echo &quot;removing existing mongodb symlink&quot;
  sudo rm -rf /usr/local/mongodb
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
else
  echo &quot;creating symlinks&quot;
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
  sudo ln -s /usr/local/mongodb/bin/bsondump /usr/local/bin/bsondump
  sudo ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
  sudo ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod
  sudo ln -s /usr/local/mongodb/bin/mongodump /usr/local/bin/mongodump
  sudo ln -s /usr/local/mongodb/bin/mongoexport /usr/local/bin/mongoexport
  sudo ln -s /usr/local/mongodb/bin/mongofiles /usr/local/bin/mongofiles
  sudo ln -s /usr/local/mongodb/bin/mongoimport /usr/local/bin/mongoimport
  sudo ln -s /usr/local/mongodb/bin/mongorestore /usr/local/bin/mongorestore
  sudo ln -s /usr/local/mongodb/bin/mongos /usr/local/bin/mongos
  sudo ln -s /usr/local/mongodb/bin/mongosniff /usr/local/bin/mongosniff
  sudo ln -s /usr/local/mongodb/bin/mongostat /usr/local/bin/mongostat
fi

echo &quot;cleaning up&quot;
rm $PKG.tgz

echo &quot;starting mongod service&quot;
sudo service mongod start</code></pre></noscript></div>


Note that this script pulls `mongod` from a gist which I created. This script is originally from [Ijonas Kisselbach](https://github.com/ijonas)'s [dotfiles](https://raw.github.com/ijonas/dotfiles/master/etc/init.d/mongod).]]></content>
    </entry>
    
</feed>
