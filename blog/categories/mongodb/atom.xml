<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: mongodb | ALEX BEVILACQUA]]></title>
    <link href="http://www.alexbevi.com/blog/categories/mongodb/atom.xml" rel="self"/>
    <link href="http://www.alexbevi.com/"/>
    <updated>2020-05-18T13:43:16-04:00</updated>
    <id>http://www.alexbevi.com/</id>
    <author>
        <name><![CDATA[Alex Bevilacqua]]></name>
        <email><![CDATA[alex@alexbevi.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Optimizing MongoDB Compound Indexes - The "Equality - Sort - Range" (ESR) Rule]]></title>
        <link href="http://www.alexbevi.com/blog/2020/05/16/optimizing-mongodb-compound-indexes-the-equality-sort-range-esr-rule/"/>
        <updated>2020-05-16T07:35:11-04:00</updated>
        <id>http://www.alexbevi.com/blog/2020/05/16/optimizing-mongodb-compound-indexes-the-equality-sort-range-esr-rule</id>
        <content type="html"><![CDATA[Working in Technical Services at MongoDB I find that time and again customers need assistance understanding why the operations they've created [indexes](https://docs.mongodb.com/manual/indexes/) for may not be performing optimally. When providing supplementary documentation, the go-to article is ["Optimizing MongoDB Compound Indexes"](https://emptysqua.re/blog/optimizing-mongodb-compound-indexes/) by MongoDB's [A. Jesse Jiryu Davis](https://emptysqua.re/blog/about/), however we do not have a formal public reference yet (though [DOCS-11790](https://jira.mongodb.org/browse/DOCS-11790) exists to track this effort).

I've presented this topic now at [MongoDB.local Toronto 2019](https://mongodblocaltoronto2019.sched.com/event/VCf3/tips-and-tricks-for-effective-indexing-mongodb) (in ["Tips and Tricks for Effective Indexing"](https://www.slideshare.net/mongodb/mongodb-local-toronto-2019-tips-and-tricks-for-effective-indexing)) and at [MongoDB World 2019](https://mongodbworld2019.sched.com/event/OCX7/the-sights-and-smells-of-a-bad-query-mongodb) (in ["The Sights (and Smells) of a Bad Query"](https://www.slideshare.net/mongodb/mongodb-world-2019-the-sights-and-smells-of-a-bad-query)). My colleague [Chris Harris](https://www.linkedin.com/in/christopher-harris-483aa149/) has also covered this topic at MongoDB World 2019 (in ["Tips and Tricks++ for Querying and Indexing MongoDB"](https://www.slideshare.net/mongodb/mongodb-world-2019-tips-and-tricks-for-querying-and-indexing-mongodb)) and again at the MongoDB.local Houston 2019, for which [a video is available](https://www.youtube.com/watch?v=5mBY27wVau0&list=PL4RCxklHWZ9u_xtprouvxCvzq2m6q_0_E&index=9&t=0s).

Though we have Jesse's excellent (and still applicable and valid) article from 2012, I wanted to take this opportunity to collect some thoughts on this topic based on his work and previous presentations.

## The ESR "Rule"

The ordering of index keys in a compound index is critically important, and the ESR "Rule" can be used as a rule of thumb to identify the optimal order _in most cases_.

The reason we are putting "Rule" in quotations is because, though the guidance is applicable in most cases, there are exceptions to be aware of. These exceptions are covered in greater detail in my in ["Tips and Tricks for Effective Indexing"](https://www.slideshare.net/mongodb/mongodb-local-toronto-2019-tips-and-tricks-for-effective-indexing) presentation.

### The "Rules"

<!-- more -->

(1) _**Equality**_ predicates should be placed first

An equality predicate is any filter condition that is attempting to match a value _exactly_. For example:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">123</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$eq</span><span class="o">:</span> <span class="mi">123</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="nx">aggregate</span><span class="p">([</span> <span class="p">{</span> <span class="nx">$match</span><span class="o">:</span><span class="p">{</span> <span class="s2">&quot;x.y&quot;</span><span class="o">:</span> <span class="mi">123</span> <span class="p">}</span> <span class="p">}</span> <span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

These filters will be tightly bound when seen in the `indexBounds` of an [Explain Plan](https://docs.mongodb.com/manual/reference/explain-results/#explain-output):

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;x&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[123.0, 123.0]&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Note that _multiple equality predicates **do not** have to be ordered from most selective to least selective_. This guidance has been provided in the past however it is erroneous due to the nature of B-Tree indexes and how in leaf pages, a B-Tree will store combinations of all fieldâ€™s values. As such, _there is exactly the same number of combinations regardless of key order_.

(2) _**Sort**_ predicates follow _Equality_ predicates
Sort predicates represent the entire requested sort for the operation and determine the ordering of results. For example:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">find</span><span class="p">().</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">().</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">b</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">aggregate</span><span class="p">([</span> <span class="p">{</span> <span class="nx">$sort</span><span class="o">:</span> <span class="p">{</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span> <span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

A sort predicate will be _unbounded_ as it requires the entire key range to be scanned to satisfy the sort requirements:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;b&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[MaxKey, MinKey]&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;a&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

(3) _**Range**_ predicates follow _Equality_ and _Sort_ predicates

Range predicates are filters that may scan multiple keys as they _are not_ testing for an exact match. For example:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">z</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gte</span><span class="o">:</span> <span class="mi">5</span><span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">z</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$lt</span><span class="o">:</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">z</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span><span class="o">:</span> <span class="kc">null</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

The range predicates will be _loosely bounded_ as a subset of the key range will need to be scanned to satisfy the filter requirements:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;z&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[5.0, inf.0]&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;z&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[-inf.0, 10.0)&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;z&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;[MinKey, undefined)&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;(null, MaxKey]&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

These three tenets of the "rule" have to do with how a query will traverse an index to identify the keys that match the queryâ€™s filter and sort criteria.

### Setup

For the duration of this section weâ€™ll be working with the following data to help illustrate the various guiding principles:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Shakir&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Ottawa&quot;</span><span class="p">,</span>    <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">2015</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Chris&quot;</span><span class="p">,</span>  <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Austin&quot;</span><span class="p">,</span>    <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">2016</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;III&quot;</span><span class="p">,</span>    <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Sydney&quot;</span><span class="p">,</span>    <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;APAC&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">2016</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Miguel&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Barcelona&quot;</span><span class="p">,</span> <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;EMEA&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">2017</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Alex&quot;</span><span class="p">,</span>   <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Toronto&quot;</span><span class="p">,</span>   <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">2018</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

We will also be examining simplified (filtered) Explain Planâ€™s [`executionStats`](https://docs.mongodb.com/manual/reference/explain-results/#executionstats) from each operation using a variation of the following command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="p">...</span> <span class="p">}).</span><span class="nx">sort</span><span class="p">({</span> <span class="p">...</span> <span class="p">}).</span><span class="nx">explain</span><span class="p">(</span><span class="s2">&quot;executionStats&quot;</span><span class="p">).</span><span class="nx">executionStats</span>
</span></code></pre></td></tr></table></div></figure>

### (E) _Equality_ First

When [creating queries that ensure selectivity](https://docs.mongodb.com/manual/tutorial/create-queries-that-ensure-selectivity/), we learn that "selectivity" is the ability of a query to narrow results using the index. Effective indexes are more selective and allow MongoDB to use the index for a larger portion of the work associated with fulfilling the query.

_Equality_ fields should always form the prefix for the index to ensure selectivity.

### (E â†’ S) _Equality_ before _Sort_

Placing _Sort_ predicates after sequential _Equality_ keys allow for the index to:

* Provide a non-blocking sort.
* Minimize the amount of scanning required.

To better understand why this is we will begin with the following example:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span> <span class="p">}).</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

With the _Sort_ predicate first, the full key range would have to be scanned prior to the more selective equality filter being applied:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">5.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">5.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr01.png">

With this index, all 5 keys have to be scanned (`totalKeysExamined`) to identify the 3 matching documents (`nReturned`).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span> <span class="p">}).</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

With the _Equality_ predict first, the tight bounds allow less keys to be scanned to satisfy the filter criteria:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[\&quot;AMER\&quot;, \&quot;AMER\&quot;]&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr02.png">

### (E â†’ R) _Equality_ before _Range_

Though _Range_ predicates scan a subset of keys (unlike _Sort_ predicates), they should still be placed after Equality predicates to ensure the key ordering is optimized for selectivity.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gt</span><span class="o">:</span> <span class="mi">2015</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Having the _Range_ before the _Equality_ predicate causes more keys to be scanned to identify the matching documents:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;joined&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;(2015.0, inf.0]&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[\&quot;AMER\&quot;, \&quot;AMER\&quot;]&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr03.png">

In this example, 4 keys had to be scanned to identify the 2 matches. Changing the order of the keys to place the Equality predicate first will reduce the amount of scanning required:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="s2">&quot;AMER&quot;</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gt</span><span class="o">:</span> <span class="mi">2015</span> <span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[\&quot;AMER\&quot;, \&quot;AMER\&quot;]&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;joined&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;(2015.0, inf.0]&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr04.png">

After placing the _Equality_ predicate before the _Range_ predicate, only the number of keys necessary to satisfy the filter criteria are scanned.

### (S â†’ R) _Sort_ before _Range_

Having a _Range_ predicate before the _Sort_ can result in a Blocking (In Memory) Sort being performed as the [index cannot be used to satisfy the sort criteria](https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">joined</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gt</span><span class="o">:</span> <span class="mi">2015</span> <span class="p">}</span> <span class="p">}).</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;SORT&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;sortPattern&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="mf">1.0</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;memUsage&quot;</span> <span class="o">:</span> <span class="mf">136.0</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;memLimit&quot;</span> <span class="o">:</span> <span class="mf">33554432.0</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;SORT_KEY_GENERATOR&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>                <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;joined&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="s2">&quot;(2015.0, inf.0]&quot;</span>
</span><span class='line'>                    <span class="p">],</span>
</span><span class='line'>                    <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr05.png">

In this example, the filter was able to use the index selectively to identify the 4 keys needed to satisfy the query, however the results are not known to be in order. This results in the identified keys being sorted in memory prior to be returned to the calling stage in the execution plan.

By moving the _Sort_ predicate before the _Range_ predicate however, even though more keys may need to be scanned the keys will be returned correctly ordered.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// operation</span>
</span><span class='line'><span class="nx">createIndex</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">joined</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="nx">find</span><span class="p">({</span> <span class="nx">joined</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gt</span><span class="o">:</span> <span class="mi">2015</span> <span class="p">}</span> <span class="p">}).</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">region</span><span class="o">:</span> <span class="mi">1</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// execution stats</span>
</span><span class='line'><span class="s2">&quot;nReturned&quot;</span> <span class="o">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalKeysExamined&quot;</span> <span class="o">:</span> <span class="mf">5.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;totalDocsExamined&quot;</span> <span class="o">:</span> <span class="mf">5.0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;executionStages&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;inputStage&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;stage&quot;</span> <span class="o">:</span> <span class="s2">&quot;IXSCAN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;region&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;joined&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;[MinKey, MaxKey]&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<img src="/images/esr06.png">

Though this method requires scanning additional keys the lack of a blocking sort will generally be far more efficient/performant.

I hope that the _ESR "Rule"_ helps you optimize your MongoDB indexes and improve your query performance. If you have questions, feel free to hit me up in the comments, or check out the [MongoDB Developer Community forums](https://developer.mongodb.com/community/forums/).

If you need more timely assistance, consider MongoDB's [Atlas Developer Support](https://docs.atlas.mongodb.com/support/) or [Enterprise Support](https://www.mongodb.com/products/enterprise-grade-support).

Cheers, and happy optimizing!]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Working around MongoDB Stitch's "max async work queue" limit]]></title>
        <link href="http://www.alexbevi.com/blog/2020/03/30/working-around-mongodb-stitchs-max-async-work-queue-limit/"/>
        <updated>2020-03-30T05:19:32-04:00</updated>
        <id>http://www.alexbevi.com/blog/2020/03/30/working-around-mongodb-stitchs-max-async-work-queue-limit</id>
        <content type="html"><![CDATA[[MongoDB Stitch](https://www.mongodb.com/cloud/stitch) is a great way to build apps quickly with your data that's already managed by [MongoDB Atlas](https://www.mongodb.com/cloud/atlas). Though these services empower you to focus on development without having to worry about infrastructure, being a managed service there are occasionally limitations imposed by the vendor.

This article summarizes why this limit exists, as well as how to adapt your [MongoDB Stitch Functions](https://docs.mongodb.com/stitch/functions/) to work around it.

<!-- more -->

The following is an [HTTP Service](https://docs.mongodb.com/stitch/services/http) I've written that has an [incoming webhook](https://docs.mongodb.com/stitch/services/http/#incoming-webhooks). When this webhook is called a MongoDB Stitch Function is run which inserts a number of documents. The number to insert is defined by the `maxItems` [_query parameter_](https://en.wikipedia.org/wiki/Query_string) of the [request payload](https://docs.mongodb.com/stitch/services/http/#request-payload) provided to the incoming webhook.

**NOTE** When doing a number of `insertOne` operations in a loop an [`insertMany`](https://docs.mongodb.com/stitch/mongodb/actions/collection.insertMany/) would likely address the issue directly without requiring any additional workarounds. The following code is really best suited to a number of update or delete operations that have unique filters and cannot be logically grouped.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// MongoDB Stitch Function code for the Incoming Webhook</span>
</span><span class='line'><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">maxItems</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">maxItems</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">CLUSTER</span>    <span class="o">=</span> <span class="s1">&#39;mongodb-atlas&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">DB</span>         <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">COLLECTION</span> <span class="o">=</span> <span class="s1">&#39;web_worker_queue_failures&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">collection</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">services</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">CLUSTER</span><span class="p">).</span><span class="nx">db</span><span class="p">(</span><span class="nx">DB</span><span class="p">).</span><span class="nx">collection</span><span class="p">(</span><span class="nx">COLLECTION</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">maxItems</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">collection</span><span class="p">.</span><span class="nx">insertOne</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">error</span> <span class="p">});</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="s2">&quot;Processed&quot;</span><span class="o">:</span> <span class="nx">items</span><span class="p">.</span><span class="nx">length</span> <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

When the webhook is executed, the number of items processed is returned. In the following example we'll specify that we want 900 items to be inserted:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -w <span class="s2">&quot;\nTotal Time: %{time_total}s\n&quot;</span> <span class="se">\</span>
</span><span class='line'>     -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{}&#39;</span> <span class="se">\</span>
</span><span class='line'>     https://webhooks.mongodb-stitch.com/api/client/v2.0/app/cluster0-app0-abcde/service/WebWorkerFailureTest/incoming_webhook/webhook0?maxItems<span class="o">=</span>900
</span><span class='line'><span class="o">{</span><span class="s2">&quot;Processed&quot;</span>:<span class="o">{</span><span class="s2">&quot;$numberInt&quot;</span>:<span class="s2">&quot;900&quot;</span><span class="o">}}</span>
</span><span class='line'>Total Time: 1.729469s
</span></code></pre></td></tr></table></div></figure>

Based on the output returned from the webhook, 900 items were inserted. Next we'll try with 9000 items:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -w <span class="s2">&quot;\nTotal Time: %{time_total}s\n&quot;</span> <span class="se">\</span>
</span><span class='line'>     -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{}&#39;</span> <span class="se">\</span>
</span><span class='line'>     https://webhooks.mongodb-stitch.com/api/client/v2.0/app/cluster0-app0-abcde/service/WebWorkerFailureTest/incoming_webhook/webhook0?maxItems<span class="o">=</span>9000
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;exceeded max async work queue size of 1000&quot;</span>,<span class="s2">&quot;error_code&quot;</span>:<span class="s2">&quot;FunctionExecutionError&quot;</span>,<span class="s2">&quot;link&quot;</span>:<span class="s2">&quot;https://stitch.mongodb.com/groups/13c415400000000000000000/apps/13c415400000000000000000/logs?co_id=13c415400000000000000000&quot;</span><span class="o">}</span>
</span><span class='line'>Total Time: 0.371383s
</span></code></pre></td></tr></table></div></figure>

Following the `"link"` would redirect you to the [Application Log](https://docs.mongodb.com/stitch/logs/) for the application that the webhook belongs to. This can be useful for debugging.

<img src="/images/stitch-log01.png">

The reason this error is thrown has to do with how the MongoDB Stitch platform handles async request execution within functions using an internal work queue. Operations such as [`insertOne`](https://docs.mongodb.com/stitch/mongodb/actions/collection.insertOne/) return a [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise). To ensure these promises don't queue infinitely waiting to be resolved, MongoDB Stitch will limit the number that can be enqueued, and if this limit is exceeded queuing stops and the exception is raised.

To work around this limit we will adapt our earlier code to instead throttle our work loop to ensure batches of 1000 or less are processed before more work is attempted.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">processWork</span> <span class="o">=</span> <span class="nx">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">CLUSTER</span>    <span class="o">=</span> <span class="s1">&#39;mongodb-atlas&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">DB</span>         <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">COLLECTION</span> <span class="o">=</span> <span class="s1">&#39;web_worker_queue_failures&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">collection</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">services</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">CLUSTER</span><span class="p">).</span><span class="nx">db</span><span class="p">(</span><span class="nx">DB</span><span class="p">).</span><span class="nx">collection</span><span class="p">(</span><span class="nx">COLLECTION</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">totalItems</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">totalItems</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">BATCH_SIZE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">requests</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">BATCH_SIZE</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">insertOne</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">requests</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Errors</span> <span class="k">in</span> <span class="nx">batch</span> <span class="nx">$</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">e</span><span class="p">}</span><span class="err">`</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MongoDB Stitch Function code for the Incoming Webhook</span>
</span><span class='line'><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">maxItems</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">maxItems</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">maxItems</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">processWork</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="s2">&quot;Processed&quot;</span><span class="o">:</span> <span class="nx">items</span><span class="p">.</span><span class="nx">length</span> <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

The number of items to process (based on `maxItems` again) will now be broken up into batches (of `BATCH_SIZE` size). Following this, [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) will execute all the operations in a batch and ensure they are all fulfilled before another batch is processed.

This method allows the workload to be artificially throttled to allow `maxItems` operations to be executed. Let's try running our webhook again for 9000 items:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -w <span class="s2">&quot;\nTotal Time: %{time_total}s\n&quot;</span> <span class="se">\</span>
</span><span class='line'>     -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{}&#39;</span> <span class="se">\</span>
</span><span class='line'>     https://webhooks.mongodb-stitch.com/api/client/v2.0/app/cluster0-app0-abcde/service/WebWorkerFailureTest/incoming_webhook/webhook0?maxItems<span class="o">=</span>9000
</span><span class='line'><span class="o">{</span><span class="s2">&quot;Processed&quot;</span>:<span class="o">{</span><span class="s2">&quot;$numberInt&quot;</span>:<span class="s2">&quot;9000&quot;</span><span class="o">}}</span>
</span><span class='line'>Total Time: 13.935162s
</span></code></pre></td></tr></table></div></figure>

Note that although this strategy will work with an array of items (`maxItems`) of any size, MongoDB Stitch Functions still have runtime limit of 90 seconds (see ["Constraints"](https://docs.mongodb.com/stitch/functions/#constraints)) which cannot be circumvented. If we try running the function for 90000 items, if the function runs for > 90 seconds execution will be terminated:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -w <span class="s2">&quot;\nTotal Time: %{time_total}s\n&quot;</span> <span class="se">\</span>
</span><span class='line'>     -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{}&#39;</span> <span class="se">\</span>
</span><span class='line'>     https://webhooks.mongodb-stitch.com/api/client/v2.0/app/cluster0-app0-abcde/service/WebWorkerFailureTest/incoming_webhook/webhook0?maxItems<span class="o">=</span>90000
</span><span class='line'><span class="o">{</span><span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;execution time limit exceeded&quot;</span>,<span class="s2">&quot;error_code&quot;</span>:<span class="s2">&quot;ExecutionTimeLimitExceeded&quot;</span>,<span class="s2">&quot;link&quot;</span>:<span class="s2">&quot;https://stitch.mongodb.com/groups/13c415400000000000000000/apps/13c415400000000000000000/logs?co_id=13c415400000000000000000&quot;</span><span class="o">}</span>
</span><span class='line'>Total Time: 90.311827s
</span></code></pre></td></tr></table></div></figure>

Happy Coding!]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Identifying and Reclaiming Disk Space in MongoDB]]></title>
        <link href="http://www.alexbevi.com/blog/2020/03/15/identifying-and-reclaiming-disk-space-in-mongodb/"/>
        <updated>2020-03-15T16:23:38-04:00</updated>
        <id>http://www.alexbevi.com/blog/2020/03/15/identifying-and-reclaiming-disk-space-in-mongodb</id>
        <content type="html"><![CDATA[A common question when it comes to MongoDB and the (default) storage engine ([WiredTiger](https://docs.mongodb.com/manual/core/wiredtiger/)) is "Why is it after I removed a bunch of documents my free space didn't increase"?

The WiredTiger storage engine maintains lists of empty records in data files as it deletes documents. This space can be reused by WiredTiger, but will not be returned to the operating system unless under very specific circumstances.

The amount of empty space available for reuse by WiredTiger is reflected in the output of [`db.collection.stats()`](https://docs.mongodb.com/manual/reference/method/db.collection.stats/#db.collection.stats) under the heading `wiredTiger.block-manager.file bytes available for reuse`.

To allow the WiredTiger storage engine to release this empty space to the operating system, you can de-fragment your data file. This can be achieved using the [`compact` command](https://docs.mongodb.com/manual/reference/command/compact/#dbcmd.compact).

As the `db.collection.stats()` command must be run one [collection](https://docs.mongodb.com/manual/reference/glossary/#term-collection) at a time I've written the following script to enhance this functionality as follows:

* scan all [namespaces](https://docs.mongodb.com/manual/reference/glossary/#term-namespace) ([databases](https://docs.mongodb.com/manual/reference/glossary/#term-database) + collections)
* include index space details
* support for sharded collections
* output to CSV

<!-- MORE -->

<noscript><pre>/*
* Print storage details for all collections and indexes.
* Supports sharded clusters
*
* @author alex.bevilacqua@mongodb.com
* @version 1.1
* @updated 2020-05-14
*
* History:
* 1.1 - Include Document Count / Average Object Size
* 1.0 - Initial Release
*/

var fmt = function (bytes) {
    // comment this out to format the results
    return bytes;

    var sizes = [&#39;Bytes&#39;, &#39;KB&#39;, &#39;MB&#39;, &#39;GB&#39;, &#39;TB&#39;];
    if (bytes == 0) return &#39;0 Byte&#39;;
    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + &#39; &#39; + sizes[i];
}

var getDetail = function (label, stats) {
    var detail = {
        name: label,
        count: stats.count,
        avgSize: stats.avgObjSize,
        size: stats.size,
        storageSize: stats.storageSize,
        reusableSpace: stats.wiredTiger[&quot;block-manager&quot;][&quot;file bytes available for reuse&quot;],
        indexSpace: stats.totalIndexSize,
        indexReusable: 0,
    };

    var indexKeys = Object.keys(stats.indexDetails);
    for (var i = 0; i &lt; indexKeys.length; i++) {
        detail.indexReusable += stats.indexDetails[indexKeys[i]][&quot;block-manager&quot;][&quot;file bytes available for reuse&quot;];
    }

    return detail;
}

var dbSizeReport = function (dbname) {
    var results = []
    db.getSiblingDB(dbname).getCollectionNames().forEach(function (c) {
        var coll = db.getSiblingDB(dbname).getCollection(c);
        var s = coll.stats({
            indexDetails: true
        });
        if (s.hasOwnProperty(&quot;sharded&quot;) &amp;&amp; s.sharded) {
            var shards = Object.keys(s.shards);
            for (var i = 0; i &lt; shards.length; i++) {
                var shard = shards[i];
                var shardStat = s.shards[shard];
                results.push(getDetail(s.ns + &quot; (&quot; + shard + &quot;)&quot;, shardStat));
            }
        } else {
            results.push(getDetail(s.ns, s));
        }
    });

    var totals = [0, 0, 0, 0, 0];
    print([&quot;Namespace&quot;, &quot;Total Documents&quot;, &quot;Average Document Size&quot;, &quot;Uncompressed&quot;, &quot;Compressed&quot;, &quot;Reusable from Collections&quot;, &quot;Indexes&quot;, &quot;Reusable from Indexes&quot;].join(&quot;,&quot;))
    for (var i = 0; i &lt; results.length; i++) {
        var row = results[i];
        print([row.name, row.count, row.avgSize, fmt(row.size), fmt(row.storageSize), fmt(row.reusableSpace), fmt(row.indexSpace), fmt(row.indexReusable)].join(&quot;,&quot;))
        totals[0] += row.size;
        totals[1] += row.storageSize;
        totals[2] += row.reusableSpace;
        totals[3] += row.indexSpace;
        totals[4] += row.indexReusable;
    }

    print([&quot;Total&quot;, &quot;&quot;, &quot;&quot;, fmt(totals[0]), fmt(totals[1]), fmt(totals[2]), fmt(totals[3]), fmt(totals[4])].join(&quot;,&quot;));
}

db.getMongo().getDBNames().forEach(function (dbname) {
    print(&quot;---------------------&quot;)
    print(dbname);
    print(&quot;---------------------&quot;)
    dbSizeReport(dbname);
});
</pre></noscript><script src="https://gist.github.com/alexbevi/d89d8ce406e7fcea9f0915b7a7580c28.js"> </script>

Running this script from a `mongo` shell will produce output similar to the following:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---------------------
</span><span class='line'>admin
</span><span class='line'>---------------------
</span><span class='line'>Namespace,Uncompressed,Compressed,Reusable from Collections,Indexes,Reusable from Indexes
</span><span class='line'>admin.system.keys <span class="o">(</span>config<span class="o">)</span>,255 Bytes,36 KB,16 KB,36 KB,16 KB
</span><span class='line'>admin.system.version <span class="o">(</span>config<span class="o">)</span>,59 Bytes,20 KB,0 Byte,20 KB,0 Byte
</span><span class='line'>Total,314 Bytes,56 KB,16 KB,56 KB,16 KB
</span><span class='line'>---------------------
</span><span class='line'>config
</span><span class='line'>---------------------
</span><span class='line'>Namespace,Uncompressed,Compressed,Reusable from Collections,Indexes,Reusable from Indexes
</span><span class='line'>config.actionlog <span class="o">(</span>config<span class="o">)</span>,32 KB,40 KB,16 KB,40 KB,16 KB
</span><span class='line'>config.changelog <span class="o">(</span>config<span class="o">)</span>,346 KB,132 KB,52 KB,96 KB,44 KB
</span><span class='line'>config.chunks <span class="o">(</span>config<span class="o">)</span>,57 KB,52 KB,24 KB,144 KB,64 KB
</span><span class='line'>config.collections <span class="o">(</span>config<span class="o">)</span>,431 Bytes,36 KB,16 KB,36 KB,16 KB
</span><span class='line'>config.databases <span class="o">(</span>config<span class="o">)</span>,108 Bytes,20 KB,0 Byte,20 KB,0 Byte
</span><span class='line'>config.lockpings <span class="o">(</span>config<span class="o">)</span>,3 KB,36 KB,16 KB,72 KB,32 KB
</span><span class='line'>config.locks <span class="o">(</span>config<span class="o">)</span>,771 Bytes,36 KB,16 KB,108 KB,48 KB
</span><span class='line'>config.migrations <span class="o">(</span>config<span class="o">)</span>,0 Byte,24 KB,16 KB,48 KB,32 KB
</span><span class='line'>config.mongos <span class="o">(</span>config<span class="o">)</span>,342 Bytes,36 KB,16 KB,20 KB,0 Byte
</span><span class='line'>config.settings <span class="o">(</span>config<span class="o">)</span>,39 Bytes,20 KB,0 Byte,20 KB,0 Byte
</span><span class='line'>config.shards <span class="o">(</span>config<span class="o">)</span>,297 Bytes,20 KB,0 Byte,44 KB,4 KB
</span><span class='line'>config.system.sessions <span class="o">(</span>shard01<span class="o">)</span>,99 Bytes,36 KB,16 KB,60 KB,20 KB
</span><span class='line'>config.tags <span class="o">(</span>config<span class="o">)</span>,0 Byte,4 KB,0 Byte,24 KB,4 KB
</span><span class='line'>config.transactions <span class="o">(</span>config<span class="o">)</span>,0 Byte,24 KB,16 KB,12 KB,4 KB
</span><span class='line'>config.version <span class="o">(</span>config<span class="o">)</span>,83 Bytes,20 KB,0 Byte,20 KB,0 Byte
</span><span class='line'>Total,441 KB,536 KB,204 KB,764 KB,284 KB
</span><span class='line'>---------------------
</span><span class='line'><span class="nb">test</span>
</span><span class='line'>---------------------
</span><span class='line'>Namespace,Uncompressed,Compressed,Reusable from Collections,Indexes,Reusable from Indexes
</span><span class='line'>test.test1 <span class="o">(</span>shard01<span class="o">)</span>,37 MB,37 MB,27 MB,26 MB,16 MB
</span><span class='line'>test.test1 <span class="o">(</span>shard02<span class="o">)</span>,37 MB,8 MB,52 KB,5 MB,2 MB
</span><span class='line'>test.test1 <span class="o">(</span>shard03<span class="o">)</span>,38 MB,8 MB,56 KB,5 MB,2 MB
</span><span class='line'>test.ups_test <span class="o">(</span>shard01<span class="o">)</span>,0 Byte,24 KB,16 KB,72 KB,48 KB
</span><span class='line'>Total,112 MB,54 MB,27 MB,36 MB,19 MB
</span></code></pre></td></tr></table></div></figure>

This output can then being imported into your favourite spreadsheet for further manipulation.

Based on this sample output, the `test.test1` collection on `shard01` could reclaim approximately 27MB if `compact`ed. Note that the amount of space reclaimed will not necessarily be exactly what is reported here, but is generally a good guideline as to how much space may be reclaimed.
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[MongoDB Initial Sync Progress Monitoring]]></title>
        <link href="http://www.alexbevi.com/blog/2020/02/13/mongodb-initial-sync-progress-monitoring/"/>
        <updated>2020-02-13T12:34:49-05:00</updated>
        <id>http://www.alexbevi.com/blog/2020/02/13/mongodb-initial-sync-progress-monitoring</id>
        <content type="html"><![CDATA[Sometimes our replica set members fall off the [oplog](https://docs.mongodb.com/manual/core/replica-set-oplog/) and the node needs to be resynced. When this happens, an [Initial Sync](https://docs.mongodb.com/manual/core/replica-set-sync/#initial-sync) is required, which does the following:

1. Clones all databases except the local database. To clone, the `mongod` scans every collection in each source database and inserts all data into its own copies of these collections.
2. Applies all changes to the data set. Using the oplog from the source, the `mongod` updates its data set to reflect the current state of the replica set.

When the initial sync finishes, the member transitions from [`STARTUP2`](https://docs.mongodb.com/manual/reference/replica-states/#replstate.STARTUP2) to [`SECONDARY`](https://docs.mongodb.com/manual/reference/replica-states/#replstate.SECONDARY).

Some common questions when performing an initial sync of a [Replica Set Member](https://docs.mongodb.com/manual/core/replica-set-members/) are:

- How do I know if the sync is progressing?
- How long will this take to complete?

<!-- MORE -->

Determining if the sync is progressing can be done by either checking the size of the [`dbPath`](https://docs.mongodb.com/manual/reference/configuration-options/#storage.dbPath) of the syncing node or by running the [`db.adminCommand({ replSetGetStatus: 1, initialSync: 1 })`](https://docs.mongodb.com/manual/reference/command/replSetGetStatus/) command while connected to the SECONDARY via the mongo shell.

<img src="/images/initsync-001.png">

Checking the directory size of the SECONDARY that is being initial sync'ed will provide a good approximation as to how much data still remains to be copied. Note that as the WiredTiger storage engine doesn't "release" space when documents are deleted there is a high probability that the SECONDARY will have a _smaller total directory size_ than the sync source.

The second step (after cloning) where the oplog entries are applied will also affect the overall time required to sync from the sync source.

The `replSetGetStatus` command will produce a JSON document similar to the following. This document contains extensive details as to how the database/collection cloning is progressing, as well as any errors that have occurred during the process.

<noscript><pre>{
  &quot;set&quot;: &quot;replset&quot;,
  &quot;date&quot;: ISODate(&quot;2019-12-04T05:12:52.835Z&quot;),
  &quot;myState&quot;: 5,
  &quot;term&quot;: NumberLong(3),
  &quot;syncingTo&quot;: &quot;m2.example.net:27017&quot;,
  &quot;syncSourceHost&quot;: &quot;m2.example.net:27017&quot;,
  &quot;syncSourceId&quot;: 1,
  &quot;heartbeatIntervalMillis&quot;: NumberLong(2000),
  &quot;majorityVoteCount&quot;: 2,
  &quot;writeMajorityCount&quot;: 2,
  &quot;optimes&quot;: {
    &quot;lastCommittedOpTime&quot;: {
      &quot;ts&quot;: Timestamp(0, 0),
      &quot;t&quot;: NumberLong(-1)
    },
    &quot;lastCommittedWallTime&quot;: ISODate(&quot;1970-01-01T00:00:00Z&quot;),
    &quot;appliedOpTime&quot;: {
      &quot;ts&quot;: Timestamp(0, 0),
      &quot;t&quot;: NumberLong(-1)
    },
    &quot;durableOpTime&quot;: {
      &quot;ts&quot;: Timestamp(0, 0),
      &quot;t&quot;: NumberLong(-1)
    },
    &quot;lastAppliedWallTime&quot;: ISODate(&quot;1970-01-01T00:00:00Z&quot;),
    &quot;lastDurableWallTime&quot;: ISODate(&quot;1970-01-01T00:00:00Z&quot;)
  },
  &quot;lastStableRecoveryTimestamp&quot;: Timestamp(0, 0),
  &quot;lastStableCheckpointTimestamp&quot;: Timestamp(0, 0),
  &quot;initialSyncStatus&quot;: {
    &quot;failedInitialSyncAttempts&quot;: 0,
    &quot;maxFailedInitialSyncAttempts&quot;: 10,
    &quot;initialSyncStart&quot;: ISODate(&quot;2019-12-04T05:12:35.719Z&quot;),
    &quot;initialSyncAttempts&quot;: [],
    &quot;fetchedMissingDocs&quot;: 0,
    &quot;appliedOps&quot;: 0,
    &quot;initialSyncOplogStart&quot;: Timestamp(1575436355, 1),
    &quot;databases&quot;: {
      &quot;databasesCloned&quot;: 2,
      &quot;admin&quot;: {
        &quot;collections&quot;: 4,
        &quot;clonedCollections&quot;: 4,
        &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:35.947Z&quot;),
        &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.486Z&quot;),
        &quot;elapsedMillis&quot;: 539,
        &quot;admin.system.roles&quot;: {
          &quot;documentsToCopy&quot;: 12,
          &quot;documentsCopied&quot;: 12,
          &quot;indexes&quot;: 2,
          &quot;fetchedBatches&quot;: 1,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:35.950Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.101Z&quot;),
          &quot;elapsedMillis&quot;: 151,
          &quot;receivedBatches&quot;: 1
        },
        &quot;admin.system.users&quot;: {
          &quot;documentsToCopy&quot;: 22,
          &quot;documentsCopied&quot;: 22,
          &quot;indexes&quot;: 2,
          &quot;fetchedBatches&quot;: 1,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.101Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.252Z&quot;),
          &quot;elapsedMillis&quot;: 151,
          &quot;receivedBatches&quot;: 1
        },
        &quot;admin.system.keys&quot;: {
          &quot;documentsToCopy&quot;: 2,
          &quot;documentsCopied&quot;: 2,
          &quot;indexes&quot;: 1,
          &quot;fetchedBatches&quot;: 1,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.252Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.372Z&quot;),
          &quot;elapsedMillis&quot;: 120,
          &quot;receivedBatches&quot;: 1
        },
        &quot;admin.system.version&quot;: {
          &quot;documentsToCopy&quot;: 2,
          &quot;documentsCopied&quot;: 2,
          &quot;indexes&quot;: 1,
          &quot;fetchedBatches&quot;: 1,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.372Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.486Z&quot;),
          &quot;elapsedMillis&quot;: 114,
          &quot;receivedBatches&quot;: 1
        }
      },
      &quot;config&quot;: {
        &quot;collections&quot;: 2,
        &quot;clonedCollections&quot;: 2,
        &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.486Z&quot;),
        &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.863Z&quot;),
        &quot;elapsedMillis&quot;: 377,
        &quot;config.transactions&quot;: {
          &quot;documentsToCopy&quot;: 0,
          &quot;documentsCopied&quot;: 0,
          &quot;indexes&quot;: 1,
          &quot;fetchedBatches&quot;: 0,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.487Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.645Z&quot;),
          &quot;elapsedMillis&quot;: 158,
          &quot;receivedBatches&quot;: 0
        },
        &quot;config.system.sessions&quot;: {
          &quot;documentsToCopy&quot;: 1,
          &quot;documentsCopied&quot;: 1,
          &quot;indexes&quot;: 2,
          &quot;fetchedBatches&quot;: 1,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.645Z&quot;),
          &quot;end&quot;: ISODate(&quot;2019-12-04T05:12:36.863Z&quot;),
          &quot;elapsedMillis&quot;: 218,
          &quot;receivedBatches&quot;: 1
        }
      },
      &quot;test&quot;: {
        &quot;collections&quot;: 1,
        &quot;clonedCollections&quot;: 0,
        &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.863Z&quot;),
        &quot;test.hugeindex&quot;: {
          &quot;documentsToCopy&quot;: 25000,
          &quot;documentsCopied&quot;: 9187,
          &quot;indexes&quot;: 2,
          &quot;fetchedBatches&quot;: 8,
          &quot;start&quot;: ISODate(&quot;2019-12-04T05:12:36.865Z&quot;),
          &quot;receivedBatches&quot;: 9
        }
      }
    }
  },
  &quot;members&quot;: [
    {
      &quot;_id&quot;: 0,
      &quot;name&quot;: &quot;m1.example.net:27017&quot;,
      &quot;ip&quot;: &quot;198.51.100.1&quot;,
      &quot;health&quot;: 1,
      &quot;state&quot;: 1,
      &quot;stateStr&quot;: &quot;PRIMARY&quot;,
      &quot;uptime&quot;: 17,
      &quot;optime&quot;: {
        &quot;ts&quot;: Timestamp(1575436355, 1),
        &quot;t&quot;: NumberLong(3)
      },
      &quot;optimeDurable&quot;: {
        &quot;ts&quot;: Timestamp(1575436355, 1),
        &quot;t&quot;: NumberLong(3)
      },
      &quot;optimeDate&quot;: ISODate(&quot;2019-12-04T05:12:35Z&quot;),
      &quot;optimeDurableDate&quot;: ISODate(&quot;2019-12-04T05:12:35Z&quot;),
      &quot;lastHeartbeat&quot;: ISODate(&quot;2019-12-04T05:12:52.216Z&quot;),
      &quot;lastHeartbeatRecv&quot;: ISODate(&quot;2019-12-04T05:12:51.485Z&quot;),
      &quot;pingMs&quot;: NumberLong(0),
      &quot;lastHeartbeatMessage&quot;: &quot;&quot;,
      &quot;syncingTo&quot;: &quot;&quot;,
      &quot;syncSourceHost&quot;: &quot;&quot;,
      &quot;syncSourceId&quot;: -1,
      &quot;infoMessage&quot;: &quot;&quot;,
      &quot;electionTime&quot;: Timestamp(1575434944, 1),
      &quot;electionDate&quot;: ISODate(&quot;2019-12-04T04:49:04Z&quot;),
      &quot;configVersion&quot;: 3
    },
    {
      &quot;_id&quot;: 1,
      &quot;name&quot;: &quot;m2.example.net:27017&quot;,
      &quot;ip&quot;: &quot;198.51.100.2&quot;,
      &quot;health&quot;: 1,
      &quot;state&quot;: 2,
      &quot;stateStr&quot;: &quot;SECONDARY&quot;,
      &quot;uptime&quot;: 17,
      &quot;optime&quot;: {
        &quot;ts&quot;: Timestamp(1575436355, 1),
        &quot;t&quot;: NumberLong(3)
      },
      &quot;optimeDurable&quot;: {
        &quot;ts&quot;: Timestamp(1575436355, 1),
        &quot;t&quot;: NumberLong(3)
      },
      &quot;optimeDate&quot;: ISODate(&quot;2019-12-04T05:12:35Z&quot;),
      &quot;optimeDurableDate&quot;: ISODate(&quot;2019-12-04T05:12:35Z&quot;),
      &quot;lastHeartbeat&quot;: ISODate(&quot;2019-12-04T05:12:52.216Z&quot;),
      &quot;lastHeartbeatRecv&quot;: ISODate(&quot;2019-12-04T05:12:52.728Z&quot;),
      &quot;pingMs&quot;: NumberLong(0),
      &quot;lastHeartbeatMessage&quot;: &quot;&quot;,
      &quot;syncingTo&quot;: &quot;&quot;,
      &quot;syncSourceHost&quot;: &quot;&quot;,
      &quot;syncSourceId&quot;: -1,
      &quot;infoMessage&quot;: &quot;&quot;,
      &quot;configVersion&quot;: 3
    },
    {
      &quot;_id&quot;: 2,
      &quot;name&quot;: &quot;m3.example.net:27017&quot;,
      &quot;ip&quot;: &quot;198.51.100.3&quot;,
      &quot;health&quot;: 1,
      &quot;state&quot;: 5,
      &quot;stateStr&quot;: &quot;STARTUP2&quot;,
      &quot;uptime&quot;: 71,
      &quot;optime&quot;: {
        &quot;ts&quot;: Timestamp(0,
        0),
        &quot;t&quot;: NumberLong(-1)
      },
      &quot;optimeDate&quot;: ISODate(&quot;1970-01-01T00:00:00Z&quot;),
      &quot;syncingTo&quot;: &quot;m2.example.net:27017&quot;,
      &quot;syncSourceHost&quot;: &quot;m2.example.net:27017&quot;,
      &quot;syncSourceId&quot;: 1,
      &quot;infoMessage&quot;: &quot;&quot;,
      &quot;configVersion&quot;: 3,
      &quot;self&quot;: true,
      &quot;lastHeartbeatMessage&quot;: &quot;&quot;
    }
  ],
  &quot;ok&quot;: 1
}</pre></noscript><script src="https://gist.github.com/alexbevi/d52ffd2e27068dcdcc616a5aaf814907.js"> </script>

Depending on the number of databases and collections being sync'ed, the size of this document can be quite large and difficult to visually parse.

To improve this situation I've created the following script.

<noscript><pre>/*
* initialSyncProgress
* @author Alex Bevilacqua &lt;alex@alexbevi.com&gt;
*
* Can be run against a MongoDB 3.4+ mongod that is in STARTUP2 (intitial sync) state to gain some
* insight into how the sync is progressing. This script WILL NOT tell you how long until the sync
* is complete, but based on how the script reports progress can be used to estimate this.
*
* usage:
*   mongo --quiet --eval &quot;load(&#39;initialSyncProgress.js&#39;); initialSyncProgress();&quot;
*/
var printPercentage = function (position, length, type) {
  var p = Math.round((position / length) * 100, 2);
  return position + &quot;/&quot; + length + &quot; &quot; + type + &quot; (&quot; + p + &quot;%)&quot;;
}

var msToTime = function (duration) {
  var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

  hours = (hours &lt; 10) ? &quot;0&quot; + hours : hours;
  minutes = (minutes &lt; 10) ? &quot;0&quot; + minutes : minutes;
  seconds = (seconds &lt; 10) ? &quot;0&quot; + seconds : seconds;

  return hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds + &quot;.&quot; + milliseconds;
}

var initialSyncProgress = function () {
  var status = db.adminCommand({ replSetGetStatus: 1, initialSync: 1 });
  var dbs_cloned = status.initialSyncStatus.databases.databasesCloned;
  delete status.initialSyncStatus.databases.databasesCloned;
  var dbs = Object.keys(status.initialSyncStatus.databases);
  var dbs_total = dbs.length;

  // total time elapsed syncing databases
  var elapsedMillis = 0;

  // status message based on the position within the currently
  // cloning database (collections cloned of collections total)
  var currentlyCloningStatus = &quot;&quot;;

  for (var i = 0; i &lt; dbs_total; i++) {
    var d = status.initialSyncStatus.databases[dbs[i]];
    // if the counts aren&#39;t the same either it&#39;s the database that&#39;s in progress or
    // hasn&#39;t started cloning yet
    if (d.clonedCollections &lt; d.collections) {
      currentlyCloningStatus = &quot;Cloning database &quot; + dbs[i];
      currentlyCloningStatus += &quot; - cloned &quot; + printPercentage(d.clonedCollections, d.collections, &quot;collections&quot;);
      var collectionKeys = Object.keys(d);
      for (var j = 0; j &lt; collectionKeys.length; j++) {
        var c = d[collectionKeys[j]];
        if (c.hasOwnProperty(&quot;documentsToCopy&quot;) &amp;&amp; (c.documentsCopied &lt; c.documentsToCopy)) {
          currentlyCloningStatus += &quot;\nCloning collection &quot; + collectionKeys[j] + &quot; &quot; + printPercentage(c.documentsCopied, c.documentsToCopy, &quot;documents&quot;);
        }
      }
    }
    // only add time if there&#39;s time to record
    if (d.hasOwnProperty(&quot;elapsedMillis&quot;)) {
      elapsedMillis += d.elapsedMillis;
    }
  }
  print(&quot;===================&quot;)
  print(&quot;Initial Sync Status&quot;)
  print(&quot;===================&quot;)
  var now = new Date();
  var started = status.initialSyncStatus.initialSyncStart;
  print(&quot;Cloning started at &quot; + started + &quot; (&quot; + msToTime(now - started) + &quot; ago)&quot;);
  var members = status.members;
  for (var i = 0; i &lt; members.length; i++) {
    if (members[i].stateStr == &quot;PRIMARY&quot;) {
      var optime = members[i].optimeDate
      var me = new Date(status.initialSyncStatus.initialSyncOplogStart.getTime() * 1000);
      print(&quot;Currently &quot; + msToTime(optime - me) + &quot; behind the PRIMARY (based on optimes)&quot;);
    }
  }
  if (status.initialSyncStatus.hasOwnProperty(&quot;initialSyncAttempts&quot;) &amp;&amp; status.initialSyncStatus.initialSyncAttempts.length &gt; 0) {
    var failures = status.initialSyncStatus.initialSyncAttempts.length;
    print(&quot;Cloning has already failed &quot; + failures + &quot; time(s) ...&quot;);
    print(&quot;Last Failure: &quot; + status.initialSyncStatus.initialSyncAttempts[failures - 1].status);
  }
  print(&quot;Copying databases for &quot; + msToTime(elapsedMillis) + &quot;. Note this updates AFTER a collection has been cloned.&quot;);
  print(&quot;Cloned &quot; + printPercentage(dbs_cloned, dbs_total, &quot;databases&quot;));
  print(currentlyCloningStatus);
}
</pre></noscript><script src="https://gist.github.com/alexbevi/422890f191f4bcb82c06fbb621c69331.js"> </script>

By running this against the SECONDARY from the mongo shell, a more concise representation of the `initialSyncStatus` document is produced:

<img src="/images/initsync-002.png">

The script will also let you know if there have been any sync failures recorded, as well as what the last failure was.

<img src="/images/initsync-003.png">

Hopefully you'll find this useful when the time comes to resync one of your nodes.]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[What is MongoDB FTDC (aka. diagnostic.data)]]></title>
        <link href="http://www.alexbevi.com/blog/2020/01/26/what-is-mongodb-ftdc-aka-diagnostic-dot-data/"/>
        <updated>2020-01-26T18:14:50-05:00</updated>
        <id>http://www.alexbevi.com/blog/2020/01/26/what-is-mongodb-ftdc-aka-diagnostic-dot-data</id>
        <content type="html"><![CDATA[[Full Time Diagnostic Data Capture (FTDC)](https://docs.mongodb.com/manual/administration/analyzing-mongodb-performance/#full-time-diagnostic-data-capture) was introduced in MongoDB 3.2 (via [SERVER-19585](https://jira.mongodb.org/browse/SERVER-19585)), to incrementally collect the results of certain diagnostic commands to assist MongoDB support with troubleshooting issues.

On log rotation or startup, a `mongod` or `mongos` will collect and log:

- [`getCmdLineOpts`](https://docs.mongodb.com/manual/reference/command/getCmdLineOpts/): `db.adminCommand({getCmdLineOpts: true})`
- [`buildInfo`](https://docs.mongodb.com/manual/reference/command/buildInfo/): `db.adminCommand({buildInfo: true})`
- [`hostInfo`](https://docs.mongodb.com/manual/reference/command/hostInfo/): `db.adminCommand({hostInfo: true})`

As configured by [`diagnosticDataCollectionPeriodMillis`](https://docs.mongodb.com/manual/reference/parameters/index.html#param.diagnosticDataCollectionPeriodMillis) and defaulting to every 1 second, FTDC will collect the output of the following commands:

- [`serverStatus`](https://docs.mongodb.com/manual/reference/command/serverStatus/): `db.serverStatus({tcmalloc: true})`
- [`replSetGetStatus`](https://docs.mongodb.com/manual/reference/command/replSetGetStatus/): `rs.status()`
- [`collStats`](https://docs.mongodb.com/manual/reference/command/collStats/) for the [`local.oplog.rs`](https://docs.mongodb.com/manual/reference/local-database/#local.oplog.rs) collection ([mongod](https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod) only)
- [`connPoolStats`](https://docs.mongodb.com/manual/reference/command/connPoolStats/#dbcmd.connPoolStats) ([mongos](https://docs.mongodb.com/manual/reference/program/mongos/#bin.mongos) only)

When FTDC is enabled (per [`diagnosticDataCollectionEnabled`](https://docs.mongodb.com/manual/reference/parameters/index.html#param.diagnosticDataCollectionEnabled)), the `metrics.xxxxxxx` files will be stored in [`diagnosticDataCollectionDirectoryPath`](https://docs.mongodb.com/manual/reference/parameters/index.html#param.diagnosticDataCollectionDirectoryPath) which by default is the _diagnostic.data_ directory within the [`systemLog.path`](https://docs.mongodb.com/manual/reference/configuration-options/#systemLog.path).

With [SERVER-21818](https://jira.mongodb.org/browse/SERVER-21818) (introduced in MongoDB 3.2.13) and [SERVER-31400](https://jira.mongodb.org/browse/SERVER-31400) (introduced in MongoDB 3.4.16) the diagnostic data capture scope was broadened to not only include internal diagnostic commands but system metrics as well. Depending on the host operating system, the diagnostic data may include one or more of the following statistics:

- CPU utilization (ex: [`/proc/stat`](http://www.linuxhowtos.org/System/procstat.htm))
- Memory utilization (ex: [`/proc/meminfo`](https://www.thegeekdiary.com/understanding-proc-meminfo-file-analyzing-memory-utilization-in-linux/))
- Disk utilization related to performance (ex: [`*/sys/block/\*/stat*`](https://www.kernel.org/doc/Documentation/block/stat.txt))
- Network performance statistics ([`/proc/net/netstat`](https://unix.stackexchange.com/questions/435579/is-there-documentation-for-proc-net-netstat-and-proc-net-snmp))

The `metrics.xxxxxxx` files in the `diagnostic.data` directory contain only statistics about the performance of the system and the database. They are stored in a compressed format, and are not human-readable.

Just a quick note regarding privacy, regardless of the version, the data in _diagnostic.data_ never contains:

- Samples of queries, query predicates, or query results
- Data sampled from any end-user collection or index
- System or MongoDB user credentials or security certificates

FTDC data contains certain host machine information such as hostnames, operating system information, and the options or settings used to start the `mongod` or `mongos`. This information may be considered protected or confidential by some organizations or regulatory bodies, but is not typically considered to be [Personally Identifiable Information (PII)](https://en.wikipedia.org/wiki/Personal_data).

If you want to have a closer look at the diagnostic data collection process, you can inspect the [FTDC code](https://github.com/mongodb/mongo/tree/master/src/mongo/db/ftdc).

## FTDC Structure

<!-- MORE -->

There are two types of FTDC documents: a [BSON metadata document](https://github.com/mongodb/mongo/blob/r4.2.3/src/mongo/db/ftdc/util.h#L136), or a [BSON metric chunk](https://github.com/mongodb/mongo/blob/r4.2.3/src/mongo/db/ftdc/util.h#L150).

Each document is made up of an `_id`, a `type` and either a `doc` or `data` field. The `type` field is used to identify the document type:

- 0: Metadata Document
- 1: Metric Chunk

The `doc` or `data` fields will contain "samples" in the form of:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span> <span class="o">:</span> <span class="nx">DateTime</span><span class="p">,</span> <span class="cm">/* Time at which all collecting started */</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="cm">/* name is from name() in FTDCCollectorInterface */</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;start&quot;</span> <span class="o">:</span> <span class="nx">DateTime</span><span class="p">,</span> <span class="cm">/* Time at which name() collection started */</span>
</span><span class='line'>        <span class="s2">&quot;data&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>   <span class="cm">/* data comes from collect() in FTDCCollectorInterface */</span>
</span><span class='line'>        <span class="s2">&quot;end&quot;</span> <span class="o">:</span> <span class="nx">DateTime</span><span class="p">,</span>   <span class="cm">/* Time at which name() collection ended */</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span> <span class="cm">/* more than 1 collector be sampled */</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span> <span class="o">:</span> <span class="nx">DateTime</span> <span class="cm">/* Time at which all collecting ended */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Samples are [collected by `FTDCCollectorInterface`](https://github.com/mongodb/mongo/blob/r4.2.3/src/mongo/db/ftdc/collector.h#L110) instances.

### Metadata Document

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span><span class="o">:</span>  <span class="nx">DateTime</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;doc&quot;</span><span class="o">:</span>  <span class="p">{</span> <span class="p">..</span> <span class="p">}</span> <span class="cm">/* Samples from collectors */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

On log rotation or startup, the first FTDC entry will be collected and stored. This is a BSON document that contains information sampled by running [`getCmdLineOpts`](https://docs.mongodb.com/manual/reference/command/getCmdLineOpts/), [`buildInfo`](https://docs.mongodb.com/manual/reference/command/buildInfo/) and [`hostInfo`](https://docs.mongodb.com/manual/reference/command/hostInfo/).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// example</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="nx">DateTime</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;buildInfo&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;getCmdLineOpts&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;hostInfo&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="nx">DateTime</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

This sample will be stored in the `doc` field of the metadata document.

### Metric Chunk

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span><span class="o">:</span>  <span class="nx">DateTime</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="nx">BinData</span><span class="p">(...)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

During each collection interval (as configured by [`diagnosticDataCollectionPeriodMillis`](https://docs.mongodb.com/manual/reference/parameters/index.html#param.diagnosticDataCollectionPeriodMillis)), a metric chunk will be created and a sample will be collected, compressed and stored to the `data` document as Binary Data.

This sample can contain the results of internal commands such as [`serverStatus`](https://docs.mongodb.com/manual/reference/command/serverStatus/),[`replSetGetStatus`](https://docs.mongodb.com/manual/reference/command/replSetGetStatus/), [`collStats`](https://docs.mongodb.com/manual/reference/command/collStats/) for the [`local.oplog.rs`](https://docs.mongodb.com/manual/reference/local-database/#local.oplog.rs) collection or [`connPoolStats`](https://docs.mongodb.com/manual/reference/command/connPoolStats/#dbcmd.connPoolStats), as well as external system metrics.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// example</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="nx">DateTime</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;serverStatus&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;connPoolStats&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;systemMetrics&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="nx">DateTime</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

## Decoding FTDC `metrics.xxxxxxx` files

FTDC files, such as the `metrics.2019-10-28T19-02-23Z-00000` example file we'll be working with below are just [BSON](http://bsonspec.org/) files. As such, the [`bsondump`](https://docs.mongodb.com/manual/reference/program/bsondump/) utility can be used to inspect the contents:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">METRICS</span><span class="o">=</span>metrics.2019-10-28T19-02-23Z-00000
</span><span class='line'>bsondump --quiet <span class="nv">$METRICS</span> <span class="p">|</span> less
</span></code></pre></td></tr></table></div></figure>

<img src="/images/ftdc-001.png">

`bsondump` will default to emitting JSON, so we can interact with this using the [`jq`]() utility. For example, if we only want to review the _Metadata Document_ this could be done as follows:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># bsondump &lt; 4.0</span>
</span><span class='line'>bsondump --quiet <span class="nv">$METRICS</span> <span class="p">|</span> jq -s <span class="s1">&#39;.[] | select( .type == 0)&#39;</span> <span class="p">|</span> less
</span><span class='line'>
</span><span class='line'><span class="c"># bsondump &gt;= 4.0</span>
</span><span class='line'>bsondump --quiet <span class="nv">$METRICS</span> <span class="p">|</span> jq -s <span class="s1">&#39;.[] | select( .type | .&quot;$numberInt&quot; == &quot;0&quot;)&#39;</span> <span class="p">|</span> less
</span></code></pre></td></tr></table></div></figure>

<img src="/images/ftdc-002.png">

Working with _Metric Chunks_ is a little more complicated as they are actually zlib compressed BSON documents. We'll use the `jq` utility to only select the first chunk and the [Ruby](https://www.ruby-lang.org/en/) interpreter to decompress the zlib data. Note that the following command can be altered to navigate to other chunks (not only the first) as needed:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># bsondump &lt; 4.0</span>
</span><span class='line'><span class="nv">METRICS</span><span class="o">=</span>metrics.2019-12-20T14-22-56Z-00000
</span><span class='line'>bsondump --quiet <span class="nv">$METRICS</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  jq -s <span class="s1">&#39;.[] | select( .type == 1)&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  jq -s <span class="s1">&#39;first | .data .&quot;$binary&quot;&#39;</span> -Mc <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  ruby -rzlib -rbase64 -e <span class="s1">&#39;d = STDIN.read; print Zlib::Inflate.new.inflate(Base64.decode64(d)[4..-1])&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  bsondump --quiet
</span><span class='line'>
</span><span class='line'><span class="c"># bsondump &gt;= 4.0</span>
</span><span class='line'><span class="nv">METRICS</span><span class="o">=</span>metrics.2019-12-20T14-22-56Z-00000
</span><span class='line'>bsondump --quiet <span class="nv">$METRICS</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  jq -s <span class="s1">&#39;.[] | select( .type | .&quot;$numberInt&quot; == &quot;1&quot;)&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  jq -s <span class="s1">&#39;first | .data .&quot;$binary&quot; .base64&#39;</span> -Mc <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  ruby -rzlib -rbase64 -e <span class="s1">&#39;d = STDIN.read; print Zlib::Inflate.new.inflate(Base64.decode64(d)[4..-1])&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  bsondump --quiet
</span></code></pre></td></tr></table></div></figure>

You eagle-eyed Rubyists will notice that we're clipping the first 4 bytes from the binary data we're reading from STDIN. This is to drop the header before we try to decompress the stream.

If you don't do this [zlib](https://www.zlib.net/) will complain and fail:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>        1: from -e:1:in <span class="sb">`</span>&lt;main&gt;<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">-e:1:in `inflate&#39;</span>: incorrect header check <span class="o">(</span>Zlib::DataError<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

The binary data has now been decompressed, and being BSON data we run it through `bsondump` again and voila:

<img src="/images/ftdc-003.png">

Hopefully this helps shed some light on what FTDC data is and what it contains. In a future post we'll look into doing something useful with this treasure trove of telemetry our clusters are generating every 1 second or so.]]></content>
    </entry>
    
</feed>
