<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: javascript | ALEX BEVILACQUA]]></title>
    <link href="http://www.alexbevi.com/blog/categories/javascript/atom.xml" rel="self"/>
    <link href="http://www.alexbevi.com/"/>
    <updated>2016-02-10T22:48:05-05:00</updated>
    <id>http://www.alexbevi.com/</id>
    <author>
        <name><![CDATA[Alex Bevilacqua]]></name>
        <email><![CDATA[alex@alexbevi.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Identifying failing system.js functions in MongoDb]]></title>
        <link href="http://www.alexbevi.com/blog/2016/02/10/identifying-failing-system-dot-js-functions-in-mongodb/"/>
        <updated>2016-02-10T15:17:56-05:00</updated>
        <id>http://www.alexbevi.com/blog/2016/02/10/identifying-failing-system-dot-js-functions-in-mongodb</id>
        <content type="html"><![CDATA[<img class="right" src="/images/MongoDB-Logo-Knockout.jpg">

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>laptop<span class="o">(</span>mongod-3.2.1<span class="o">)</span> <span class="nb">test</span>&gt; db.loadServerScripts<span class="o">()</span>
</span><span class='line'>2016-02-10T15:18:42.322-0500 E QUERY    <span class="o">[</span>thread1<span class="o">]</span> SyntaxError: unterminated string literal :
</span><span class='line'>DB.prototype.loadServerScripts/&lt;@src/mongo/shell/db.js:1158:9
</span><span class='line'>DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
</span><span class='line'>DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
</span><span class='line'>@<span class="o">(</span>shell<span class="o">)</span>:1:1
</span><span class='line'>
</span><span class='line'>2016-02-10T15:18:42.323-0500 E QUERY    <span class="o">[</span>thread1<span class="o">]</span> Error: SyntaxError: unterminated string literal :
</span><span class='line'>DB.prototype.loadServerScripts/&lt;@src/mongo/shell/db.js:1158:9
</span><span class='line'>DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
</span><span class='line'>DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
</span><span class='line'>@<span class="o">(</span>shell<span class="o">)</span>:1:1
</span><span class='line'> :
</span><span class='line'>DB.prototype.loadServerScripts/&lt;@src/mongo/shell/db.js:1158:9
</span><span class='line'>DBQuery.prototype.forEach@src/mongo/shell/query.js:477:1
</span><span class='line'>DB.prototype.loadServerScripts@src/mongo/shell/db.js:1157:5
</span><span class='line'>@<span class="o">(</span>shell<span class="o">)</span>:1:15:17:56
</span></code></pre></td></tr></table></div></figure>

Occasionally we'll run into these scenarios where we need to load the `system.js` functions into the global context, but for whatever reason one (or more) scripts are borked.

I created on that essentially looks like the following to illustrate this point.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">thisFunctionShouldFail</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">&quot;</span><span class="nx">Fail</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

When you try to execute a `db.loadServerScripts()` call, the entire process will fail as there is a malformed script.

This is a major pain in the ass when you have large background processes that rely heavily on internal system scripts.

In order to address this, we wrote a small script that you can run against any database to validate the internal scripts:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">testSystemJs</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">system</span><span class="p">.</span><span class="nx">js</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">coll</span><span class="p">.</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="nx">_id</span><span class="o">:</span> <span class="mi">1</span><span class="p">}).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>           <span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="nx">coll</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">_id</span><span class="o">:</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_id</span><span class="p">});</span>
</span><span class='line'>           <span class="nb">eval</span><span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">print</span><span class="p">(</span><span class="s2">&quot;LOAD_ERROR: &quot;</span> <span class="o">+</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_id</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Now if you run the above, it will give you a bit more context into the failures you may have ;)

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">laptop</span><span class="p">(</span><span class="nx">mongod</span><span class="o">-</span><span class="mf">3.2</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span> <span class="nx">test</span><span class="o">&gt;</span> <span class="nx">testSystemJs</span><span class="p">()</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">10</span><span class="nx">T15</span><span class="o">:</span><span class="mi">52</span><span class="o">:</span><span class="mf">13.086</span><span class="o">-</span><span class="mi">0500</span> <span class="nx">E</span> <span class="nx">QUERY</span>    <span class="p">[</span><span class="nx">thread1</span><span class="p">]</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">unterminated</span> <span class="nx">string</span> <span class="nx">literal</span> <span class="o">:</span>
</span><span class='line'><span class="nx">testSystemJs</span><span class="o">/&lt;</span><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">190</span>
</span><span class='line'><span class="nx">DBQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="err">@</span><span class="nx">src</span><span class="o">/</span><span class="nx">mongo</span><span class="o">/</span><span class="nx">shell</span><span class="o">/</span><span class="nx">query</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">477</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'><span class="nx">testSystemJs</span><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">66</span>
</span><span class='line'><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nx">LOAD_ERROR</span><span class="o">:</span> <span class="nx">thisFunctionShouldFail</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">10</span><span class="nx">T15</span><span class="o">:</span><span class="mi">52</span><span class="o">:</span><span class="mf">13.088</span><span class="o">-</span><span class="mi">0500</span> <span class="nx">E</span> <span class="nx">QUERY</span>    <span class="p">[</span><span class="nx">thread1</span><span class="p">]</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">unterminated</span> <span class="nx">string</span> <span class="nx">literal</span> <span class="o">:</span>
</span><span class='line'><span class="nx">testSystemJs</span><span class="o">/&lt;</span><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">190</span>
</span><span class='line'><span class="nx">DBQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="err">@</span><span class="nx">src</span><span class="o">/</span><span class="nx">mongo</span><span class="o">/</span><span class="nx">shell</span><span class="o">/</span><span class="nx">query</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">477</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'><span class="nx">testSystemJs</span><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">66</span>
</span><span class='line'><span class="err">@</span><span class="p">(</span><span class="nx">shell</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nx">LOAD_ERROR</span><span class="o">:</span> <span class="nx">thisFunctionShouldAlsoFail</span>
</span></code></pre></td></tr></table></div></figure>

I'm testing this on a mongo 3.2.1 system, but this method should be applicable to older releases as well.]]></content>
    </entry>
    
</feed>
