<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ALEX BEVILACQUA]]></title>
  <link href="http://www.alexbevi.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.alexbevi.com/"/>
  <updated>2014-06-23T11:09:51-04:00</updated>
  <id>http://www.alexbevi.com/</id>
  <author>
    <name><![CDATA[Alex Bevilacqua]]></name>
    <email><![CDATA[alex@alexbevi.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accessing a running process' STDOUT]]></title>
    <link href="http://www.alexbevi.com/blog/2014/06/02/accessing-stdout-of-a-running-process/"/>
    <updated>2014-06-02T09:16:54-04:00</updated>
    <id>http://www.alexbevi.com/blog/2014/06/02/accessing-stdout-of-a-running-process</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently doing a lot of scripting at work. Although the primary environment is Windows, I have to manage some Linux processes as well.</p>

<p>One example is a series of PowerShell scripts I&rsquo;ve written which abstract away various ETL tasks tha we need in order to get legacy data extracted, updated and inserted into other databases.</p>

<p><img src="/images/20140602-001.jpg"></p>

<!-- more -->


<p>One of the longer running processes I have is a Ruby Rake task that processes an uploaded CSV file. This can potentially take a long time, and although I could modify the script to feed progress data back, I&rsquo;d like to demonstrate how to followup from another terminal session.</p>

<p>Any Rake task I write that can potentially take a while, I tend to jazz up a bit with progress details. For this current example, I am using the <a href="https://github.com/paul/progress_bar">progress_bar</a> gem, which writes an ASCII progress bar to the terminal along with some other useful progress information.</p>

<p>If I were to execute the task directly, I could watch the progress directly. Since we&rsquo;re running this script remotely though, this information isn&rsquo;t directly accessible.</p>

<p>In order to gain access to the progress info for this taks, we&rsquo;ll need to access the process' STDOUT from an alternate session.</p>

<p>The first step is to find the PID of the process we would like:</p>

<pre><code>ps aux | grep ruby

&gt;&gt; 1001     16544 67.7 29.4 1319420 506456 ?      Rl   13:00   3:02 ruby rake phoenix:sync_locations_from_csv
</code></pre>

<p>Now that we have the PID, we can pass this to <a href="http://en.wikipedia.org/wiki/Strace">strace</a> in order to gain a bit more insight into the current process.</p>

<pre><code>sudo strace -p 16544 -s 80 -e write 2&gt;&amp;1 | grep "write(2, \"\["
</code></pre>

<p><img src="/images/20140602-002.jpg"></p>

<p>We&rsquo;re redirecting the output of <em>strace</em> in order to further filter the results using <a href="http://en.wikipedia.org/wiki/Grep">grep</a>. Depending on what process you&rsquo;re looking to monitor you may need to adjust your grep conditions.</p>

<p>You can also exclude the redirect and grep entirely, but this may result in too much information to be useful ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Pry Breakpoints out of Git]]></title>
    <link href="http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git/"/>
    <updated>2012-08-23T07:57:00-04:00</updated>
    <id>http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git</id>
    <content type="html"><![CDATA[<p>My Ruby workflow as of late has almost always contained <a href="http://www.git-scm.com">Git</a> for version control, and <a href="http://pryrepl.org/">Pry</a> for debugging.</p>

<p>Although it&rsquo;s extremely convenient during development to add a quick breakpoint using <code>binding.pry</code>, it can be a bit frustrating to clients if you accidentally deploy with these breakpoints still intact.</p>

<!-- more -->


<p>After hunting around for a bit, I decided to write a pre-commit <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">hook</a> that would check the files I was about to check in to ensure that I didn&rsquo;t accidentally still have breakpoints enabled.</p>

<p><div><script src='https://gist.github.com/3436040.js'></script>
<noscript><pre><code># Git pre-commit hook
#
# Check all Ruby (*.rb) files for Pry breakpoint references
#
# Based on http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/
#
# Intallation:
#       ln -s /path/to/pre-commit.sh /path/to/project/.git/hooks/pre-commit
#
FORBIDDEN=&#39;binding.pry&#39;
git diff --cached --name-only | \
    find -name &#39;*.rb&#39; | \
    GREP_COLOR=&#39;4;5;37;41&#39; xargs grep --color --with-filename -n $FORBIDDEN &amp;&amp; \
    echo &#39;COMMIT REJECTED Found &quot;$FORBIDDEN&quot; references. Please remove them before commiting&#39; &amp;&amp; \
    exit 1</code></pre></noscript></div>
</p>

<p>This file just needs to be saved to <code>/path/to/source/.git/hooks/pre-commit</code> and made exectuable.</p>

<p>If you happen to leave a breakpoint intact, the next time you try to commit your changes, the commit will fail and indicate where these breakpoints are, and what files need to be updated to allow the commit to succeed.</p>

<p><img src="/images/2012-08-23-ss.png"></p>
]]></content>
  </entry>
  
</feed>
