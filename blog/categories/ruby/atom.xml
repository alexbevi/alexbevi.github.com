<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby | ALEX BEVILACQUA]]></title>
    <link href="http://www.alexbevi.com/blog/categories/ruby/atom.xml" rel="self"/>
    <link href="http://www.alexbevi.com/"/>
    <updated>2021-03-26T09:51:20-04:00</updated>
    <id>http://www.alexbevi.com/</id>
    <author>
        <name><![CDATA[Alex Bevilacqua]]></name>
        <email><![CDATA[alex@alexbevi.com]]></email>
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Analysis and Optimization of an N+1 Scenario in Mongoid]]></title>
        <link href="http://www.alexbevi.com/blog/2021/03/26/analysis-and-optimization-of-an-n-plus-1-scenario-in-mongoid/"/>
        <updated>2021-03-26T09:16:09-04:00</updated>
        <id>http://www.alexbevi.com/blog/2021/03/26/analysis-and-optimization-of-an-n-plus-1-scenario-in-mongoid</id>
        <content type="html"><![CDATA[The `N + 1` queries problem is a common issue Rails applications face whereby iterating an array of models and accessing an association results in a sub-optimal pattern of recurring queries.

To address this Rails offers [Eager Loading Associations](https://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations) and there are gems (such as [bullet](https://github.com/flyerhzm/bullet)) that can be used to detect the `N + 1` pattern in an application.

This `N + 1` problem can manifest in any [ODM or ORM](https://medium.com/spidernitt/orm-and-odm-a-brief-introduction-369046ec57eb), including when working with MongoDB and Ruby.

For the purposes of this example we have a Ruby application that is using the [Mongoid](https://docs.mongodb.com/mongoid/current/) ODM with a minimal [Document](https://docs.mongodb.com/mongoid/current/tutorials/mongoid-documents/) model that contains a single [Field](https://docs.mongodb.com/mongoid/current/tutorials/mongoid-documents/#fields) definition. The scripts to setup the cluster and seed the data are shared at the end of this article (see _Reproduction_).

<!-- MORE -->

Our model only defines a single field, but an external process updates the underlying document in the MongoDB cluster with telemetry entries. As no schema is enforced, this is perfectly valid however the documents may grow too large over time for which we've written the following Ruby application to periodically clean up:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># mongoid_n_plus_1.rb</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/inline&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gemfile</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">clients</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">uri</span><span class="p">:</span> <span class="s2">&quot;mongodb://localhost:27017,localhost:27018,localhost:27019/test&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># return all entries from the document that aren&#39;t defined as Mongoid fields</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">entries</span>
</span><span class='line'>    <span class="kp">attr</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">clone</span>
</span><span class='line'>    <span class="kp">attr</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">fields</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="kp">attr</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compact!</span>
</span><span class='line'>    <span class="c1"># unset each field that doesn&#39;t belong to the Mongoid document as an</span>
</span><span class='line'>    <span class="c1"># explicitly defined field</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">unset</span> <span class="n">entry</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Using a Ruby REPL we can require the above code and verify it's connecting to our cluster and interacting with our document:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">require_relative</span> <span class="s1">&#39;mongoid_n_plus_1&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="no">Test</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Test _id: 1.0, name: &quot;Alex&quot;&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">10000</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">entries</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">15</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;2021-03-25T10:30:21&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:22&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:23&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:24&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:25&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:26&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:27&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:28&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:29&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:30&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:31&quot;</span><span class="p">,</span> <span class="mi">11</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:32&quot;</span><span class="p">,</span> <span class="mi">12</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:33&quot;</span><span class="p">,</span> <span class="mi">13</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:34&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:35&quot;</span><span class="p">,</span> <span class="mi">15</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;2021-03-25T10:30:36&quot;</span><span class="p">,</span> <span class="mi">16</span><span class="o">.</span><span class="mi">0</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>

Next let's measure our `compact!` operations:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="n">t</span><span class="o">.</span><span class="n">compact!</span> <span class="p">}</span>
</span><span class='line'>  <span class="mi">17</span><span class="o">.</span><span class="mi">319826</span>   <span class="mi">1</span><span class="o">.</span><span class="mo">025</span><span class="mi">931</span>  <span class="mi">18</span><span class="o">.</span><span class="mi">345757</span> <span class="p">(</span> <span class="mi">55</span><span class="o">.</span><span class="mo">0044</span><span class="mi">95</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

We're only modifying a single document, after reviewing the FTDC<sup>[1](#fn1)</sup> it appears there are about 10K update operations issued, which is taking about a minute to completed.

<img src="/images/nplus1-1.png">

After reviewing the documentation for MongoDB's [`$unset`](https://docs.mongodb.com/manual/reference/operator/update/unset/) update operator it appears we can pass more than one field at a time. If this is the case, we can send a single command with a list of 10K fields as opposed to 10K commands with a single field each.

To test this we modify our `compact!` method as follow:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">compact!</span>
</span><span class='line'>    <span class="c1"># each field in the `entries` array is a [k,v] array</span>
</span><span class='line'>    <span class="c1"># map the `k` (field) values into a single array and send them all</span>
</span><span class='line'>    <span class="c1"># as a single unset command</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">unset</span> <span class="nb">self</span><span class="o">.</span><span class="n">entries</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:first</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

After testing this the result confirms our theory and the performance is significantly better:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="n">t</span><span class="o">.</span><span class="n">compact!</span> <span class="p">}</span>
</span><span class='line'>  <span class="mi">0</span><span class="o">.</span><span class="mi">150776</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">00250</span><span class="mi">9</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">153285</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">273297</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

Reviewing the FTDC again shows only a single command was issued:

<img src="/images/nplus1-2.png">

Anytime operations are being sent to the server from within a loop there may be an opportunity to group/batch actions in a more efficient manner. The first step to improving performance is being able to identify an opportunity for improvement, which I hope this article helps you do.

Happy Coding!

### Reproduction

First, we spin up a local [replica set](https://docs.mongodb.com/manual/replication) using some open source MongoDB helper utilities (see [`m`](https://github.com/aheckmann/m) and [`mtools`](https://github.com/rueckstiess/mtools)):

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>m 4.2.13
</span><span class='line'>mlaunch init --replicaset --nodes <span class="m">3</span> --binarypath <span class="k">$(</span>m bin 4.2.13<span class="k">)</span> --host localhost --bind_ip_all
</span><span class='line'>mongo <span class="s2">&quot;mongodb://localhost:27017,localhost:27018,localhost:27019/test&quot;</span> test.js
</span></code></pre></td></tr></table></div></figure>

The JavaScript file (`test.js`) above is used to seed the collection with a single document and 10,000 telemetry entries:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// test.js</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tests</span><span class="p">.</span><span class="nx">drop</span><span class="p">();</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tests</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Alex&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">d</span><span class="p">.</span><span class="nx">setSeconds</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">update</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">toISOString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tests</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">$set</span><span class="o">:</span> <span class="nx">update</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

From the [`mongo`](https://docs.mongodb.com/manual/mongo/) or [`mongosh`](https://docs.mongodb.com/mongodb-shell/) the result of this script can be verified:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> mongo <span class="s2">&quot;mongodb://localhost:27017,localhost:27018,localhost:27019/test&quot;</span> --quiet --eval <span class="s1">&#39;db.tests.find().pretty()&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span>: 1,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Alex&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T10:55:23&quot;</span>: 1,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T10:55:24&quot;</span>: 2,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T10:55:25&quot;</span>: 3,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T10:55:26&quot;</span>: 4,
</span><span class='line'>  ...
</span><span class='line'>  <span class="s2">&quot;2021-03-25T13:41:59&quot;</span>: 9997,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T13:42:00&quot;</span>: 9998,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T13:42:01&quot;</span>: 9999,
</span><span class='line'>  <span class="s2">&quot;2021-03-25T13:42:02&quot;</span>: 10000
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<hr>
<small><a name="fn1">1</a>: As a MongoDB Technical Services engineer I have access to tools we can use to parse the cluster's `FTDC` (see ["What is MongoDB FTDC (aka. diagnostic.data)"](/blog/2020/01/26/what-is-mongodb-ftdc-aka-diagnostic-dot-data/) for more info) and visualize time series performance telemetry, which were used to generate the following charts.</small>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Accessing a running process' STDOUT]]></title>
        <link href="http://www.alexbevi.com/blog/2014/06/02/accessing-stdout-of-a-running-process/"/>
        <updated>2014-06-02T09:16:54-04:00</updated>
        <id>http://www.alexbevi.com/blog/2014/06/02/accessing-stdout-of-a-running-process</id>
        <content type="html"><![CDATA[I'm currently doing a lot of scripting at work. Although the primary environment is Windows, I have to manage some Linux processes as well.

One example is a series of PowerShell scripts I've written which abstract away various ETL tasks that we need in order to get legacy data extracted, updated and inserted into other databases.

<img src="/images/20140602-001.jpg">

<!-- more -->

One of the longer running processes I have is a Ruby Rake task that processes an uploaded CSV file. This can potentially take a long time, and although I could modify the script to feed progress data back, I'd like to demonstrate how to follow-up from another terminal session.

Any Rake task I write that can potentially take a while, I tend to jazz up a bit with progress details. For this current example, I am using the [progress_bar](https://github.com/paul/progress_bar) gem, which writes an ASCII progress bar to the terminal along with some other useful progress information.

If I were to execute the task directly, I could watch the progress directly. Since we're running this script remotely though, this information isn't directly accessible.

In order to gain access to the progress info for this task, we'll need to access the process' STDOUT from an alternate session.

The first step is to find the PID of the process we would like:

    ps aux | grep ruby

    >> 1001     16544 67.7 29.4 1319420 506456 ?      Rl   13:00   3:02 ruby rake phoenix:sync_locations_from_csv

Now that we have the PID, we can pass this to [strace](http://en.wikipedia.org/wiki/Strace) in order to gain a bit more insight into the current process.

    sudo strace -p 16544 -s 80 -e write 2>&1 | grep "write(2, \"\["

<img src="/images/20140602-002.jpg">

We're redirecting the output of *strace* in order to further filter the results using [grep](http://en.wikipedia.org/wiki/Grep). Depending on what process you're looking to monitor you may need to adjust your grep conditions.

You can also exclude the redirect and grep entirely, but this may result in too much information to be useful ;)
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Keeping Pry Breakpoints out of Git]]></title>
        <link href="http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git/"/>
        <updated>2012-08-23T07:57:00-04:00</updated>
        <id>http://www.alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git</id>
        <content type="html"><![CDATA[My Ruby workflow as of late has almost always contained [Git](http://www.git-scm.com) for version control, and [Pry](http://pryrepl.org/) for debugging.

Although it's extremely convenient during development to add a quick breakpoint using `binding.pry`, it can be a bit frustrating to clients if you accidentally deploy with these breakpoints still intact.

<!-- more -->

After hunting around for a bit, I decided to write a pre-commit [hook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks) that would check the files I was about to check in to ensure that I didn't accidentally still have breakpoints enabled.

<noscript><pre># Git pre-commit hook to check all staged Ruby (*.rb/haml/coffee) files 
# for Pry binding references
#
# Installation
#
#   ln -s /path/to/pre-commit.sh /path/to/project/.git/hooks/pre-commit
#
# Based on 
#
#   http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/
#   http://mark-story.com/posts/view/using-git-commit-hooks-to-prevent-stupid-mistakes
#   https://gist.github.com/3266940
#
FILES_PATTERN=&#39;\.(rb|haml|coffee)(\..+)?$&#39;
FORBIDDEN=&#39;binding.pry&#39;

git diff --cached --name-only | \
    grep -E $FILES_PATTERN | \
    GREP_COLOR=&#39;4;5;37;41&#39; xargs grep --color --with-filename -n $FORBIDDEN &amp;&amp; \
    echo &#39;COMMIT REJECTED&#39; &amp;&amp; \
    exit 1

exit 0</pre></noscript><script src="https://gist.github.com/alexbevi/3436040.js"> </script>

This file just needs to be saved to `/path/to/source/.git/hooks/pre-commit` and made executable.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">HOOK_URL</span><span class="o">=</span><span class="s2">&quot;https://gist.githubusercontent.com/alexbevi/3436040/raw/pre-commit.sh&quot;</span>
</span><span class='line'>curl <span class="nv">$HOOK_URL</span> &gt; /path/to/source/.git/hooks/pre-commit
</span><span class='line'>chmod +x /path/to/source/.git/hooks/pre-commit
</span></code></pre></td></tr></table></div></figure>

If you happen to leave a breakpoint intact, the next time you try to commit your changes, the commit will fail and indicate where these breakpoints are, and what files need to be updated to allow the commit to succeed.

<img src="/images/2012-08-23-ss.png">
]]></content>
    </entry>
    
</feed>
