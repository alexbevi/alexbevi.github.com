<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shoutcast | ALEX BEVILACQUA]]></title>
  <link href="http://alexbevi.com/blog/categories/shoutcast/atom.xml" rel="self"/>
  <link href="http://alexbevi.com/"/>
  <updated>2014-01-27T16:08:40-05:00</updated>
  <id>http://alexbevi.com/</id>
  <author>
    <name><![CDATA[Alex Bevilacqua]]></name>
    <email><![CDATA[alexbevi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shoutcast Streaming from the Command Line]]></title>
    <link href="http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line/"/>
    <updated>2012-07-18T08:20:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I spend a lot of time working in a terminal, and I like to spend that time listening to music. Since I work primarly in Linux, I was hoping there would be an easy way to merge these two activities &hellip; and it turns out there was :)</p>

<!-- more -->


<p>After searching around, i found a <a href="http://crunchbanglinux.org/forums/post/150587/#p150587">post on the crunchbang forums</a> that provided exactly the script I was looking for.</p>

<p>I modified it a tiny bit to check for dependencies:</p>

<p>{% codeblock Linux Shoutcast Search and Streaming &ndash; shoutcast.sh lang:bash %}</p>

<h1>!/bin/bash</h1>

<h1>search shoutcast and send url to radiotray or another player</h1>

<h1>needs Bash 4, curl, [radiotray], [xsel to send url to X selection for pasting]</h1>

<h1>(comment out line 53 &ldquo;printf &lsquo;%s&rsquo;&hellip;&rdquo; if you don&rsquo;t use xsel)</h1>

<p>command -v curl > /dev/null 2>&amp;1 || { echo &ldquo;curl required.&rdquo; >&2; exit 1; }
command -v xsel > /dev/null 2>&amp;1 || { echo &ldquo;xsel required.&rdquo; >&2; exit 1; }
command -v radiotray > /dev/null 2>&amp;1 || { echo &ldquo;radiotray required.&rdquo; >&2; exit 1; }</p>

<h1>choose player (&amp; options if necessary): radio url will be sent to it.</h1>

<p>radioplay() {</p>

<pre><code>radiotray "$1"
</code></pre>

<h1>mplayer -playlist &ldquo;$1&rdquo; # replace &lsquo;mplayer -playlist&rsquo; to taste, $1 will hold the url</h1>

<h1>exec mplayer -playlist &ldquo;$1&rdquo; # add &lsquo;exec&rsquo; if you&rsquo;d rather launch player and leave script</h1>

<p>}</p>

<h1>start up radiotray in background if it&rsquo;s not already running</h1>

<h1>Comment out this line if you don&rsquo;t use radiotray.</h1>

<p>pgrep radiotray >/dev/null || ( radiotray >/dev/null 2>&amp;1 &amp; )</p>

<h6>#</h6>

<p>while true
do
echo &ldquo;Please enter keyword(s)&rdquo;
read keyword
keyword=&ldquo;${keyword// /%20}&rdquo; # escape spaces for url
results=$( curl -s &ldquo;<a href="http://www.shoutcast.com/Internet-Radio/$keyword">http://www.shoutcast.com/Internet-Radio/$keyword</a>&rdquo; |awk &lsquo;
BEGIN {</p>

<pre><code>RS="&lt;div class=\"dirlist\"&gt;"
FS="&gt;"
</code></pre>

<p>}
NR &lt; 2 {next}
{url = name = $2
sub(/^.<em>title=\&ldquo;/,&rdquo;&ldquo;,name)
sub(/\&rdquo;.</em>$/,&ldquo;&rdquo;,name)
sub(/^.<em>href=\&ldquo;/,&rdquo;&ldquo;,url)
sub(/\&rdquo;.</em>$/,&ldquo;&rdquo;,url)
print url,name }
&lsquo; )
[[ $results ]] || { echo &ldquo;Sorry, no results for $keyword&rdquo;; continue;}</p>

<p>unset list
declare -A list # make associative array
while read url name # read in awk&rsquo;s output
do</p>

<pre><code>list["$name"]="$url"
</code></pre>

<p>done &lt;&lt;&lt; &ldquo;$results&rdquo;</p>

<p>PS3=&lsquo;Please enter the number of your choice > &rsquo;
while true
do</p>

<pre><code>select station in "${!list[@]}" 'Search Again' Quit
do
    [[ $station = 'Search Again' ]] &amp;&amp; break 2
    [[ $station = Quit ]] &amp;&amp; { echo 'Goodbye...'; exit; }
    [[ $station ]] &amp;&amp; {
    printf '%s' "${list[$station]}" | xsel --input #--clipboard  # can paste url
    radioplay "${list[$station]}"
    break
    }
done
</code></pre>

<p>echo &ldquo;
Last station chosen was $station ( ${list[$station]} )
&rdquo;
done</p>

<p>done # closes loop started at line 18
exit
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
