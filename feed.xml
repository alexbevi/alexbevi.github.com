<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.alexbevi.com/</id><title>ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle> <updated>2021-05-21T07:13:24-04:00</updated> <author> <name>Alex Bevilacqua</name> <uri>https://www.alexbevi.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://www.alexbevi.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://www.alexbevi.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Alex Bevilacqua </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Sanitarium: The ScummVM Asylum Engine Journey Concludes</title><link href="https://www.alexbevi.com/blog/2021/05/19/scummvm-asylum-engine/" rel="alternate" type="text/html" title="Sanitarium: The ScummVM Asylum Engine Journey Concludes" /><published>2021-05-19T06:32:45-04:00</published> <updated>2021-05-21T07:13:18-04:00</updated> <id>https://www.alexbevi.com/blog/2021/05/19/scummvm-asylum-engine/</id> <content src="https://www.alexbevi.com/blog/2021/05/19/scummvm-asylum-engine/" /> <author> <name>Alex Bevilacqua</name> </author> <category term="ScummVM" /> <summary> With PR#2982 - ENGINES: Sanitarium engine being recently merged into ScummVM I wanted to take some time to chronicle the original development efforts which began in 2009. At the time I was looking to work on a new engine in an attempt to improve my knowledge of C++ as well as to “give something back” to the open source community. Some of the engines I was toying with at the time included one’s... </summary> </entry> <entry><title>Ruby Call Path Analysis using TracePoint</title><link href="https://www.alexbevi.com/blog/2021/05/07/call-path-analysis-using-tracepoint/" rel="alternate" type="text/html" title="Ruby Call Path Analysis using TracePoint" /><published>2021-05-07T09:56:11-04:00</published> <updated>2021-05-10T06:19:03-04:00</updated> <id>https://www.alexbevi.com/blog/2021/05/07/call-path-analysis-using-tracepoint/</id> <content src="https://www.alexbevi.com/blog/2021/05/07/call-path-analysis-using-tracepoint/" /> <author> <name>Alex Bevilacqua</name> </author> <category term="Programming" /> <summary> During a recent diagnostic analysis exercise I needed to identify if there was additional “work” being done based on a single option being changed. As Ruby offers numerous productivity tools for developers it should come as no surprise that a mechanism to easily produce a full call stack for one to many operations exists. The code below is using the MongoDB Ruby Driver and Mongoid ODM to $samp... </summary> </entry> <entry><title>Same Blog, New Look!</title><link href="https://www.alexbevi.com/blog/2021/03/28/same-blog-new-look/" rel="alternate" type="text/html" title="Same Blog, New Look!" /><published>2021-03-28T12:28:46-04:00</published> <updated>2021-03-29T07:10:47-04:00</updated> <id>https://www.alexbevi.com/blog/2021/03/28/same-blog-new-look/</id> <content src="https://www.alexbevi.com/blog/2021/03/28/same-blog-new-look/" /> <author> <name>Alex Bevilacqua</name> </author> <category term="Writing" /> <summary> Ever since I started this blog in 2012, I’ve been using Octopress to generate the pages and push to generated content to GitHub Pages for hosting. Octopress is a set of scripts and helpers built on top of Jekyll and provided a lot of convenience in the form of deployment helpers, themes and scripts. Unfortunately, Octopress fell out of maintenance many years ago (2015?) and has been stagnating... </summary> </entry> <entry><title>Analysis and Optimization of an N+1 Scenario in Mongoid</title><link href="https://www.alexbevi.com/blog/2021/03/26/analysis-and-optimization-of-an-n-plus-1-scenario-in-mongoid/" rel="alternate" type="text/html" title="Analysis and Optimization of an N+1 Scenario in Mongoid" /><published>2021-03-26T09:16:09-04:00</published> <updated>2021-03-28T14:19:02-04:00</updated> <id>https://www.alexbevi.com/blog/2021/03/26/analysis-and-optimization-of-an-n-plus-1-scenario-in-mongoid/</id> <content src="https://www.alexbevi.com/blog/2021/03/26/analysis-and-optimization-of-an-n-plus-1-scenario-in-mongoid/" /> <author> <name>Alex Bevilacqua</name> </author> <category term="Ruby" /> <summary> The N + 1 queries problem is a common issue Rails applications face whereby iterating an array of models and accessing an association results in a sub-optimal pattern of recurring queries. To address this Rails offers Eager Loading Associations and there are gems (such as bullet) that can be used to detect the N + 1 pattern in an application. This N + 1 problem can manifest in any ODM or ORM,... </summary> </entry> <entry><title>Visualizing a Replica Set's Sync Source Chain</title><link href="https://www.alexbevi.com/blog/2021/03/23/visualizing-a-replica-sets-sync-source-chain/" rel="alternate" type="text/html" title="Visualizing a Replica Set's Sync Source Chain" /><published>2021-03-23T10:47:41-04:00</published> <updated>2021-03-28T13:22:31-04:00</updated> <id>https://www.alexbevi.com/blog/2021/03/23/visualizing-a-replica-sets-sync-source-chain/</id> <content src="https://www.alexbevi.com/blog/2021/03/23/visualizing-a-replica-sets-sync-source-chain/" /> <author> <name>Alex Bevilacqua</name> </author> <category term="MongoDB" /> <summary> A MongoDB replica set is a group of mongod processes that maintain the same data set. The PRIMARY node receives all write operations and The SECONDARY nodes replicate the PRIMARY’s oplog and apply the operations to their data sets such that the secondaries’ data sets reflect the primary’s data set. Secondaries capture data from the primary member to maintain an up to date copy of the sets’ dat... </summary> </entry> </feed>
