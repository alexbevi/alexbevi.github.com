<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.alexbevi.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.alexbevi.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-07-11T06:18:58-04:00</updated><id>https://www.alexbevi.com/feed.xml</id><title type="html">ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle><entry><title type="html">Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995</title><link href="https://www.alexbevi.com/blog/2024/07/09/discworld/" rel="alternate" type="text/html" title="Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995" /><published>2024-07-09T07:06:16-04:00</published><updated>2024-07-11T06:17:54-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/09/discworld</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/09/discworld/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Discworld_(video_game)">Discworld</a> is a point-and-click adventure game developed by Teeny Weeny Games and Perfect 10 Productions and published by Psygnosis. It is based on <a href="https://en.wikipedia.org/wiki/Terry_Pratchett">Terry Pratchett</a>’s novels of the same name.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00011.png" alt="" /></p>

<p>This adventure game puts the player in the shoes of Rincewind, a wizard whose sole purpose in life is to stay alive. He appears to be very good at it as well, because apparently the universe has decided to continuously challenge him. The game takes place in the humorous fantasy world called the Discworld, as it is actually a flat disc carried on the backs of four gigantic elephants, which themselves stand on the back of an even larger turtle.</p>

<p>The story is loosely based on the <a href="https://en.wikipedia.org/wiki/Guards!_Guards!">novel “Guards! Guards!”</a>. Both in the book and the game, a dragon is summoned by a group of mysterious conspirators and now terrorizes the city state of Ankh-Morpork. Being the most expendable wizard of the Unseen University, Rincewind is given the task to get rid of the beast (only in the game though; in the book, the city’s nightwatch has to deal with the problem).<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00015.png" alt="" /></p>

<p>Discworld is a pretty typical point and click adventure from the mid-90s: the game starts with a brief intro sequence, you’re introduced to the protagonist, you’re given the first (of likely many) fetch quests which you’ll need to complete and you’re on your way.</p>

<p>Over the course of four acts your task is to rid the Discworld of the dragon that the secret brotherhood has summoned. As a wizard of Unseen University, the Archchancellor has decided you’re up to this task so first you’ll need to collect the various elements from around Ankh-Morpork that he needs to build a “dragon detector”.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00005.png" alt="" /></p>

<p>Every time you leave an area of the game you’ll be returned to the map screen, which is how you navigate between the various game locations. There are a few more locations beyond the main map, but the majority of the game takes place here (both in the past, and in the present).</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00010.png" alt="" /></p>

<p>Throughout the course of the game you’ll pick up <em>a lot</em> of items. Luckily for Rincewind you’re always accompanied by your trusty luggage - which is a treasure chest with a lot of legs. I remember vaguely reading these books when I was a kid and the traveling treasure chest standing out to me as a really interesting character, so I was really hoping it would play a big part in this game once it was introduced.</p>

<p>When you find a new item you can pick up you’ll have the option of adding it to the chest or Rincewind’s inventory. The chest has unlimited storage, whereas Rincewind only has 4 “slots” that you can use.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00013.png" alt="" /></p>

<p>Inventory management plays a pretty large role in this game as there are several puzzles that require Rincewind to take items with him to a location the chest can’t access. Typically it’s not obvious what you need to bring with you and the will involve trial and error, backtracking and repetition.</p>

<p>Speaking of backtracking, that’s about 90% of the game. You typically need to talk to everyone you possibly can on every screen to get a sense of what fetch quest they’re going to send you on, then head off to fetch said maguffin.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00007.png" alt="" /></p>

<p>The dialogue system is reminiscent of games of this era such as <a href="/blog/2023/01/23/sam-and-max-hit-the-road/">Sam &amp; Max Hit the Road</a> where a row of icons will be presented that represent various interactions that according to the <a href="https://archive.org/details/discworld-manual/page/n7/mode/2up">mamual</a> represent actions/moods such as <code class="language-plaintext highlighter-rouge">GREETING</code>, <code class="language-plaintext highlighter-rouge">QUESTION</code>, <code class="language-plaintext highlighter-rouge">SARCASM</code>and <code class="language-plaintext highlighter-rouge">ANGER</code>.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00009.png" alt="" /></p>

<p>Though the gameplay itself can be a bit tedious, the character interactions and descriptions of the world you’re engaging with are fantastic. <a href="https://en.wikipedia.org/wiki/Monty_Python">Monty Python</a>’s <a href="https://en.wikipedia.org/wiki/Eric_Idle">Eric Idle</a> voices Rincewind, and really brings the character to life as a dry, witty British stereotype.</p>

<p>There is ever-present <a href="https://www.youtube.com/watch?v=_dxSji16tOc&amp;list=PL9434353ADDF48CD6">background music</a> playing throughout the game, but it just sort of fades into the background. I don’t consider this a bad thing for ambient music as it means it’s essentially just doing it’s job.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00019.png" alt="" /></p>

<p>In order for Rincewind to solve the mystery of who stole the Dragon Summoning book, uncover the identities of the members of the brotherhood and retrieve the various gold trinkets the dragon has requested, he’ll have to travel back in time.</p>

<p>This is done through the University’s library (following a long series of fetch quests) that opens a door to L-Space. Once you’ve accessed L-Space a new series of puzzles need to be solved - many of them involving making changes in the past to impact the placement or availability of things in the present.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00020.png" alt="" /></p>

<p>I really liked the mechanic, but found myself getting lost or confused or having to repeatedly go back and forth between the past and preset trying ot suss out exactly what it is I’m trying to do.</p>

<p>Discworld does not hold your hand. The clues can be vague and require you to really think. I don’t believe any knowledge of the books is required to be successful, but I’m sure it couldn’t hurt.</p>

<p>For example, to get the password to the thieve’s hideout you need to turn the drainpipe, hide, then listen to the pipe with a glass. If you don’t use the glass a long sequence plays out that doesn’t make it obvious you <em>didn’t</em> get the password until you try and get into the hideout.</p>

<p>You then need to repeat this trying various items on the drainpipe to see if anything will happen.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00024.png" alt="" /></p>

<p>Trying everything on everything (including every item on every other item) can be a requirement to progression. There are just so many items you’ll find, an the solution to many puzzles requires either a single item or an item combination puzzle to be solved first - and the solutions are typically not obvious.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00023.png" alt="" /></p>

<p>This is definitely not a game for kids. There are allusions to adult themes, the writing is complex, the humour is more nuanced and you really have to pay attention to your surroundings and all dialogue to make any progress.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00031.png" alt="" /></p>

<p>I seem to remember playing this game as a teenager and just not being able to get into it. I was a big Monty Python fan (who wasn’t in the 90’s) so Eric Idle voicing a character really appealed to me … but I just couldn’t make any progress.</p>

<p>If you’re playing in ScummVM there are a <a href="https://bugs.scummvm.org/query?game=Discworld&amp;status=new&amp;status=pending&amp;order=priority">number of known bugs</a>, though the game is not really affected too badly. I did hit the <a href="https://bugs.scummvm.org/ticket/10659">Act 4 missing guard crash</a>, but that is easily avoidable by just not engaging a clearly missing background character in conversation.</p>

<p>I really love Terry Pratchett’s writing style and have previously read <a href="https://en.wikipedia.org/wiki/The_Colour_of_Magic">The Colour of Magic</a>. Having now played through this game I definitely feel like firing up the eReader and diving back into the world of Ankh-Morpork.</p>

<p>There are better adventure games out there that would likely be more approachable, but the story and writing of Discworld definitely stands out.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Discworld</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Perfect_Entertainment">Teeny Weeny Games/Perfect 10 Productions</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Psygnosis">Psygnosis</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Mac, PlayStation, Sega Saturn</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Tinsel">Tinsel</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/2589"><em>How Long To Beat?</em></a></td>
      <td>11 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/discworld">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>14</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>19</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>59%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/dw1/scummvm-dw-cd-00001.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00001.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00002.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00002.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00003.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00003.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00004.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00004.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00006.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00006.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00008.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00008.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00012.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00012.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00014.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00014.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00016.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00016.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00017.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00017.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00018.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00018.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00021.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00021.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00022.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00022.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00025.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00025.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00026.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00026.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00027.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00027.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00028.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00028.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00029.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00029.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00030.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00030.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/92/altered-destiny/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Tinsel" /><category term="Teeny Weeny Games/Perfect 10 Productions" /><category term="Psygnosis" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Altered Destiny (Accolade) - 1990</title><link href="https://www.alexbevi.com/blog/2024/06/14/altered-destiny/" rel="alternate" type="text/html" title="Altered Destiny (Accolade) - 1990" /><published>2024-06-14T06:06:26-04:00</published><updated>2024-06-17T07:08:14-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/14/altered-destiny</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/14/altered-destiny/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Altered_Destiny">Altered Destiny</a> is a graphic adventure game released by Accolade in 1990 for MS-DOS compatible operating systems and in 1991 for Amiga. The game was designed by Michael Berlyn and it uses a text parser interface. It is the second adventure game from Accolade and it uses the same engine as the first one, <a href="https://en.wikipedia.org/wiki/Les_Manley_in:_Search_for_the_King">Les Manley in: Search for the King</a>.</p>

<p><img src="/images/adventure/altered/017.png" alt="" /></p>

<p>One fine day P. J. Barrett, an ordinary human being from the planet Earth, goes to a repair shop to get his TV set fixed. When he comes back for it, he accidentally picks up the wrong one. No big deal? Quite on the contrary. When the unsuspecting Mr. Barrett returns home and turns the TV on, he is sucked into a portal! One moment later, he finds himself on the strange planet of Daltere. Naturally, this planet needs a savior: the evil alien Helmar has stolen an artifact known as the Jewel of Light, thus endangering the entire galaxy. Now our unlikely hero has to overcome various obstacles and save the world.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/altered/034.png" alt="" /></p>

<p>I never owned an Amiga when I was growing up, though my uncle had one as he was a graphic artist and I guess back in the mid 80s to early 90s this was the system to use - and <a href="https://en.wikipedia.org/wiki/Deluxe_Paint">Deluxe Paint</a> was all the rage.</p>

<p>This wasn’t a system I really got to mess around with (it was a “work” computer), but the odd game I was exposed to I remember having impressive graphics and sound.</p>

<p>Since one of my goals for this retrospective journey is to try and experience as many of these games on as many (emulated) systems as possible, I wanted to make sure I play through a few of these titles on the Amiga.</p>

<p><img src="/images/adventure/altered/014.png" alt="" />
<em>Oh goody, copy protection</em></p>

<p>As soon as you insert disk one and boot the game up you’ll be met with a copy protection screen. I tried to find a copy of the manual online, but failed. Even the game’s entry in the <a href="https://www.gamesdatabase.org/game/commodore-amiga/altered-destiny">Games Database</a> didn’t have anything for me, so I chose to resort to “alternate” means of bypassing this barrier.</p>

<p>It turns out what I needed was the <a href="https://www.mocagh.org/miscgame/altereddestiny-codewheel.jpg">code wheel</a> that could be found at the <a href="https://www.mocagh.org/loadpage.php?getgame=altereddestiny">museum of computer adventure game history</a>, but I found this after I’d finished the game already …</p>

<p><img src="/images/adventure/altered/013.png" alt="" />
<em>I’m guessing Accolade won’t mind that I’m emulating a cracked version of the game 30+ years after it came out</em></p>

<p>I ended up playing the <a href="https://demozoo.org/groups/8/">Skid Row</a> cracked release of the game, which will accept any input on the challenge screen and allow you to progress. Though there are obviously good arguments for why software piracy is bad, when looked at through the lens of digital preservation and making historic content accessible to future generations of players I appreciate the work that these groups put in.</p>

<p><img src="/images/adventure/altered/041.png" alt="" /></p>

<p>Altered Destiny uses a similar engine to Sierra’s first iteration of the SCI engine (<a href="http://sciwiki.sierrahelp.com/index.php/Sierra_Creative_Interpreter#SCI0">SCI0</a>) as it support basic character navigation with the mouse, but all other interaction with the game world was done using a text parser.</p>

<p>The most common verb you’ll use is <code class="language-plaintext highlighter-rouge">LOOK</code>, which will typically give you a lot of information about the screen you’re on, including characters (with their names) you can interact with, items you might be able to pick up and other useful details.</p>

<p><img src="/images/adventure/altered/028.png" alt="" /></p>

<p>There are several alien creatures to talk to. Whenever you <code class="language-plaintext highlighter-rouge">LOOK</code> on a screen the game helpfully tells you the name of the alien there, so it’s easy enough to know who to <code class="language-plaintext highlighter-rouge">TALK</code> to. You then need to <code class="language-plaintext highlighter-rouge">ASK ABOUT</code> various topics to learn what to do next or uncover more of the plot.</p>

<p>You’ll want to take notes as these interactions will usually surface the names of other characters you’ll want to seek out, and you’ll want to ask each alien creature about the others that you’ve met or learned about.</p>

<p><img src="/images/adventure/altered/ad000.gif" alt="" /></p>

<p>Similar to Sierra games at the time, path finding for your character was challenging and would typically result in you falling to your death. I found several times that I’d need to resort to using the mouse to click on a target I wanted PJ to walk to as it would <em>usually</em> get me there safely … but occasionally you were better off using the direction keys on the keyboard.</p>

<p>There’s also only one message ever shown when you die, so it’s not interesting to explore the different ways the environment will end your adventure because you see the same thing regardless of what you do.</p>

<p><img src="/images/adventure/altered/036.png" alt="" />
<em>I do not miss the days of multi-disk games</em></p>

<p>You’ll want to save often, but Amiga games required a save disk to be swapped in in order for this to occur. I played this game using <a href="https://dirkwhoffmann.github.io/vAmiga/">vAmiga</a>, so I could just use save states which are exponentially more convenient than having to swap the save disk in, save, then swap the current game disk in.</p>

<p>Disk access times seriously slow down the game play experience. I don’t know if it’s due to just not having enough experience tuning an Amiga emulator, but I can safely say that 70% of my play time was spent just waiting for the disks to finish spinning.</p>

<p>It was also frustrating when I’d swap disks (as requested) too quickly, so I’d have to put the previous disk back in, let it read, wait for the prompt, switch and try again. SO. MUCH. WAITING.</p>

<p><img src="/images/adventure/altered/037.png" alt="" />
<em>This map screen makes the game world feel bigger than it really is</em></p>

<p>The game world in Altered Destiny is actually fairly small, but once you get down from the floating island and reach the cross roads you’ll get a map screen that shows PJ progressing between the various game areas.</p>

<p><img src="/images/adventure/altered/027.png" alt="" /></p>

<p>Examining your inventory items or various things on screen will bring up a more detailed view that provides additional information. This was particularly useful in helping to identify what might be more important to interact with as the game designers were clearly trying to draw your attention to these.</p>

<p>Like Sierra games of that era, it’s extremely easy to miss picking up key items and you can find yourself in unwinnable situations requiring you to restore to much earlier saves or restart entirely.</p>

<p>This happened to me a couple times, which almost lead me to abandon this playthrough simply because I didn’t want to have to endure the disk access and screen loading times I knew came with back tracking.</p>

<p><img src="/images/adventure/altered/025.png" alt="" /></p>

<p>Items you can pick up are typically fairly obvious, and when they’ve been picked up they’re no longer visible on screen. I appreciate this as it makes the game world feel a bit more interactive as your actions are affecting the world around you.</p>

<p>Whenever there are item combination puzzles though some of the sequences of commands you need to enter can be a bit unintuitive - especially if you were a kid playing this game initially.</p>

<p>For example, to catch the bird here you need to <code class="language-plaintext highlighter-rouge">DROP CAGE</code>, then <code class="language-plaintext highlighter-rouge">SET THE TRAP</code>, <code class="language-plaintext highlighter-rouge">BAIT THE CAGE WITH PIGMENT</code> and wait for the bird to take the bait before you <code class="language-plaintext highlighter-rouge">GET CAGE</code>. I’m sure the game designers thought they were setting you up for success with some of the clues leading up to this point, but I found myself reaching for the walkthrough pretty quickly.</p>

<p><img src="/images/adventure/altered/040.png" alt="" /></p>

<p>To mix up the gameplay a bit there’s one random fight sequence where you need to <code class="language-plaintext highlighter-rouge">WIELD SWORD</code> and knock some creature off a floating platform (hopefully you didn’t forget to pick the sword back up after dropping it much, much earlier).</p>

<p>This is an interesting diversion but since you only do it once and there’s really no setup for it it sort of feels forced and unintuitive. You sort of just have to keep mashing right on the directional pad until you knock the creature into the pool of light, then you need to fall off the platform into the pool as well (I can’t remember why anymore).</p>

<p><img src="/images/adventure/altered/044.png" alt="" /></p>

<p>The final battle with Helmar boils down to just picking the right option from a menu. Spoiler: it’s the mirror. When you do this you reflect the beam he shoots back at him, killing him and freeing the world and restoring the jewel of light to its rightful place in the universe (I think that’s what happens at least).</p>

<p><img src="/images/adventure/altered/045.png" alt="" />
<em>Error 19, then crash back to the OS</em></p>

<p>For the first time in this series I didn’t actually finish the game myself and take a “THE END” screenshot … because the game crashed after defeating Helmar. Maybe this is an emulation issue, maybe it’s an issue with the game having been cracked by Skid Row and this being a checksum failure or some other protection measure.</p>

<p><img src="/images/adventure/altered/SCR-20240614-fzkn.png" alt="" />
<em>This is a screenshot from a <a href="https://www.youtube.com/watch?v=JG4cvri6Rcs">longplay on YouTube</a> because my game crashed right at the end</em></p>

<p>I technically finished the game and have zero desire to play it again using the MS-DOS version, so I cheated and swiped the last screenshot from a longplay video.</p>

<p>Altered Destiny has some good graphics and sound, but it’s not really adding anything to the experience that other games released at that time were. The story seems a little forced, the inventory puzzles are sort of frustrating and there’s really not much to do.</p>

<p>It’s entirely possible I would have enjoyed the MS-DOS version more (assuming the load times are greatly improved), but Altered Destiny plays like an over-complicated Space Quest clone without any of the humor.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Altered Destiny</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Accolade_(company)">Accolade</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Accolade</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1990</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16668"><em>How Long To Beat?</em></a></td>
      <td>6.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>Amiga via <a href="https://dirkwhoffmann.github.io/vAmiga/">vAmiga</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/altereddestiny.aspx">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>34%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/altered/016.png', thumb: '/images/adventure/altered/016.png' },{ src: '/images/adventure/altered/018.png', thumb: '/images/adventure/altered/018.png' },{ src: '/images/adventure/altered/019.png', thumb: '/images/adventure/altered/019.png' },{ src: '/images/adventure/altered/020.png', thumb: '/images/adventure/altered/020.png' },{ src: '/images/adventure/altered/021.png', thumb: '/images/adventure/altered/021.png' },{ src: '/images/adventure/altered/022.png', thumb: '/images/adventure/altered/022.png' },{ src: '/images/adventure/altered/023.png', thumb: '/images/adventure/altered/023.png' },{ src: '/images/adventure/altered/024.png', thumb: '/images/adventure/altered/024.png' },{ src: '/images/adventure/altered/026.png', thumb: '/images/adventure/altered/026.png' },{ src: '/images/adventure/altered/029.png', thumb: '/images/adventure/altered/029.png' },{ src: '/images/adventure/altered/030.png', thumb: '/images/adventure/altered/030.png' },{ src: '/images/adventure/altered/031.png', thumb: '/images/adventure/altered/031.png' },{ src: '/images/adventure/altered/032.png', thumb: '/images/adventure/altered/032.png' },{ src: '/images/adventure/altered/033.png', thumb: '/images/adventure/altered/033.png' },{ src: '/images/adventure/altered/035.png', thumb: '/images/adventure/altered/035.png' },{ src: '/images/adventure/altered/038.png', thumb: '/images/adventure/altered/038.png' },{ src: '/images/adventure/altered/039.png', thumb: '/images/adventure/altered/039.png' },{ src: '/images/adventure/altered/042.png', thumb: '/images/adventure/altered/042.png' },{ src: '/images/adventure/altered/043.png', thumb: '/images/adventure/altered/043.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/92/altered-destiny/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Accolade" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/altered/015.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/altered/015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Flight of the Amazon Queen (Interactive Binary Illusions) - 1995</title><link href="https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen/" rel="alternate" type="text/html" title="Flight of the Amazon Queen (Interactive Binary Illusions) - 1995" /><published>2024-06-09T07:45:50-04:00</published><updated>2024-06-11T06:27:47-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Flight_of_the_Amazon_Queen">Flight of the Amazon Queen</a> is a graphical point-and-click adventure game by Interactive Binary Illusions, originally released in 1995 for Amiga and MS-DOS.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00024.png" alt="" /></p>

<p>Joe King is the hero of this point and click adventure. His plane is carrying actress Faye Russell when it crash lands in a remote jungle, and he must battle through 100 screens of adventure and puzzle. The game’s feel is influenced by hammy B-movies, and the characters are quite stereotyped and comic. As standard in point and click adventures, a set of icons at the bottom of the screen allow you to interact with visible characters and items in the main view area.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/queen/scummvm-queen-00029.png" alt="" />
<em>I’m shocked they don’t lean into this pun more often throughout the game</em></p>

<p>I’m a huge fan of LucasArts games, and after reading <a href="https://passfieldgames.blogspot.com/2015/05/making-of-flight-of-amazon-queen-20th.html">“Making of Flight of the Amazon Queen - A 20th Anniversary Retrospective”</a> it seems that so was John Passfield. So many aspects of Flight of the Amazon Queen just smack of LucasArts’ influence, and the end result is a game that could easily live alongside classics such as <a href="/blog/2024/04/30/the-secret-of-monkey-island/">The Secret of Monkey Island</a> or Indiana Jones and the Fate of Atlantis.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00032.png" alt="" /></p>

<p>Ron Gilbert and Tim Schafer’s influence on this game runs extremely deep. The comedic writing style, pixel art design, verb selection and dialog tree layout all feel reminiscent of a LucasArts title, and though they didn’t use the SCUMM engine, they’re custom game engine was titled JASPAR (John And Steve’s Programmable Adventure Resource) - which sort of feels like it belongs in that universe of tools with forced acronyms.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00004.png" alt="" />
<em>Adding that “trademark” next to “comedy breasts” just screams of Monkey Island’s influence</em></p>

<p>Once the game starts you’ll find yourself locked in a hotel room that you need to escape. You’re a pilot for hire, and your next client is a famous movie star, but your rival Anderson wants to steal this job from you. To escape the hotel room you’ll need to use the various verbs represented as icons to <code class="language-plaintext highlighter-rouge">LOOK</code>, <code class="language-plaintext highlighter-rouge">PICK UP</code> and <code class="language-plaintext highlighter-rouge">USE</code> various things.</p>

<p>Most of this game involves inventory combination puzzles and fetch quests, so it’s worth examining everything on the screen to see if it’s something you can pick up, move, open/close or use.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00011.png" alt="" /></p>

<p>This game is incredibly well paced, as long as you look at everything and talk to everyone. The path forward or solution to most puzzles is typically intuitive and when you need to combine items Joe will usually point you in the right direction.</p>

<p>When this gets a little more confusing is later in the game where you have a very large number of items - all of which you’ll need to use at some point (and often in combination).</p>

<p><img src="/images/adventure/queen/scummvm-queen-00016.png" alt="" /></p>

<p>The game likes to plant seeds as to the solution to puzzles through story elements. For example there is a brief sequence early in the game where you find a comic book that your mechanic Sparky is looking for. If you read the comic the hero uses alcohol to power is jetpack when it runs out of fuel so he can escape from the baddies just in the nick of time.</p>

<p>Amazingly enough, near the end of the game you find a jetpack - but it doesn’t have any fuel. Trader bob has bottles of alcohol for sale (but you need to prove you’re of age so you need ID to show him).</p>

<p><img src="/images/adventure/queen/scummvm-queen-00018.png" alt="" /></p>

<p>You’ll meet a number of characters throughout the Amazon that you’ll interact with. Most characters only really have one purpose and it’s typically (a) they’re preventing you from progressing or (b) they hold some inventory item you’ll need.</p>

<p>Each character has a limited number of dialog options, so it’s worth asking everyone about everything as it helps advance the plot and lays out what that character needs from you in fairly straightforward language.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00014.png" alt="" /></p>

<p>Trader Bob is the exception as you’ll need to circle back to him multiple times to get new items. I did appreciate that though there are dozens of useable items in this game, none of them appear to be <a href="https://en.wikipedia.org/wiki/Red_herring">red herrings</a>.</p>

<p>If an item will need to be used more than once, it will typically remain in your inventory in a depleted state to indicate it’s still needed. In my opinion this is better than the puzzle design in other games (notably a number of Sierra titles) where you have to backtrack to get an item again to use it as the solution to another puzzle.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00012.png" alt="" /></p>

<p>Instead of the typical “map screen” you’d get in other games to navigate between game areas, Flight of the Amazon Queen has a pinnacle you walk to that overlooks the forest. From here you pan back and forth and can see the various locations you can travel to.</p>

<p>Technically it’s just a different take on the flat 2D map screen, but it’s also incorporated into the endgame as the location you need to launch from once you have the jetpack. Since you can’t travel back to the forest once you reach the Valley of the Mists it felt like a good way to tie the pinnacle you’ve been using for travel throughout the game into your journey towards the final encounter.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00015.png" alt="" /></p>

<p>The game’s tone is extremely light and a little goofy. Joe King just feels and plays like a caricature of Indiana Jones, and they have a lot of fun with this. Every character you interact with doesn’t take themselves too seriously, and the underlying stories they’re presenting are enjoyable and keep you engaged.</p>

<p>I really like imaginary gorilla that pops up a couple of times blocking your path. Just talking to the gorilla and picking one of the dialog options that results in you questioning whether or not he should even exist will cause him to vanish.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00008.png" alt="" /></p>

<p>As the game progresses you’ll be presented with static cut scenes that further advance the plot. It turns out there’s a mad scientist trying to capture Amazonian women so he can test a dino ray on them that turns them into dinosaurs.</p>

<p>I guess he wants to create an army of dino-humans and conquer the world … and you’re the only one that can stop him.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00037.png" alt="" /></p>

<p>It’s kind of bananas that Joe King - a parody of Indiana Jones - needs to retrieve a crystal skull from the depths of the Amazon in order to activate an ancient robot, and over a decade later <a href="https://en.wikipedia.org/wiki/Indiana_Jones_and_the_Kingdom_of_the_Crystal_Skull">Indiana Jones and the Kingdom of the Crystal Skull</a> did something sort of similar (but with aliens instead of ancient robots).</p>

<p>I know there’s almost no chance these two things are related, but in my mind I’m picturing <a href="https://en.wikipedia.org/wiki/David_Koepp">David Koepp</a> (who wrote the screenplay for that movie) walking by his kid playing FOTAQ in 1995 and thinking “that crystal skull looks neat” … then carrying on with his life.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00038.png" alt="" /></p>

<p>If you play the MSDOS CD version of this game you’ll be treated to some fairly good voice acting. This enhances the game experience quite a bit as though there is some looping music in the background, it’s not really notable other than “being there”.</p>

<p><a href="https://www.mobygames.com/person/68041/bradley-lavelle/">Bradley Lavelle</a> who provides Joe’s voice does a fantastic job and really gives the character some depth. His delivery is a little dry and sarcastic, but suits Joe King perfectly.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00043.png" alt="" /></p>

<p>Once you’ve got the crystal skull, Dr. Frank Ironstein will unlock the Valley of the Mists where all the dinosaurs live and you’ll need to get yourself over there for the final battle. This final sequence is pretty short (compared to the rest of the game) and just sees you defeating Monster Frank (the doctor gets zapped with his own dino ray), restoring the veil of mist to the Valley of the Mists and flying off into the sunset with Princess Azura.</p>

<p><img src="/images/adventure/queen/scummvm-queen-demo-00001.png" alt="" />
<em>There’s a hidden mini-game on the CD version where you interview the game developers about the game you just played!</em></p>

<p>Discovering how much you can enjoy a game is the whole reason for a retrospective series like this, and Flight of the Amazon Queen is one such title. The story is immersive, the puzzles are challenging but intuitive, the graphics are great and the writing is entertaining.</p>

<p>This is definitely a game I’d recommend to anyone that may be interested in experiencing what the genre has to offer. It’s even more impressive knowing that only a handful of people worked on this game originally - and if you have the CD version of the game with the “INTERVIE” directory on it, you can play a minigame where you interview the developers of the game about the game you just played!</p>

<p>Flight of the Amazon Queen was re-released as freeware in 2004, and was incorporated into ScummVM as the fifth engine (they currently have <a href="https://wiki.scummvm.org/index.php?title=Engines">A LOT of game engines</a>). You can you can go <a href="https://scummvm.org/games/#games-queen:queen">download and enjoy</a> the game right now!</p>

<p>Historical game preservation and ScummVM specifically are close to my heart so I want to close out this review with the following excerpt from <a href="https://romchip.org/index.php/romchip-journal/article/view/164">“Beyond the Amiga: In Conversation with John Passfield on Flight of the Amazon Queen”</a> as it shines a light on how this all came to be:</p>
<blockquote class="prompt-tip">
  <p>HS: Can you tell us about the involvement of ScummVM in making the game accessible today?</p>

  <p>JP: I was approached from the ScummVM people and they were interested in making a version of Amazon Queen available through their online library of playable adventure games. I was aware at this point that new generation PCs that were coming out were making it harder to play Amazon Queen. And I thought, well, I own the intellectual property, so I made it freeware with the right that you download for free, but you couldn’t sell it. And I retained copyright ownership of the game and that’s when the ScummVM people come in. They reached out and said we’d love to convert Amazon Queen to the ScummVM engine. And I was that’d be great because then it lives on forever. So, they reached out and said can we do it? I said that would be great and a month later it’s available on ScummVM.</p>

  <p>HS: ScummVM does not rely on the emulation of hardware. The ScummVM team uses a different process to make games playable on contemporary computing environments. Can you explain how they do this?</p>

  <p>JP: I actually reached out to ScummVM on their Discord asking them how they went about it. What they explained is ScummVM is basically a framework for graphical programs which work with 2-D, and now 3-D, particularly with OpenGL. So, they provide middleware code which is called the OSystem. Then every game engine is ported to this middleware replacing or hardware dependent things like sound, graphical output, file reading, keyboard mouse input, times, et cetera, with a call to the OSystem. First off, they did this for the LucasArts Scumm engine. For my game they created the “Queen” engine. The Queen engine uses their middleware to interpret the game files for Amazon Queen. It’s completely different pieces of code having nothing in common with Scumm or any of the other four engines they had adapted at the time. Amazon Queen was the fifth engine they made compatible. They said because Amazon Queen had very little assembly, it was mostly C code, they said it was very easy to port over. And I think they’re obviously very smart people. So that’s how it came about and that is how it works. As mentioned, I believe they’ve got support now for the LucasArts games which have 3-D graphics.</p>

  <p>I just love what they’re doing because it just gives that capacity to keep the game playable. It outputs at C++ so it works for everything. When Liron, who did the re-release of Amazon Queen for iOS in 2009, approached me to ask if he could port it into iOS he used the ScummVM Queen engine version and built on top of that engine extra stuff for the iOS version. The way that arrangement worked is that I granted him a licence to sell for iOS and he gave me a royalty. He has also put it on to the PC now. ScummVM just keeps these games accessible, which is great.</p>
</blockquote>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Flight of the Amazon Queen</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Interactive_Binary_Illusions">Interactive Binary Illusions</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Renegade_Software">Renegade Software</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Queen">JASPAR</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/3594"><em>How Long To Beat?</em></a></td>
      <td>8 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS CD via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/flightoftheamazonqueen.aspx">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>16</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>21</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>84%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/queen/scummvm-queen-00001.png', thumb: '/images/adventure/queen/scummvm-queen-00001.png' },{ src: '/images/adventure/queen/scummvm-queen-00000.png', thumb: '/images/adventure/queen/scummvm-queen-00000.png' },{ src: '/images/adventure/queen/scummvm-queen-00003.png', thumb: '/images/adventure/queen/scummvm-queen-00003.png' },{ src: '/images/adventure/queen/scummvm-queen-00005.png', thumb: '/images/adventure/queen/scummvm-queen-00005.png' },{ src: '/images/adventure/queen/scummvm-queen-00006.png', thumb: '/images/adventure/queen/scummvm-queen-00006.png' },{ src: '/images/adventure/queen/scummvm-queen-00007.png', thumb: '/images/adventure/queen/scummvm-queen-00007.png' },{ src: '/images/adventure/queen/scummvm-queen-00009.png', thumb: '/images/adventure/queen/scummvm-queen-00009.png' },{ src: '/images/adventure/queen/scummvm-queen-00010.png', thumb: '/images/adventure/queen/scummvm-queen-00010.png' },{ src: '/images/adventure/queen/scummvm-queen-00013.png', thumb: '/images/adventure/queen/scummvm-queen-00013.png' },{ src: '/images/adventure/queen/scummvm-queen-00016.png', thumb: '/images/adventure/queen/scummvm-queen-00016.png' },{ src: '/images/adventure/queen/scummvm-queen-00017.png', thumb: '/images/adventure/queen/scummvm-queen-00017.png' },{ src: '/images/adventure/queen/scummvm-queen-00019.png', thumb: '/images/adventure/queen/scummvm-queen-00019.png' },{ src: '/images/adventure/queen/scummvm-queen-00020.png', thumb: '/images/adventure/queen/scummvm-queen-00020.png' },{ src: '/images/adventure/queen/scummvm-queen-00021.png', thumb: '/images/adventure/queen/scummvm-queen-00021.png' },{ src: '/images/adventure/queen/scummvm-queen-00022.png', thumb: '/images/adventure/queen/scummvm-queen-00022.png' },{ src: '/images/adventure/queen/scummvm-queen-00023.png', thumb: '/images/adventure/queen/scummvm-queen-00023.png' },{ src: '/images/adventure/queen/scummvm-queen-00025.png', thumb: '/images/adventure/queen/scummvm-queen-00025.png' },{ src: '/images/adventure/queen/scummvm-queen-00026.png', thumb: '/images/adventure/queen/scummvm-queen-00026.png' },{ src: '/images/adventure/queen/scummvm-queen-00027.png', thumb: '/images/adventure/queen/scummvm-queen-00027.png' },{ src: '/images/adventure/queen/scummvm-queen-00028.png', thumb: '/images/adventure/queen/scummvm-queen-00028.png' },{ src: '/images/adventure/queen/scummvm-queen-00030.png', thumb: '/images/adventure/queen/scummvm-queen-00030.png' },{ src: '/images/adventure/queen/scummvm-queen-00031.png', thumb: '/images/adventure/queen/scummvm-queen-00031.png' },{ src: '/images/adventure/queen/scummvm-queen-00033.png', thumb: '/images/adventure/queen/scummvm-queen-00033.png' },{ src: '/images/adventure/queen/scummvm-queen-00034.png', thumb: '/images/adventure/queen/scummvm-queen-00034.png' },{ src: '/images/adventure/queen/scummvm-queen-00035.png', thumb: '/images/adventure/queen/scummvm-queen-00035.png' },{ src: '/images/adventure/queen/scummvm-queen-00036.png', thumb: '/images/adventure/queen/scummvm-queen-00036.png' },{ src: '/images/adventure/queen/scummvm-queen-00039.png', thumb: '/images/adventure/queen/scummvm-queen-00039.png' },{ src: '/images/adventure/queen/scummvm-queen-00040.png', thumb: '/images/adventure/queen/scummvm-queen-00040.png' },{ src: '/images/adventure/queen/scummvm-queen-00041.png', thumb: '/images/adventure/queen/scummvm-queen-00041.png' },{ src: '/images/adventure/queen/scummvm-queen-00042.png', thumb: '/images/adventure/queen/scummvm-queen-00042.png' },{ src: '/images/adventure/queen/scummvm-queen-demo-00000.png', thumb: '/images/adventure/queen/scummvm-queen-demo-00000.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/352/flight-of-the-amazon-queen/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Interactive Binary Illusions" /><category term="Renegade Software" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/queen/scummvm-queen-00002.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/queen/scummvm-queen-00002.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line) - 1991</title><link href="https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/" rel="alternate" type="text/html" title="Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line) - 1991" /><published>2024-06-02T21:01:46-04:00</published><updated>2024-06-11T06:07:45-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Space_Quest_IV">Space Quest IV: Roger Wilco and the Time Rippers</a> is a 1991 graphic adventure game by Sierra On-Line, and the fourth entry in the Space Quest series. The game was released originally on floppy disks on March 4, 1991, and later released on CD-ROM in December 1992 with full speech support; an Atari ST version was announced via Sierra Online’s magazine, Sierra News Magazine, but was later canceled. The game sees players assume the role of Roger Wilco, who is thrust into a new adventure across time and space where he must thwart the plans of an old foe that is seeking revenge against him.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00000.png" alt="" /></p>

<p>Roger Wilco is relaxing at his favorite pub somewhere in time and space when heavily armed soldiers enter the room. Carrying a parting message from Roger’s old nemesis, Sludge Vohaul, they plan to get rid of the janitorial hero, execution style. That is, until a man with an over-sized hair dryer helps Roger escape through a time rip into the future. Now Roger Wilco has woken up on his home planet, some time in a meta-fictional Space Quest XII. It is a grim, dystopian future: the series has gone to ruin without its hero, and Vohaul rules supreme. Roger must find a way to avoid Vohaul’s henchmen, fulfill his destiny, and learn about a few surprises that await him in his own future.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00004.png" alt="" /></p>

<p>Unlike <a href="/blog/2024/02/16/space-quest-iii/">Space Quest III</a> before it, Space Quest IV has discarded the text parser in favour of a true point-and-click interface. This time around you interact with the game world using the (likely far more familiar) verb-based icons to decide how Roger interacts with the game world.</p>

<p>A couple of of these options such as <code class="language-plaintext highlighter-rouge">SMELL</code> and <code class="language-plaintext highlighter-rouge">TASTE</code> really aren’t needed, though selecting them and clicking around allows for the game to spit out some pretty funny feedback about things you really shouldn’t be doing with your surroundings.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00001.png" alt="" /></p>

<p>The Space Quest series has never tried to take itself seriously, and this entry is no exception. The writing and the art style tend to be goofy, and there are a lot of “in jokes” for fans of this series as well as other Sierra Online games.</p>

<p>After the intro cutscene you’re dropped into the future, which the game’s menu bar tells you is <em>Space Quest XII - Vohaul’s Revenge II</em>. As you jump through time you’ll know “when” you are as the game you’ve landed in will be displayed here.</p>

<p>Once you find your way into the sewers a Star Wars parody plays out that informs you that some time in the past someone found an old Leisure Suit Larry game and uploaded it ot the Xenon super computer. This unleashed a virus (that I think contained Sludge Vohaul’s mind or something) that results in humanity being enslaved.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00017.png" alt="" /></p>

<p>Vohaul is sending androids after you called “Sequel Police”, who use time pods to jump through time. You eventually steal one of these, which requires you to enter a 6 digit time code to jump between games … but where do you find these codes?</p>

<p>This wasn’t immediately obvious to me, but in retrospect it sort of makes sense. When you first steal the time pod in SQXII the code onscreen is the return code for SQXII. I just got in and mashed some random codes and hit enter and the game sent me off to the next time period.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00006.png" alt="" />
<em>I wonder if these assets were reused from a Leisure Suite Larry game 🧐</em></p>

<p>You’ll wind up in <em>Space Quest X - Latex Babes of Estros</em>, which is apparently a parody of Infocom’s <a href="https://en.wikipedia.org/wiki/Leather_Goddesses_of_Phobos">Leather Goddesses of Phobos</a> (what are the odds anyone playing this game today would make that connection).</p>

<p>This sequence is pretty short and straightforward and ends with you getting captured by a group of Amazonian women, saving them from a giant sea slug … then the lot of you heading out to the Galaxy Galleria mall to go on a shopping spree.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00008.png" alt="" /></p>

<p>There are some throwbacks to previous games here, including a Monolith Burger location that you can get a job at putting burgers together. You’ll need to do this as you won’t have enough money (buckazoids) to buy the dress and wig you need to pass as one of the Amazons (who’s debit card you happened to pick up).</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00010.png" alt="" /></p>

<p>The arcade sequence is pretty simple as you just add condiments to a burger on an assembly line. If you don’t screw up, you get 1 buckazoid per burger, but if you send 3 burgers to the finish line incorrectly you’ll be fired.</p>

<p>This is not hard - but it’s tedious. The assembly line gradually speeds up so it gets more challenging, but you can adjust the game speed to slow this down as needed.</p>

<p>I appreciate that the game gives you the option before you even begin to just take the money and skip the arcade sequence entirely - while still getting the money you need to progress.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00009.png" alt="" /></p>

<p>As a bit of a meta joke about the game, the puzzle design and the relative difficulty of Sierra games, one of the things you’ll need to buy at the mall is a Space Quest IV hint book. This is actually required to finish the game as there are two codes you’ll need that are only found in the hint book!</p>

<p>Honestly I thought this was pretty clever, and though only a couple of the hints are relevant, the other entries in the book that you reveal (with a magic pen) are typically pretty funny.</p>

<p>If you were a PC gamer in the early 90’s, you may have had one of Sierra’s hint books, so the fact that one of these existed in-game as well as <a href="https://www.sierragamers.com/wp-content/uploads/2019/12/Space_Quest_4_Hint_Book.pdf">being available as a printed hint book</a> was <em>super meta</em>. It’s also funny how the printed hint book contains a clue as to how you need to use the in-game hint book to find partial coordinates for the time pod.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00015.png" alt="" /></p>

<p>Eventually the Sequel Police will find you in SQX, and you’ll steal their time pod and use the code you pieced together from the gum wrapper and the hint book to jump all the way back to Space Quest I (check out <a href="/blog/2021/08/09/space-quest-the-sarien-encounter/">my review of that game</a> if you’re curious).</p>

<p>Once again, make sure you write down the coordinates in the time pod as that’s what you’ll need to return to SQX later!</p>

<p>The SQ1 sequence is real short, but the bikers you meet (who are in black and white) make fun of you for being rendered in all that fancy 256 color glory.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00018.png" alt="" /></p>

<p>You’ll bounce around time periods a couple more times collecting items you’ll need for the final showdown with Vohaul. Like most Sierra games you’ll find yourself picking up anything that isn’t nailed down to try and solve the various in-game puzzles.</p>

<p>Unlike many Sierra games though, there really aren’t that many items to find in this game. If you forget to pick up the bunny, bottle and the slime at the very beginning of the game I’m pretty sure you’ll find yourself in an unwinnable situation, but otherwise you should be able to jump between time periods if you forgot anything.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00021.png" alt="" /></p>

<p>There are plenty of ways for Roger to get himself killed, but unlike the last couple games in the series I didn’t really find there to be all that much variety in the messaging you get prior to a game over.</p>

<p>This doesn’t mean there aren’t <a href="https://www.youtube.com/watch?v=Raa1ZMOLJ3s">some great death sequences</a>, but the majority of the death dialog windows are just a variation of Roger lying on his stomach.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00003.png" alt="" /></p>

<p>To be fair, we all remember the zombie screeching at us and then Roger dying, so it’s not like these were “bad”. My issue was more with the lack of variety compared to previous games.</p>

<p>Honestly I like spending a little extra time per screen to see what interactions result in my untimely demise, but I just didn’t really find the results all that entertaining this time around.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00023.png" alt="" /></p>

<p>The endgame sequence involves hacking into the main computer in Vohaul’s lair (which you use the in-game hint book to do), then deleting some subroutines (like the guard robots). If you happen to delete the SQIV “program”, the game will actually exit.</p>

<p>I thought this was pretty clever, though if you aren’t prepared for it and haven’t saved … well I guess that’s on you 🤣. There’s also a Leisure Suit Larry 4 icon there, which is yet another in joke for Sierra fans as that game never existed (read <a href="https://allowe.com/games/larry/inside-stories/wheres-lsl4.html">Al Lowe’s true story of why the series jumped from LSL3 to LSL5</a>).</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00024.png" alt="" /></p>

<p>The game end’s with you facing off against Sludge Vohaul, who has taken over your son’s body. Oh yeah, you have a son apparently because - you know - time travel and stuff.</p>

<p>This sequence is pretty simple as you just sort of move around and throw each other to the ground, and eventually Vohaul will throw a disk that you need to retrieve an put into the super computer so you can download your son’s consciousness and upload it back to his body to finish the game.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00027.png" alt="" /></p>

<p>As much as I love the Space Quest series, this entry is probably one of my least favourites. Visually it’s impressive, and the writing and voice acting is excellent - but the time travel elements are actually kind of frustrating.</p>

<p>First of all, I couldn’t read the keyboard in the time pod. I found myself using a screenshot that I blew up to like 400% to try and figure out which key corresponded to which symbol to try and enter the time codes. Since you have to backtrack a few times, you need to go through this rigamarole a few times as well and it just seemed excessive as a result.</p>

<p>Next, I didn’t really find the story to be all that interesting. I like time travel and sci-fi stories, but this felt underdeveloped and focusing a bit more on jokes for Sierra fans than plot progression.</p>

<p>Overall it’s not all that bad, but it’s also not really all that memorable.</p>

<p><a href="https://www.youtube.com/@OneShortEye">OneShortEye</a>’s recent video about <a href="https://www.youtube.com/watch?v=db51SipYewo">How Speedrunners Broke Space Quest IV (again)</a> reignited my interest in this game, which ultimately resulted in this playthrough. If you’re into speed running I’d highly recommend his videos as he covers a lot of adventure games. As an aside, my site made a cameo appearance in his <a href="https://youtu.be/dSYnfLwGDRI?si=q0mHmSb9_OtgnUiG&amp;t=377">3 Obscure Easter Eggs in Sanitarium</a>, so might as well plug my <a href="/blog/2021/12/22/sanitarium/">Sanitarium review</a> 😅.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Space Quest IV: Roger Wilco and the Time Rippers</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>March 4, 1991</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows, Macintosh, Amiga, NEC PC-9801</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/8866"><em>How Long To Beat?</em></a></td>
      <td>4.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuredoor.net/walkthroughs/space-quest-iv-roger-wilco-time-rippers-walkthrough/">Walkthrough</a>, <a href="https://www.mocagh.org/sierra/sq4-manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>15</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>53%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/sq4/scummvm-sq4-cd-00005.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00005.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00007.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00007.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00011.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00011.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00012.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00012.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00013.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00013.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00014.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00014.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00016.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00016.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00019.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00019.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00020.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00020.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00022.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00022.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00025.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00025.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00026.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00026.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/143/space-quest-iv-roger-wilco-and-the-time-rippers/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/sq4/scummvm-sq4-cd-00002.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/sq4/scummvm-sq4-cd-00002.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Normality (Gremlin Interactive) - 1996</title><link href="https://www.alexbevi.com/blog/2024/05/27/normality/" rel="alternate" type="text/html" title="Normality (Gremlin Interactive) - 1996" /><published>2024-05-27T09:15:52-04:00</published><updated>2024-05-29T07:02:18-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/27/normality</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/27/normality/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Normality_(video_game)">Normality</a> is a 3D graphic adventure, released in June 1996 by Gremlin Interactive. All cut-scenes in the game are pre-rendered. The game’s engine was later used in the game <a href="https://www.mobygames.com/game/1418/realms-of-the-haunting/">Realms of the Haunting</a>.</p>

<p><img src="/images/adventure/normality/norm_030.png" alt="" /></p>

<p>Kent Knutson is a teenager who lives in the city of Neutropolis. The city is controlled by a totalitarian regime, which prohibits people to express any emotions that would deviate from the prescribed norm - such as joy and happiness. Kent is arrested by the Norms, the police force of Neutropolis, and put in prison for whistling a merry tune. In prison, he received an anonymous note that tells him that there is a resistance group somewhere in the city, which seeks to overthrow the dictator of Neutropolis. The question is - how can Kent find that resistance group?.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/normality/norm_001.png" alt="" /></p>

<p>What sets this game apart from other adventure games of the era is that you’re navigating a 3D world with a first person perspective. This is what you’d expect from Doom or Duke Nukem 3D, but not a point and click title.</p>

<p><img src="/images/adventure/normality/norm_000.gif" alt="" /></p>

<p>For the first time in this series I’m in including an animated GIF just to show this off. As you navigate the game world you move around with the arrow keys and can pan up and down to see above or below you.</p>

<p>The game design incorporates these mechanics pretty frequently as you’ll occasionally find yourself unable to progress because the item you need is behind something, or it’s above you in a narrow space and you need to look up and reposition yourself to interact with something.</p>

<p><img src="/images/adventure/normality/norm_028.png" alt="" />
<em>You need to navigate to the back of the room and look down while moving around the crate to see this mallet</em></p>

<p>Though the game world is presented in 3D, as you move around you also have a cursor you pan over the screen that will highlight things you can interact with. Clicking on an action area will bring up a “voodoo doll” that is basically a visual representation fo the verbs you can use to interact with the thing you’ve highlighted.</p>

<p><img src="/images/adventure/normality/norm_005.png" alt="" /></p>

<p>This is not a unique mechanic and appears in a lot of adventure games at this time (such as <a href="/blog/2023/03/10/full-throttle/">Full Throttle</a>). Once you bring up the voodoo doll (that’s what they call it in the <a href="https://www.starehry.eu/download/adventure/docs/Normality-Manual.pdf">manual</a>), moving the mouse cursor over the various verbs will animate them slightly so you know what you’re about to select.</p>

<p>The options are limited to the usual suspects of <code class="language-plaintext highlighter-rouge">LOOK</code>, <code class="language-plaintext highlighter-rouge">USE</code>, <code class="language-plaintext highlighter-rouge">OPEN</code>, <code class="language-plaintext highlighter-rouge">TALK</code> and <code class="language-plaintext highlighter-rouge">GET</code>.</p>

<p><img src="/images/adventure/normality/norm_014.png" alt="" /></p>

<p>The story progresses through various interactions with NPCs, which involves navigating basic dialog trees. There’s really nothing innovative here, though the US release of the game has Kent voiced by <a href="https://en.wikipedia.org/wiki/Corey_Feldman">Corey Feldman</a> which adds a nice nostalgic flair to the experience.</p>

<p><img src="/images/adventure/normality/norm_013.png" alt="" /></p>

<p>Aside from character interactions, the story also progresses through various pre-rendered cutscenes. These all have a very “90s” feel to them and though dated by today’s standards definitely don’t feel out of place in this game world.</p>

<p>These animated sequences occur pretty often, so the pace of the game is pretty consistently maintained. You’ll find yourself moving around each game scene, hovering the cursor over everything to see what you’re able to interact with, trying all available verbs to see what works then frequently being rewarded with an animation if you picked correctly.</p>

<p><img src="/images/adventure/normality/norm_004.png" alt="" /></p>

<p>A large portion of this game involves fetch quests and item combination puzzles. Maybe this is just an artifact of when this game came out, but I had a lot of trouble making progress without resorting to a walkthrough as a number of puzzles were a bit obtuse.</p>

<p>This could just be due to me being too impatient, but I found myself just randomly clicking each item on every other item more than once to try and make some progress when I’d get stuck.</p>

<p>I’m assuming the developers may have expected players to get stuck as the manual has hints for most of the game’s main areas!</p>

<p><img src="/images/adventure/normality/norm_007.png" alt="" /></p>

<p>You have access to a map (press <code class="language-plaintext highlighter-rouge">M</code> to access it) which opens up various game locations as you progress. If you don’t know about this then once you get out of the apartment you’re imprisoned in initially you won’t be able to progress with the game (yes, I got stuck like that at first).</p>

<p>Typically you’re just jumping between the various locations picking up items you may need to solve puzzles.</p>

<p><img src="/images/adventure/normality/norm_010.png" alt="" /></p>

<p>There aren’t all that many characters to interact with, but they will typically help move you in the right direction by giving plot detail or objectives.</p>

<p>As you progress, the game’s goofy soundtrack is playing in the background which enhances the mood appropriately. This whole game just sort of feels like you’re playing through an episode of a Saturday morning cartoon of that era - which isn’t a bad thing.</p>

<p><img src="/images/adventure/normality/norm_031.png" alt="" /></p>

<p>After solving a bunch of weird puzzles you’ll eventually find yourself underneath the stadium, which is a huge maze. This section can be a bit frustrating as you’ll first need to figure out how to get batteries for the night vision goggles - which involves stumbling around the maze in the dark for a while.</p>

<p>This final sequence just didn’t make a lot of sense, but it is weird and confusing in a way that is fitting to this title. You’ll end up finding Saul’s brain, which you need to bring up on stage in the stadium so that it can somehow change Paul’s thinking and free Neutropolis from his evil reign … or something like that.</p>

<p><img src="/images/adventure/normality/norm_033.png" alt="" /></p>

<p>I honestly had a lot of fun with this game, though it can be frustrating at times. I really appreciated a different approach to this genre through a 3D game world, and the story was definitely swinging for the fences in trying to present a unique experience.</p>

<p>There’s a great writeup by <a href="https://www.filfre.net/2023/01/normality/">The Digital Antiquarian</a> that goes into a lot more detail about this game that I’d highly recommend if you find this interesting.</p>

<p>Since I haven’t covered another title like this yet, and it presented a new take on the genre I think this one is worth checking out.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Normality</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Gremlin_Interactive">Gremlin Interactive</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Interplay_Entertainment">Interplay</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>June 1996</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/6672"><em>How Long To Beat?</em></a></td>
      <td>6 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://dosbox-x.com/">DOSBox-X</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="http://www.thecomputershow.com/computershow/walkthroughs/normalitywalk.htm#intro">Walkthrough 1</a>, <a href="https://gamefaqs.gamespot.com/pc/198211-normality/faqs/1680">Walkthrough 2</a>, <a href="https://www.starehry.eu/download/adventure/docs/Normality-Manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>15</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>14</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>11</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>64%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/normality/norm_000.raw1.png', thumb: '/images/adventure/normality/norm_000.raw1.png' },{ src: '/images/adventure/normality/norm_001.raw1.png', thumb: '/images/adventure/normality/norm_001.raw1.png' },{ src: '/images/adventure/normality/norm_002.png', thumb: '/images/adventure/normality/norm_002.png' },{ src: '/images/adventure/normality/norm_003.png', thumb: '/images/adventure/normality/norm_003.png' },{ src: '/images/adventure/normality/norm_006.png', thumb: '/images/adventure/normality/norm_006.png' },{ src: '/images/adventure/normality/norm_008.png', thumb: '/images/adventure/normality/norm_008.png' },{ src: '/images/adventure/normality/norm_009.png', thumb: '/images/adventure/normality/norm_009.png' },{ src: '/images/adventure/normality/norm_011.png', thumb: '/images/adventure/normality/norm_011.png' },{ src: '/images/adventure/normality/norm_012.png', thumb: '/images/adventure/normality/norm_012.png' },{ src: '/images/adventure/normality/norm_015.png', thumb: '/images/adventure/normality/norm_015.png' },{ src: '/images/adventure/normality/norm_016.png', thumb: '/images/adventure/normality/norm_016.png' },{ src: '/images/adventure/normality/norm_017.png', thumb: '/images/adventure/normality/norm_017.png' },{ src: '/images/adventure/normality/norm_018.png', thumb: '/images/adventure/normality/norm_018.png' },{ src: '/images/adventure/normality/norm_019.png', thumb: '/images/adventure/normality/norm_019.png' },{ src: '/images/adventure/normality/norm_020.png', thumb: '/images/adventure/normality/norm_020.png' },{ src: '/images/adventure/normality/norm_021.png', thumb: '/images/adventure/normality/norm_021.png' },{ src: '/images/adventure/normality/norm_022.png', thumb: '/images/adventure/normality/norm_022.png' },{ src: '/images/adventure/normality/norm_023.png', thumb: '/images/adventure/normality/norm_023.png' },{ src: '/images/adventure/normality/norm_024.png', thumb: '/images/adventure/normality/norm_024.png' },{ src: '/images/adventure/normality/norm_025.png', thumb: '/images/adventure/normality/norm_025.png' },{ src: '/images/adventure/normality/norm_026.png', thumb: '/images/adventure/normality/norm_026.png' },{ src: '/images/adventure/normality/norm_027.png', thumb: '/images/adventure/normality/norm_027.png' },{ src: '/images/adventure/normality/norm_029.png', thumb: '/images/adventure/normality/norm_029.png' },{ src: '/images/adventure/normality/norm_032.png', thumb: '/images/adventure/normality/norm_032.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/1999/normality/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Gremlin Interactive" /><category term="Interplay" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/normality/norm_000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/normality/norm_000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Peeling the MongoDB Drivers Onion</title><link href="https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion/" rel="alternate" type="text/html" title="Peeling the MongoDB Drivers Onion" /><published>2024-05-17T12:45:06-04:00</published><updated>2024-05-21T13:51:32-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion/"><![CDATA[<p>The modern MongoDB driver consists of a number of components, each of which are thoroughly documented in the <a href="https://github.com/mongodb/specifications">Specifications</a> repository. Though this information is readily available and extremely helpful, what it lacks is a high level overview to tie the specs together into a cohesive picture of what a MongoDB driver is.</p>

<p>Architecturally an implicit hierarchy exists within the drivers, so expressing drivers in terms of an <a href="https://en.wikipedia.org/wiki/Onion_model">onion model</a> feels appropriate.</p>

<h2 id="layers-of-the-onion">Layers of the Onion</h2>

<p><img src="/images/drivers-onion.png" alt="" /></p>

<p>The <em>“drivers onion”</em> is meant to represent how various concepts, components and APIs can be layered atop each other to build a MongoDB driver from the ground up, or to help understand how existing drivers have been structured. Hopefully this representation of MongoDB’s drivers helps provide some clarity, as the complexity of these libraries - like the onion above - could otherwise bring you to tears.</p>

<h3 id="serialization">Serialization</h3>

<p>At their lowest level all MongoDB drivers will need to know how to work with <a href="https://bsonspec.org/">BSON</a>. BSON (short for “Binary JSON”) is a bin­ary-en­coded serialization of <a href="https://www.json.org/json-en.html">JSON</a>-like documents, and like JSON, it sup­ports the nesting of arrays and documents. BSON also contains extensions that al­low representation of data types that are not part of the <a href="https://datatracker.ietf.org/doc/html/rfc7159">JSON spec</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://bsonspec.org/spec.html">BSON</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/objectid.rst">ObjectId</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.md">Decimal128</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/uuid.rst">UUID</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/dbref.md">DBRef</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/extended-json.rst">Extended JSON</a></p>
</blockquote>

<h3 id="communication">Communication</h3>

<p>Once BSON documents can be created and manipulated, the foundation for interacting with a MongoDB host process has been laid. Drivers communicate by sending <a href="https://www.mongodb.com/docs/manual/reference/command/">database commands</a> as serialized BSON documents using MongoDB’s <a href="https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/">wire protocol</a>.</p>

<p>From the provided connection string and options a socket connection is established to a host, which an initial handshake verifies is in fact a valid MongoDB connection by sending a simple <a href="https://www.mongodb.com/docs/manual/reference/command/hello/"><code class="language-plaintext highlighter-rouge">hello</code></a>. Based on the response to this first command a driver can continue to establish and authenticate connections.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.md"><code class="language-plaintext highlighter-rouge">OP_MSG</code></a>, <a href="https://github.com/mongodb/specifications/blob/master/source/run-command/run-command.rst">Command Execution</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-string/connection-string-spec.md">Connection String</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/uri-options/uri-options.md">URI Options</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/ocsp-support/ocsp-support.rst">OCSP</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst">Initial Handshake</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/compression/OP_COMPRESSED.md">Wire Compression</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/socks5-support/socks5.rst">SOCKS5</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/initial-dns-seedlist-discovery/initial-dns-seedlist-discovery.md">Initial DNS Seedlist Discovery</a></p>
</blockquote>

<h3 id="connectivity">Connectivity</h3>

<p>Now that a valid host has been found, the cluster’s topology can be discovered and monitoring connections can be established. Connection pools can then be created and populated with connections. The monitoring connections will subsequently be used for ensuring operations are routed to available hosts, or hosts that meet certain criteria (such as a configured <a href="https://www.mongodb.com/docs/upcoming/core/read-preference/">read preference</a> or acceptable latency window).</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst">SDAM</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md">CMAP</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/load-balancers/load-balancers.md">Load Balancer Support</a></p>
</blockquote>

<h3 id="authentication">Authentication</h3>

<p>Establishing and monitoring connections to MongoDB ensures they’re available, but MongoDB server processes typically will require the connection to be <a href="https://www.mongodb.com/docs/manual/core/authentication/">authenticated</a> before commands will be accepted. MongoDB offers many authentication mechanisms such as <a href="https://www.mongodb.com/docs/manual/core/security-scram">SCRAM</a>, <a href="https://www.mongodb.com/docs/manual/core/security-x.509/">x.509</a>, <a href="https://www.mongodb.com/docs/manual/core/kerberos/">Kerberos</a>, <a href="https://www.mongodb.com/docs/manual/core/security-ldap/">LDAP</a>, <a href="https://www.mongodb.com/docs/manual/core/security-oidc/">OpenID Connect</a> and <a href="https://www.mongodb.com/docs/atlas/security/passwordless-authentication/">AWS IAM</a>, which MongoDB drivers support using the <em><a href="https://www.ietf.org/rfc/rfc4422.txt">Simple Authentication and Security Layer</a></em> (SASL) framework.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/auth/auth.md">Authentication</a></p>
</blockquote>

<h3 id="availability">Availability</h3>

<p>All client operations will be serialized as BSON and sent to MongoDB over a connection that will first be checked out of a connection pool. Various monitoring processes exist to ensure a driver’s internal state machine contains an accurate view of the cluster’s topology so that read and write requests can always be appropriately routed according to MongoDB’s <a href="https://www.mongodb.com/docs/manual/core/read-preference-mechanics/">server selection algorithm</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-monitoring.md">Server Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/polling-srv-records-for-mongos-discovery/polling-srv-records-for-mongos-discovery.rst"><code class="language-plaintext highlighter-rouge">SRV</code> Polling for mongos Discovery</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md">Server Selection</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.md">Max Staleness</a></p>
</blockquote>

<h3 id="resilience">Resilience</h3>

<p>At their core, database drivers are client libraries meant to facilitate interactions between an application and the database. MongoDB’s drivers are no different in that regard, as they abstract away the underlying serialization, communication, connectivity, and availability functions required to programmatically interact with your data.</p>

<p>To further enhance the developer experience while working with MongoDB, various resilience features can be added based on <a href="https://www.mongodb.com/docs/manual/reference/server-sessions/">logical sessions</a> such as <a href="https://www.mongodb.com/docs/manual/core/retryable-writes">retryable writes</a>, <a href="https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#std-label-causal-consistency">causal consistency</a>, and <a href="https://www.mongodb.com/docs/manual/core/transactions/">transactions</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> Retryability (<a href="https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md">Reads</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md">Writes</a>), <a href="https://github.com/mongodb/specifications/blob/master/source/client-side-operations-timeout/client-side-operations-timeout.md">CSOT</a>, Consistency (<a href="https://github.com/mongodb/specifications/blob/master/source/sessions/driver-sessions.md">Sessions</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/causal-consistency/causal-consistency.md">Causal Consistency</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/sessions/snapshot-sessions.md">Snapshot Reads</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/transactions/transactions.md">Transactions</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/transactions-convenient-api/transactions-convenient-api.rst">Convenient Transactions API</a>)</p>
</blockquote>

<h3 id="programmability">Programmability</h3>

<p>Now that we can serialize commands and send them over the wire through an authenticated connection we can begin actually manipulating data. Since all database interactions are in the form of commands, if we wanted to remove a single document we might issue a <a href="https://www.mongodb.com/docs/manual/reference/command/delete"><code class="language-plaintext highlighter-rouge">delete</code> command</a> such as the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nf">runCommand</span><span class="p">(</span>
  <span class="p">{</span>
     <span class="na">delete</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span>
     <span class="na">deletes</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">q</span><span class="p">:</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">D</span><span class="dl">"</span> <span class="p">},</span> <span class="na">limit</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">]</span>
  <span class="p">}</span>
<span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though not exceedingly complex, a better developer experience can be achieved through more single-purpose APIs. This would allow the above example to be expressed as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">orders</span><span class="p">.</span><span class="nf">deleteMany</span><span class="p">({</span> <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">D</span><span class="dl">"</span> <span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To provide a cleaner and clearer developer experience, many specifications exist to describe how these APIs should be consistently presented across driver implementations, while still providing the flexibility to make APIs more idiomatic for each language.</p>

<p>Advanced security features such as <a href="https://www.mongodb.com/docs/manual/core/csfle/">client-side field level encryption</a> are also defined at this layer.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> Resource Management (<a href="https://github.com/mongodb/specifications/blob/master/source/enumerate-databases.rst">Databases</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst">Collections</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/index-management/index-management.md">Indexes</a>), Data Management (<a href="https://github.com/mongodb/specifications/blob/master/source/crud/crud.md">CRUD</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/collation/collation.md">Collation</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server_write_commands.rst">Write Commands</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst">Bulk API</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/crud/bulk-write.md">Bulk Write</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst">R/W Concern</a>), Cursors (<a href="https://github.com/mongodb/specifications/blob/master/source/change-streams/change-streams.md">Change Streams</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/find_getmore_killcursors_commands.rst"><code class="language-plaintext highlighter-rouge">find</code>/<code class="language-plaintext highlighter-rouge">getMore</code>/<code class="language-plaintext highlighter-rouge">killCursors</code></a>), <a href="https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.md">GridFS</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/versioned-api/versioned-api.rst">Stable API</a>, Security (<a href="https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md">Client Side Encryption</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/subtype6.md">BSON Binary Subtype 6</a>)</p>
</blockquote>

<h3 id="observability">Observability</h3>

<p>With database commands being serialized and sent to MongoDB servers and responses being received and deserialized, our driver can be considered fully functional for most read and write operations. As MongoDB drivers abstract away most of the complexity involved with creating and maintaining the connections these commands will be sent over, providing mechanisms for introspection into a driver’s functionality can provide developers with added confidence that things are working as expected.</p>

<p>The inner workings of connection pools, connection lifecycle, server monitoring, topology changes, command execution and other driver components are exposed by means of events developers can register listeners to capture. This can be an invaluable troubleshooting tool and can help facilitate monitoring the health of an application.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="p">{</span> <span class="nx">MongoClient</span><span class="p">,</span> <span class="na">BSON</span><span class="p">:</span> <span class="p">{</span> <span class="nx">EJSON</span> <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongodb</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">label</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">EJSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb://localhost:27017</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">monitorCommands</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">commandStarted</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="dl">'</span><span class="s1">commandStarted</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span><span class="p">));</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckedOut</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckedOut</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span><span class="p">));</span>
 <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
 <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">();</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>
<span class="nf">main</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Given the example above (using the <a href="https://www.mongodb.com/docs/drivers/node/current/">Node.js driver</a>) the specified connection events and command events would be logged as they’re emitted by the driver:</p>

<p><code>connectionCheckedOut: {"time":{"$date":"2024-05-17T15:18:18.589Z"},"address":"localhost:27018","name":"connectionCheckedOut","connectionId":1}</code><br />
<code>commandStarted: {"name":"commandStarted","address":"127.0.0.1:27018","connectionId":1,"serviceId":null,"requestId":5,"databaseName":"test","commandName":"find","command":{"find":"foo","filter":{},"limit":1,"singleBatch":true,"batchSize":1,"lsid":{"id":{"$binary":{"base64":"4B1kOPCGRUe/641MKhGT4Q==","subType":"04"}}},"$clusterTime":{"clusterTime":{"$timestamp":{"t":1715959097,"i":1}},"signature":{"hash":{"$binary":"base64":"AAAAAAAAAAAAAAAAAAAAAAAAAAA=","subType":"00"}},"keyId":0}},"$db":"test"},"serverConnectionId":140}</code></p>

<p>The preferred method of observing internal behavior would be through <a href="https://github.com/mongodb/specifications/blob/master/source/logging/logging.md">standardized logging</a> once it is available in all drivers (<a href="https://jira.mongodb.org/browse/DRIVERS-1204">DRIVERS-1204</a>), however until that time only event logging is consistently available. In the future additional observability tooling such as <a href="https://opentelemetry.io/">Open Telemetry</a> support may also be introduced.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/command-logging-and-monitoring/command-logging-and-monitoring.rst">Command Logging and Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-logging-and-monitoring.md">SDAM Logging and Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/logging/logging.md">Standardized Logging</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md#connection-pool-logging">Connection Pool Logging</a></p>
</blockquote>

<h3 id="testability">Testability</h3>

<p>Ensuring existing as well as net-new drivers can be effectively tested for correctness and performance, most specifications define a standard set of tests using <a href="https://web.archive.org/web/20230930061614/https://www.mongodb.com/blog/post/cat-herds-crook-yaml-test-specs-improve-driver-conformance">YAML tests to improve driver conformance</a>. This allows specification authors and maintainers to describe functionality once with the confidence that the tests can be executed alike by language-specific test runners across all drivers.</p>

<p>Though the unified test format greatly simplifies language-specific implementations, not all tests can be represented in this fashion. In those cases the specifications may describe tests to be manually implemented as prose. By limiting the number of prose tests that each driver must implement, engineers can deliver functionality with greater confidence while also minimizing the burden of upstream verification.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/unified-test-format/unified-test-format.md">Unified Test Format</a>, <a href="https://github.com/mongodb/specifications/tree/master/source/atlas-data-lake-testing/tests">Atlas Data Federation Testing</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/benchmarking/benchmarking.md">Performance Benchmarking</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/bson-corpus/bson-corpus.md">BSON Corpus</a>, <a href="https://github.com/mongodb/specifications/tree/master/source/connections-survive-step-down/tests">Replication Event Resilience</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/faas-automated-testing/faas-automated-testing.md">FAAS Automated Testing</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/serverless-testing/README.rst">Atlas Serverless Testing</a></p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<p>Most (if not all) the information required to build a new driver or maintain existing drivers technically exists within the specifications, however without a mental mode of their composition and architecture it can be extremely challenging to know where to look.</p>

<p>Peeling the <em>“drivers onion”</em> should hopefully make reasoning about them a little easier, especially with the understanding that everything can be tested to validate individual implementations are “up to spec”.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[The modern MongoDB driver consists of a number of components, each of which are thoroughly documented in the Specifications repository. Though this information is readily available and extremely helpful, what it lacks is a high level overview to tie the specs together into a cohesive picture of what a MongoDB driver is.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hugo II, Whodunit? (Gray Design Associates) - 1991</title><link href="https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit/" rel="alternate" type="text/html" title="Hugo II, Whodunit? (Gray Design Associates) - 1991" /><published>2024-05-10T06:51:54-04:00</published><updated>2024-05-13T06:35:50-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Hugo_II,_Whodunit%3F">Hugo II, Whodunit?</a> (named Hugo’s Mystery Adventure in the Hugo Trilogy re-release) is a parser-based adventure game designed by independent software developer David P. Gray and published as shareware by Gray Design Associates in 1991. It is the sequel to 1990’s <a href="/blog/2022/12/21/hugos-house-of-horrors/">Hugo’s House of Horrors</a>, and it was followed by Hugo III, Jungle of Doom! in 1992.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00014.png" alt="" /></p>

<p>Hugo and his wife, Penelope, arrive to stay at the mansion that belongs to Hugo’s Great Uncle Horace. Penelope falls asleep in the bedroom, while Hugo accidentally finds a bookcase passage and is locked in a secret room. Penelope wakes up, only to witness Uncle Horace’s murder through the keyhole. The player controls Penelope (and later, briefly, Hugo) and must solve the murder.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00001.png" alt="" /></p>

<p>This title improves slightly on the original as moving the mouse around the screen will occasionally highlight character or object names. This is a cue as to something you should type into the text parser to interact with (ex: <code class="language-plaintext highlighter-rouge">LOOK BOOKCASE</code>).</p>

<p>Once you lie down and Hugo disappears, you’ll gain control of Penelope - who is the main character on this adventure.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00007.png" alt="" /></p>

<p>As you work your way through the Uncle Horace’s property you’ll meet a couple NPCs that you can interact with. These interactions are extremely limited (they’re not dialogue trees) and typically don’t advance the plot - they just serve as puzzles as you typically need them to move so you can progress.</p>

<p>Since I’m playing this game in ScummVM, the original text boxes have been replaced by UI modals - which IMHO look awful. Apparently a “nice to have” on the <a href="https://wiki.scummvm.org/index.php?title=Hugo/TODO">Hugo/TODO</a> page is implementing the original dialog boxes … so maybe one day.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00010.png" alt="" /></p>

<p>In a couple areas you need to navigate the screen using almost pixel-perfect navigation to either keep yourself from dying, or getting into an unwinnable situation.</p>

<p>The venus fly trap screen requires you to walk through a “maze” in order to get a magnifying glass. The hit boxes for these plants are massive though, so you’ll die <em>many times</em> trying to get through this.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00011.png" alt="" /></p>

<p>When you get past the venus fly traps you’ll need to cross a bridge, but if you accidentally touch the “edges” of the walkable area you’ll drop your matches and they’ll get wet.</p>

<p>If this happens, you won’t be able to light a stick of dynamite later in the game.</p>

<p>Luckily this game is very short, so if you happen to get yourself into this situation it’s really only a matter of backtracking about 30 minutes of play time to get yourself to that point from an earlier save.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00013.png" alt="" /></p>

<p>To progress through the mid-portion of the game you need to press various buttons in the shed to trigger certain events. These can’t be done until you first walk all the way to the screen where the event will occur, then walk back and press the button.</p>

<p>For example, you can’t turn on the bug light to attract the bees until you’ve “been there” once.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00009.png" alt="" /></p>

<p>Since you’ll be doing a lot of backtracking it is appreciated that this game has a “Turbo” mode that makes Penelope walk twice as fast.</p>

<p>This is especially helpful when you have to navigate through the hedge maze (oh goody … a maze). Thankfully this isn’t all that big and is easy enough to map out, but given the limited colour palette of this game this section is a little hard on the eyes.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00018.png" alt="" /></p>

<p>The maze exists to hide a couple items you’ll need to collect to proceed - which honestly sums up most of this game. A good portion of the game’s screens contain items that you’ll need to use exactly once to solve a single puzzle.</p>

<p>This is fairly simplistic game design, but I can’t fault David P. Gray as he single handedly wrote a trilogy of games that he even <a href="https://www.facebook.com/notes/759580011285484/">went into technical detail about</a> for anyone that was interested.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00017.png" alt="" /></p>

<p>To add some flavour there are timing-based puzzles as well. For example, if you place and light the dynamite you have a fixed amount of time to get out of the well before it explodes and kills you.</p>

<p>Though there aren’t many game over scenarios, they are possible so it’s worth saving every few screens just so you don’t have to backtrack too far when you mess up.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00015.png" alt="" /></p>

<p>The narrative of this game is a little disjointed, like when you step into a phone booth, call a number you just saw written in graffiti and meet Dr. Who (sort of).</p>

<p>It’s all to give you a screwdriver you can use to open a safe a few screens later, but there’s no rhyme or reason for this encounter.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00021.png" alt="" /></p>

<p>Once you make your way back into the mansion you’ll talk to family members who you’ll get clues from as to what happened to Uncle Horace. Finally you’ll all gather in a room with a police officer who asks you “Whodunit?!?”.</p>

<p>If you guess right (that nobody murdered Horace) you get points, otherwise Cousin Harry gives you a little info and we meet back up with Hugo, who is locked in a closet.</p>

<p>The solution to get out of the closet is fairly straightforward. Once you put the newspaper under the door, poke the key out of the keyhole so it falls and you pull it under the door on the newspaper, you get out and it’s game over.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00022.png" alt="" />
<em>And that’s a wrap</em></p>

<p>Though it improves on the previous entry in the series, Hugo 2 is extremely simplistic. The graphics are simple, the audio is PC speaker beeps and there’s typically no music (aside from a couple of screens).</p>

<p>The game is very straightforward aside from a couple of slightly obtuse puzzles such as rubbing catnip on a bell, then giving the bell to the cat so he’ll ring it and distract the maid while you’re in another room.</p>

<p>Hugo games really feel like they’re a variation of Sierra’s AGI games, but not nearly as robust. For a game written and developed by one guy though, it really isn’t all that bad.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Hugo II, Whodunit?</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td>Gray Design Associates</td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Gray Design Associates</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1991</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Hugo">Hugo</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/28569"><em>How Long To Beat?</em></a></td>
      <td>1.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="http://gamerwalkthroughs.com/hugo-2-whodunit/">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>36%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/hugo2/scummvm-hugo2-00000.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00000.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00002.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00002.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00003.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00003.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00004.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00004.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00005.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00005.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00006.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00006.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00008.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00008.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00012.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00012.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00016.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00016.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00019.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00019.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00020.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00020.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/1158/hugo-ii-whodunit/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Gray Design Associates" /><category term="Hugo" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/hugo2/scummvm-hugo2-0000a.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/hugo2/scummvm-hugo2-0000a.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Do Not Use Mutexes in Finalizers</title><link href="https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers/" rel="alternate" type="text/html" title="Do Not Use Mutexes in Finalizers" /><published>2024-05-09T13:27:41-04:00</published><updated>2024-05-09T14:00:07-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers/"><![CDATA[<blockquote class="prompt-tip">
  <p>Reposted from <a href="https://comandeo.dev/2023/01/01/mutexes-in-finalizers.html">Dmitry’s blog</a>. Canonical URL points to his original post.</p>
</blockquote>

<p>Ruby allows a developer to specify a <em>finalizer</em> proc for an object. This proc is called after an object was destroyed. This is a very useful mechanism that can be used for some cleanup when the object is gone. However, it turned out that there are limitations to what you can do inside finalizers. And these limitations are the same as ones for a signal trap. So, if you write a finalizer, you should follow the <a href="https://github.com/ruby/ruby/blob/master/doc/signals.rdoc">documentation for signal traps</a>.</p>

<p>Some time ago a user opened an issue in our bug tracker. In his logs he noticed an exception raised by the MongoDB Ruby driver:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>`synchronize': can't be called from trap context (ThreadError)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the logs, we could see that the exception was raised when calling synchronize on a mutex inside the finalizer. However, the exception says that synchronize can’t be called from a “trap context”. What is that, and how is it related to our finalizers?</p>

<p>Finalizer is a proc that will be called when a specific object is about to be destroyed by garbage collection. In the MongoDB Ruby driver, we use finalizers to close unused cursors. A cursor is returned in response to a query and can be iterated to retrieve results. Cursors are a very convenient mechanism; however, cursors are server-side objects, and every cursor consumes server memory. Therefore, it is a good idea to let the server know if a cursor is unused so that the resources are released. So, if an object that represents a cursor is destroyed, the cursor is definitely unused and can be closed.</p>

<p>Below is a very simplified example of how this can be done:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Cursor</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">finalize</span><span class="p">(</span><span class="n">cursor_id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="nb">proc</span> <span class="k">do</span>
      <span class="nb">puts</span> <span class="s2">"Killing cursor </span><span class="si">#{</span><span class="n">cursor_id</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">database</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">collection</span><span class="si">}</span><span class="s2">"</span>
      <span class="c1"># Execute command to close cursor</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="c1"># Initialize the cursor</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">define_finalizer</span><span class="p">(</span>
      <span class="nb">self</span><span class="p">,</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">finalize</span><span class="p">(</span><span class="vi">@id</span><span class="p">,</span> <span class="vi">@database</span><span class="p">,</span> <span class="vi">@collection</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can ask Ruby to do the garbage collection by calling <code class="language-plaintext highlighter-rouge">GC.start</code>, so we can test the code.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">)</span> <span class="p">}</span>
<span class="no">GC</span><span class="p">.</span><span class="nf">start</span>

<span class="c1"># =&gt; Killing cursor 258 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 938 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 791 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 705 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 114 on database.collection</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So far so good. Of course, this solution is far from ideal. Here we send a command to the server every time the finalizer is called. First, this will block the main thread. Further, it will issue one command per cursor, which is not ideal. We can also reduce the number of commands we send by killing all cursors for a collection in one command. So, we came up with an idea for the cursor reaper — a background thread that wakes up from time to time and kills unused cursors:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">CursorReaper</span>
  <span class="no">Task</span> <span class="o">=</span> <span class="no">Struct</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:database</span><span class="p">,</span> <span class="ss">:collection</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@tasks</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">schedule</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
      <span class="vi">@tasks</span> <span class="o">&lt;&lt;</span> <span class="no">Task</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">kill_cursors</span>
    <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
      <span class="k">while</span> <span class="n">task</span> <span class="o">=</span> <span class="vi">@tasks</span><span class="p">.</span><span class="nf">pop</span>
        <span class="nb">puts</span> <span class="s2">"Killing cursor </span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">database</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">collection</span><span class="si">}</span><span class="s2">"</span>
        <span class="c1"># Group cursors per collection</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="c1"># Execute commands to close cursors</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Cursor</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">finalize</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="nb">proc</span> <span class="k">do</span>
      <span class="n">reaper</span><span class="p">.</span><span class="nf">schedule</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="c1"># Initialize the cursor</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">define_finalizer</span><span class="p">(</span>
      <span class="nb">self</span><span class="p">,</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">finalize</span><span class="p">(</span><span class="vi">@id</span><span class="p">,</span> <span class="vi">@database</span><span class="p">,</span> <span class="vi">@collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that there is a mutex in the CursorReaper class. The kill_cursors method of the reaper will be called in a background thread, hence the locking. Let’s test it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="n">reaper</span> <span class="o">=</span> <span class="no">CursorReaper</span><span class="p">.</span><span class="nf">new</span>
<span class="n">reaper_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">reaper</span><span class="p">.</span><span class="nf">kill_cursors</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span> <span class="p">}</span>
<span class="no">GC</span><span class="p">.</span><span class="nf">start</span>
<span class="n">reaper_thread</span><span class="p">.</span><span class="nf">join</span>

<span class="c1"># =&gt; Killing cursor 205 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 847 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 284 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 609 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 485 on database.collection</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Still, no error, even though the latter example calls synchronize inside the finalizer. What is the difference between the example and the real-world situation? In the example, we trigger garbage collection manually. Normally this is triggered by Ruby itself. What if we create so many objects that Ruby actually starts the GC?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="n">reaper</span> <span class="o">=</span> <span class="no">CursorReaper</span><span class="p">.</span><span class="nf">new</span>
<span class="n">reaper_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">reaper</span><span class="p">.</span><span class="nf">kill_cursors</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">populator_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="mi">5000</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span> <span class="p">}</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="p">[</span><span class="n">reaper_thread</span><span class="p">,</span> <span class="n">populator_thread</span><span class="p">].</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yes, this code actually reproduces the problem, and the exception is raised! So, it looks like finalizers are executed inside a signal trap. Therefore, to fix the problem we should just <a href="https://github.com/ruby/ruby/blob/master/doc/signals.rdoc">follow the documentation</a> and not use operations that are not allowed inside the traps. In our case with the cursor reaper, we got rid of mutexes in finalizers by using a queue data structure, and the bug was fixed.</p>

<h2 id="we-need-to-go-deeper">We Need to Go Deeper</h2>

<p>Even though the problem was gone, I decided to find out whether finalizers are really executed inside a signal trap. I though maybe Ruby VM uses signals internally to trigger garbage collection. I could not find any mentions about such a usage of signals, so I had to read Ruby source code. It tuned out to be fun, and the outcome was very unexpected!</p>

<p>I started by finding where the error <em>“can’t be called from trap context”</em> is raised. I found it in <code class="language-plaintext highlighter-rouge">do_mutex_lock</code> function inside <code class="language-plaintext highlighter-rouge">thread_sync.c</code> file:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/* When running trap handler */</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">FL_TEST_RAW</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">MUTEX_ALLOW_TRAP</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
  <span class="n">th</span><span class="o">-&gt;</span><span class="n">ec</span><span class="o">-&gt;</span><span class="n">interrupt_mask</span> <span class="o">&amp;</span> <span class="n">TRAP_INTERRUPT_MASK</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eThreadError</span><span class="p">,</span> <span class="s">"can't be called from trap context"</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So, what is actually verified is whether the execution context has a <code class="language-plaintext highlighter-rouge">TRAP_INTERRUPT_MASK</code> flag set. This flag is set in three functions: <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> in <code class="language-plaintext highlighter-rouge">vm_trace.c</code>, <code class="language-plaintext highlighter-rouge">rb_threadptr_execute_interrupts</code> in <code class="language-plaintext highlighter-rouge">thread.c</code>, and <code class="language-plaintext highlighter-rouge">signal_exec</code> in <code class="language-plaintext highlighter-rouge">signal.c</code>. After some debugging, I found out that in our case the flag is set in the <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> function. Actually, this is also confirmed by this comment for the <code class="language-plaintext highlighter-rouge">rb_gc</code> function in <code class="language-plaintext highlighter-rouge">gc.h</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>* Finalisers are deferred until we can handle interrupts. See * `rb_postponed_job_flush` in vm_trace.c.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Alright, now it is more or less clear what is going on. Finalizers are not executed immediately after an object is “garbage collected”. Instead, a postponed job is created and scheduled. Such jobs are executed in the <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> function. This function sets the <code class="language-plaintext highlighter-rouge">TRAP_INTERRUPT_MASK</code> flag, which is later checked by <code class="language-plaintext highlighter-rouge">do_mutex_lock</code>. Hence the error. I even found <a href="https://github.com/ruby/ruby/commit/05459d1a33db59c47e98e327c9f52808ebc76a3f">the commit</a> that introduces the current behavior, and <a href="https://bugs.ruby-lang.org/issues/10595">a bug</a> that was fixed by this commit. It looks like the Ruby team wanted to make sure that finalizers are never interrupted by a signal; as a side effect, code inside finalizers is treated as code inside a signal trap.</p>

<p><em>To summarize, finalizers are <strong>not</strong> executed inside a signal trap; however, Ruby applies the same restrictions to signal traps and finalizers. This is not documented anywhere; further, the exception raised is a bit misleading. Be careful!</em></p>

<p>P.S. It is still unclear why we did not see the exception when we trigger the garbage collection manually. I wasn’t able to find the answer; maybe this is a topic for my next article.</p>]]></content><author><name>Dmitry Rybakov</name></author><category term="Programming" /><category term="ruby" /><summary type="html"><![CDATA[Reposted from Dmitry’s blog. Canonical URL points to his original post.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Secret of Monkey Island (Lucasfilm Games) - 1990</title><link href="https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island/" rel="alternate" type="text/html" title="The Secret of Monkey Island (Lucasfilm Games) - 1990" /><published>2024-04-30T05:03:32-04:00</published><updated>2024-05-07T07:04:43-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/The_Secret_of_Monkey_Island">The Secret of Monkey Island</a> is a 1990 point-and-click graphic adventure game developed and published by Lucasfilm Games.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00001.png" alt="" /></p>

<p>Deep in the Caribbean lies Melee Island, ruled by the governor Elaine Marley. The cruel pirate LeChuck is deeply in love with her - so deeply that he refuses to accept his own death. As a ghost, he dwells with his undead crew somewhere near the mysterious Monkey Island. Meanwhile, a young fellow named Guybrush Threepwood is determined to become a real pirate. At the Scumm Bar, he meets three pirates who tell him he has to complete three difficult tasks in order to be worthy of this title. But as Guybrush is trying to complete these tasks, he encounters the lovely governor, and this meeting changes his life forever. Risking to incur the wrath of LeChuck, Guybrush has to prove his wit is as sharp as his sword, and figure out a way to foil the ghost pirate’s plans.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00007.png" alt="" /></p>

<p>Without pulling any punches I might as well just start off with the fact that this is possibly one of the best adventure games of all time. From the <a href="https://www.youtube.com/watch?v=Pdd2CNlcqn0">amazing soundtrack</a> and excellent pixel art to the captivating story and the extremely forgiving game play, Secret of Monkey Island is extremely welcoming to anyone looking to get started with this genre of game.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00031.png" alt="" /></p>

<p>Being an early SCUMM game you’re presented with a very familiar screen layout with the main view on top, a verb list in the lower left and inventory in the lower right. Moving the mouse cursor around the screen will call out any action areas you can interact with, and based on which verb is selected, you can perform said action on whatever you just clicked on.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00012.png" alt="" /></p>

<p>As you progress on your quest to become a mighty pirate, you’ll find yourself picking up a lot of items. As a result, most puzzles in this game involve either completing fetch quests, or item combination puzzles.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00014.png" alt="" /></p>

<p>The game typically points you in the right direction as to what you need to do next, which item you need or how things need to be combined so though it can be challenging at times, I never found the game to get frustrating.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00006.png" alt="" /></p>

<p>Most characters in the game can be engaged with, opening up a conversation system with branching dialogue options. There are typically a number of nonsense options in each conversation that will are just a distraction, but the writing in this game is so good (and funny) that it’s almost worth exploring these even if you know you’re picking the “wrong” option.</p>

<p>Graphically this game is top notch, as can be seen in character portraits and background artwork. As a result you’re typically not just sweeping your cursor around the screen hoping to find some magic pixel to interact with - the detail of the backgrounds make whatever thing you’re supposed to interact with pretty apparent.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00019.png" alt="" /></p>

<p>The Secret of Monkey Island introduces a unique battle mechanic, which is actually weirdly intuitive and easy to learn. One of the quests you need to embark on is to defeat the legendary swordmaster, but to do this you’ll need to build up a repertoire of insults.</p>

<p>“Battles” consist of you hurling an insult, and the other pirate either having a witty comeback or a generic comment (ex: “I am rubber you are glue”). If they have a comeback, they win a round and can insult you, and you need to “defend” with a comeback. If a pirate uses an insult in battle you haven’t learned, it’s added to your list of insults for future battles - as are the comebacks pirates have used.</p>

<p>If you match a comeback to an insult, you’ll win a round, and if you win 3 or 4 rounds you win the fight.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00021.png" alt="" /></p>

<p>Eventually you’ll build up enough insults to challenge (and hopefully defeat) the legendary swordmaster. This is actually pretty interesting as she’ll lob insults you’ve never heard before but you can still successfully parry with comebacks you’ve already learned - assuming you pick the right ones.</p>

<p>This is just another example of how well this game is written, as so much care was put into crafting this battle system that they wrote multiple insults that would make sense (and sort of be funny) with the same comebacks.</p>

<p>I personally loved this game mechanic and am impressed it wasn’t overplayed. They really only use it in the lead up to the swordmaster fight - then never again. With such a unique element to the game it may have been tempting to overplay it, but you gotta give the designers credit for fighting that urge and making a really well balanced game.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00022.png" alt="" /></p>

<p>The game is split into three main chapters, two of which take place on islands you can navigate from an overhead map view. This makes each area feel a lot bigger than it actually is, as there are typically a handful of actual locations to visit.</p>

<p>These locations are called out as you move your cursor over them, and clicking on them will make Guybrush walk there. In chapter 3 you eventually get access to a boat, which moves extremely slowly, but if you double click an area of the screen that’s further away from you he paddles quickly and the boat moves a lot faster.</p>

<p>I appreciated this type of optimization in the game as it can be tedious waiting for the character to slowly progress on the map just to give an area a false sense of scale.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00030.png" alt="" /></p>

<p>As the story progresses you’ll prove yourself to be a mighty pirate, meet the governor, fall for her and then have to go rescue her once the Ghost Pirate LeChuck kidnaps her. This is done by recruiting a crew and buying a boat, but once you do this crew sort of abandons you to instead soak up some rays on the deck.</p>

<p>The bulk of this second chapter consists of you completing a massive item combination puzzle as the directions to Monkey Island are presented to you in the form of a recipe.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00032.png" alt="" /></p>

<p>Everything you’ll need to get to the island are on the ship, so this giant fetch quest just involves searching the ship, picking up items, referring to the recipe (once you find it) to see what should get thrown in the pot - then throwing it in the pot.</p>

<p>Once the recipe is complete everyone on the ship falls asleep and you wake up off the shore of Monkey Island. How convenient!</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00036.png" alt="" /></p>

<p>Once you find Monkey Island you’ll need to get yourself there, but you don’t seem to have a rowboat. Good thing you learning how to fire yourself out of a cannon earlier in the game.</p>

<p>To me at least this was an example of good puzzle design, as you’d already learned how cannons could be used, and you happen to have a long piece of rope, embers from a fire, gunpowder and a pot you can use as a helmet …</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00037.png" alt="" /></p>

<p>There are only a few characters to meet on the island once you get there, but they drop some hints as to where LeChuck is and what they need from you. After embarking on another series of fetch quests, you’ll eventually get the key to enter the underground where LeChuck’s ghost ship is anchored.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00042.png" alt="" /></p>

<p>From the ghost ship you retrieve the root and give it back to the cannibals so they can make you som root beer you can use to get rid of ghosts. When you bring the root back, the cannibals prepare the root beer, you return to the ghost ship and find out you just missed them.</p>

<p>LeChunk has taken Governor Marley back to Melee Island to marry her. Instead of having to manually backtrack, your crew appears at this point and after a brief cutscene you automatically return to Melee Island with them.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00044.png" alt="" /></p>

<p>The final showdown with Lechuck is pretty easy, though you need to move quickly or he’ll punch you off screen and delay the fight. It’s kind of funny that you make it this far with the magic root beer, you go to use it on LeChuck and it gets jammed on some pocket lint.</p>

<p>Eventually you’ll grab a can of grog, spray LeChuck with it and the game will be over.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00045.png" alt="" />
<em>The End</em></p>

<p>I basically loved everything about this game. The writing was fantastic, the story was compelling, the puzzles were challenging but intuitive, the music was great, it’s visually appealing and the dialogue was engaging. If you’re already a fan of this game, I’d encourage you to go read the Video Game History Foundation’s <a href="https://gamehistory.org/monkeyisland/">30th anniversary of Monkey Island</a> article as it contains lots of development details and insights.</p>

<p>There are 2 sequels to this game that I plan on playing for this series, and I am really looking forward to getting to those. I know there’s a fourth game, but <a href="https://en.wikipedia.org/wiki/Escape_from_Monkey_Island">Escape from Monkey Island</a> came out in 2000 so is just outside the range I set - though I might circle back to it one day just for fun.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00047.png" alt="" />
<em>The only game over in this game</em></p>

<p>Though this is a LucasArts game, there is exactly one game over screen in The Secret of Monkey Island, and it’s a bit of an easter egg. Right from the beginning of the game Guybrush mentions his talent is holding his breath for 10 minutes - which is something you’ll leverage at one point when you’re thrown in the ocean to drown.</p>

<p>You can easily just walk out of the water and escape certain death, but if you just let the game idle for more than 10 minutes, Guybrush will die. Unlike Sierra games of this era, instead of prompting you with a game over screen, the verb list changes to represent your new set of options.</p>

<p>This is just another example of the clever game design, excellent writing and underlying humor that permeates this title through and through. I would highly recommend this game to anyone - whether they’re a fan of the genre or not.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>The Secret of Monkey Island</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/LucasArts">Lucasfilm Games</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Lucasfilm Games</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>October 1990</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, Atari ST, CDTV, DOS, FM Towns, Mac OS, Sega CD</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCUMM">SCUMM</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/10162"><em>How Long To Beat?</em></a></td>
      <td>6.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/the-secret-of-monkey-island">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>18</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>23</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>87%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/mi1/scummvm-monkey-00002.png', thumb: '/images/adventure/mi1/scummvm-monkey-00002.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00003.png', thumb: '/images/adventure/mi1/scummvm-monkey-00003.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00004.png', thumb: '/images/adventure/mi1/scummvm-monkey-00004.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00005.png', thumb: '/images/adventure/mi1/scummvm-monkey-00005.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00008.png', thumb: '/images/adventure/mi1/scummvm-monkey-00008.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00009.png', thumb: '/images/adventure/mi1/scummvm-monkey-00009.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00010.png', thumb: '/images/adventure/mi1/scummvm-monkey-00010.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00011.png', thumb: '/images/adventure/mi1/scummvm-monkey-00011.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00013.png', thumb: '/images/adventure/mi1/scummvm-monkey-00013.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00015.png', thumb: '/images/adventure/mi1/scummvm-monkey-00015.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00016.png', thumb: '/images/adventure/mi1/scummvm-monkey-00016.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00017.png', thumb: '/images/adventure/mi1/scummvm-monkey-00017.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00018.png', thumb: '/images/adventure/mi1/scummvm-monkey-00018.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00020.png', thumb: '/images/adventure/mi1/scummvm-monkey-00020.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00023.png', thumb: '/images/adventure/mi1/scummvm-monkey-00023.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00024.png', thumb: '/images/adventure/mi1/scummvm-monkey-00024.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00025.png', thumb: '/images/adventure/mi1/scummvm-monkey-00025.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00026.png', thumb: '/images/adventure/mi1/scummvm-monkey-00026.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00027.png', thumb: '/images/adventure/mi1/scummvm-monkey-00027.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00028.png', thumb: '/images/adventure/mi1/scummvm-monkey-00028.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00033.png', thumb: '/images/adventure/mi1/scummvm-monkey-00033.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00034.png', thumb: '/images/adventure/mi1/scummvm-monkey-00034.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00035.png', thumb: '/images/adventure/mi1/scummvm-monkey-00035.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00038.png', thumb: '/images/adventure/mi1/scummvm-monkey-00038.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00039.png', thumb: '/images/adventure/mi1/scummvm-monkey-00039.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00040.png', thumb: '/images/adventure/mi1/scummvm-monkey-00040.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00041.png', thumb: '/images/adventure/mi1/scummvm-monkey-00041.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00043.png', thumb: '/images/adventure/mi1/scummvm-monkey-00043.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00046.png', thumb: '/images/adventure/mi1/scummvm-monkey-00046.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/616/the-secret-of-monkey-island/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Lucasfilm Games" /><category term="SCUMM" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/mi1/scummvm-monkey-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/mi1/scummvm-monkey-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Event Monitoring with Mongoose</title><link href="https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose/" rel="alternate" type="text/html" title="Event Monitoring with Mongoose" /><published>2024-04-26T09:58:52-04:00</published><updated>2024-04-26T10:47:18-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose/"><![CDATA[<p>I previously wrote about <a href="/blog/2022/05/15/mongodb-driver-monitoring/">MongoDB Driver Monitoring</a>, but there are <a href="/blog/2022/11/02/mongodb-orms-odms-and-libraries/">ODM libraries</a> and framework integrations that are built atop the drivers that can take advantage of this functionality.</p>

<p>For example, <a href="https://mongoosejs.com/docs/guide.html"><code class="language-plaintext highlighter-rouge">mongoose</code></a> can be easily configured to expose <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/cluster-monitoring/">cluster monitoring</a>, <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/connection-monitoring/">connection pool monitoring</a> and <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/command-monitoring/">command monitoring</a> capabilities.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">Schema</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">;</span>

<span class="nf">run</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongodb://localhost:27017/test</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nf">getClient</span><span class="p">().</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckOutStarted</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Received: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">ev</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nc">Schema</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nb">String</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">Test</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test</span><span class="dl">'</span><span class="p">,</span> <span class="nx">schema</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span> <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This was documented within a comment of <a href="https://github.com/Automattic/mongoose/issues/9804">this GitHub issue</a> but for the sake of visibility I wanted to capture it here.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="connections" /><category term="drivers" /><category term="monitoring" /><category term="mongoose" /><category term="node.js" /><summary type="html"><![CDATA[I previously wrote about MongoDB Driver Monitoring, but there are ODM libraries and framework integrations that are built atop the drivers that can take advantage of this functionality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>