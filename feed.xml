<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.alexbevi.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.alexbevi.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-09-12T09:32:57-04:00</updated><id>https://www.alexbevi.com/feed.xml</id><title type="html">ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle><entry><title type="html">Why Cloudflare Workers Don’t Work With MongoDB</title><link href="https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb/" rel="alternate" type="text/html" title="Why Cloudflare Workers Don’t Work With MongoDB" /><published>2024-09-11T13:09:40-04:00</published><updated>2024-09-12T09:32:11-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb/"><![CDATA[<p>Cloudflare Workers have never supported raw sockets, but in May of 2023 they <a href="https://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/">announced support for a <code class="language-plaintext highlighter-rouge">connect()</code> API</a>. The <code class="language-plaintext highlighter-rouge">connect()</code> API allows <a href="https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/">TCP Sockets</a> to be created within Workers, but is not a direct replacement for Node.js’ <a href="https://nodejs.org/api/net.html#class-netsocket"><code class="language-plaintext highlighter-rouge">net.Socket</code></a> API.</p>

<p>As MongoDB’s <a href="https://www.mongodb.com/docs/drivers/node/current/">Node.js driver</a> relies on <code class="language-plaintext highlighter-rouge">net.Socket</code> as well as <a href="https://nodejs.org/api/tls.html#class-tlstlssocket"><code class="language-plaintext highlighter-rouge">tls.TLSSocket</code></a>, using the driver directly from Cloudflare Workers <a href="https://www.mongodb.com/community/forums/t/cloudflare-workers-integration-is-now-possible/226708/11?u=alexbevi">has not been possible</a>.</p>

<p>Cloudflare recently announced that <a href="https://blog.cloudflare.com/more-npm-packages-on-cloudflare-workers-combining-polyfills-and-native-code/">more NPM packages would be supported on Cloudflare Workers</a>, but for libraries that need <code class="language-plaintext highlighter-rouge">net.Socket</code> or <code class="language-plaintext highlighter-rouge">tls.TLSocket</code> access has Cloudflare added enough?</p>

<blockquote>
  <p>Packages that could not be imported with <code class="language-plaintext highlighter-rouge">nodejs_compat</code>, even as a dependency of another package, will now load. This includes popular packages such as […] <strong><code class="language-plaintext highlighter-rouge">mongodb</code></strong>, […] and many more.</p>
</blockquote>

<p>Based on the blog post the Node.js driver should load, but can it be used?</p>

<h2 id="sample-application">Sample Application</h2>

<p>To test the latest iteration of Cloudflare Workers <a href="https://developers.cloudflare.com/workers/configuration/compatibility-dates/#setting-compatibility-flags">compatibility flags</a> we’ll be working with the following configuration:</p>

<p><strong><code class="language-plaintext highlighter-rouge">src/worker.ts</code></strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">BSON</span><span class="p">,</span> <span class="nx">MongoClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongodb</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Env</span> <span class="p">{</span>
  <span class="nl">MONGODB_URI</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">client</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">requestCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="k">async</span> <span class="nf">fetch</span><span class="p">(</span><span class="na">request</span><span class="p">:</span> <span class="nx">Request</span><span class="p">,</span> <span class="na">env</span><span class="p">:</span> <span class="nx">Env</span><span class="p">,</span> <span class="na">_ctx</span><span class="p">:</span> <span class="nx">ExecutionContext</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span> <span class="nx">requestCount</span> <span class="p">}));</span>
    <span class="nx">requestCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">client</span> <span class="o">??=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URI</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">maxPoolSize</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">minPoolSize</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="na">serverSelectionTimeoutMS</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">if </span><span class="p">((</span><span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">countDocuments</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">drop</span><span class="p">().</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="kc">null</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">BSON</span><span class="p">.</span><span class="nx">EJSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}),</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">  </span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">relaxed</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
  <span class="p">},</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">package.json</code></strong></p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mongodb-cloudflare-example"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"wrangler dev"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@cloudflare/workers-types"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.20240603.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ts-node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^10.9.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.0.4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"wrangler"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.59.0"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"mongodb"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.8.1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wrangler.toml</code></strong></p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="py">name</span> <span class="p">=</span> <span class="s">"mongodb-cloudflare-example"</span>
<span class="py">main</span> <span class="p">=</span> <span class="s">"src/worker.ts"</span>
<span class="py">compatibility_flags</span> <span class="p">=</span> <span class="p">[</span><span class="s">"nodejs_compat_v2"</span><span class="p">]</span>

<span class="nn">[vars]</span>
<span class="py">MONGODB_URI</span> <span class="p">=</span> <span class="s">"mongodb+srv://..."</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To test the code above you would need to do the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install
</span>npm run start
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="evaluation">Evaluation</h2>

<p>The default connection string format when <a href="https://www.mongodb.com/docs/atlas/connect-to-database-deployment/#connect-to-your-cloud-cluster">connecting to your Atlas cluster</a> is <code class="language-plaintext highlighter-rouge">mongodb+srv</code>, which is what we included initially in the <code class="language-plaintext highlighter-rouge">wrangler.toml</code> file.</p>

<p>The first time we run our test code however we’re unable to resolve the <a href="https://www.mongodb.com/docs/manual/reference/connection-string/#srv-connection-format">SRV connection format</a> as it appears that <a href="https://nodejs.org/api/dns.html#dnsresolvetxthostname-callback"><code class="language-plaintext highlighter-rouge">dns.resolveTxt</code></a> is not implemented:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] Error: [unenv] dns.resolveTxt is not implemented yet!
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Since Atlas allows you to also connect using the <a href="https://www.mongodb.com/docs/manual/reference/connection-string/#standard-connection-string-format">standard connection string format</a>, let’s update the <code class="language-plaintext highlighter-rouge">MONGODB_URI</code> in the <code class="language-plaintext highlighter-rouge">wrangler.toml</code> to instead be <code class="language-plaintext highlighter-rouge">mongodb://...</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] MongoServerSelectionError: socket.once is not a function
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Based on the above it appears <a href="https://nodejs.org/api/events.html#eventsonceemitter-name-options"><code class="language-plaintext highlighter-rouge">events.once</code></a> is missing, which Node.js’ <code class="language-plaintext highlighter-rouge">net</code> module exposes from an <code class="language-plaintext highlighter-rouge">EventEmitter</code> import. I don’t think we’d be able to polyfill all this if that were considered the path forward 😓.</p>

<p>What about trying to configure <code class="language-plaintext highlighter-rouge">wrangler</code> to connect to a local MongoDB instance (ex: <code class="language-plaintext highlighter-rouge">mongodb://localhost:27017</code>)? Well in that case it will still fail, but at least it will fail differently:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] MongoServerSelectionError: [unenv] net.createConnection is not implemented yet!
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="alternatives">Alternatives?</h2>

<p>If you happen upon the article called <a href="https://www.mongodb.com/developer/products/atlas/cloudflare-worker-rest-api/">“Create a REST API with Cloudflare Workers and MongoDB Atlas”</a> you may be thinking there’s an alternate solution to be explored. MongoDB offered a REST-based interface to your data in Atlas via the <a href="https://www.mongodb.com/docs/atlas/app-services/data-api/">Atlas Data API</a>, however this product was recently deprecated and will be sunset.</p>

<p>A custom REST-based API would be a solution to working with your MongoDB data from within Cloudflare Workers, so until the runtime is updated to better support Node.js’ socket APIs, see the <a href="https://www.mongodb.com/docs/atlas/app-services/data-api/data-api-deprecation">Data API deprecation</a> page for some ideas.</p>

<p><a href="https://docs.neurelo.com/guides/mongodb-atlas-migrate-rest-data-apis-to-neurelo">Neurelo seems like a good option</a> for getting a REST-based API off the ground with little effort.</p>

<h2 id="summary">Summary</h2>

<blockquote class="prompt-info">
  <p>Note that the fact that Workers can load, but not use the <code class="language-plaintext highlighter-rouge">mongodb</code> package was reported to Cloudflare at <a href="https://github.com/cloudflare/workers-sdk/issues/6684">https://github.com/cloudflare/workers-sdk/issues/6684</a></p>
</blockquote>

<p>Though <a href="https://developers.cloudflare.com/workers/wrangler/configuration/#module-aliasing">module aliasing</a> and polyfills might be an option for some functionality, it really seems like Cloudflare Workers just aren’t meant to work with Node.js’ socket APIs. As a result, libraries such as MongoDB’s Node.js driver simply won’t be able to connect to anything.</p>

<p>Some work <a href="https://jira.mongodb.org/browse/NODE-4785">was proposed</a> by MongoDB’s team to allow a custom transport layer to be provided, however this would still require Cloudflare Workers to support Node.js’ <a href="https://nodejs.org/api/tls.html">TLS</a> API as <a href="https://www.mongodb.com/docs/atlas/reference/faq/security/#can-i-disable-tls-on-my-deployment-">TLS cannot, for good reasons, be disabled for Atlas deployments</a>.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><category term="node" /><category term="nodejs" /><category term="javascript" /><category term="typescript" /><summary type="html"><![CDATA[Cloudflare Workers have never supported raw sockets, but in May of 2023 they announced support for a connect() API. The connect() API allows TCP Sockets to be created within Workers, but is not a direct replacement for Node.js’ net.Socket API.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-cloudflare.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-cloudflare.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Space Quest V: Roger Wilco – The Next Mutation (Dynamix) - 1993</title><link href="https://www.alexbevi.com/blog/2024/09/10/space-quest-v/" rel="alternate" type="text/html" title="Space Quest V: Roger Wilco – The Next Mutation (Dynamix) - 1993" /><published>2024-09-10T06:20:32-04:00</published><updated>2024-09-10T09:15:59-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/10/space-quest-v</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/10/space-quest-v/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<blockquote class="prompt-tip">
  <p>This is the first game that I’m reviewing since I <a href="/blog/2024/08/22/overhauling-my-scoring-criteria/">overhauled my scoring criteria</a> in August of 2024</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Space_Quest_V">Space Quest V: Roger Wilco – The Next Mutation</a> is a graphic adventure game, created by Dynamix, and released by Sierra On-Line for MS-DOS on February 5, 1993. The game is the fifth entry in the Space Quest series, and the first game to be only designed by Mark Crowe. The story, set within a spoof of the Star Trek franchise, focuses on players taking control of Roger Wilco, who achieves his dreams of becoming a star captain but winds up involved in saving the galaxy from a deadly threat posed by a man-made virus.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00012.png" alt="" /></p>

<p>After traveling back and forth through time in the previous game, Roger Wilco is back in the Starfleet Academy, serving as both a cadet and a janitor. Cheating his way through the Starfleet Aptitude Test, Roger is finally given the rank of captain, his own ship (a garbage scow) and a mission: to explore strange new worlds (which no man in his right mind would explore), to seek out new life and new civilizations (which grew out of the massive amounts of trash Roger will collect on his way), to boldly go where no man has gone before. Step by step Roger will have to unveil a galaxy-wide biohazardous material dumping scheme, solve the mystery of the disappearance of a fellow Starfleet captain and his ship, and confront an agent of an old nemesis.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00024.png" alt="" /></p>

<p>As I work my way through the games I’ve listed on this journey, Space Quest V was one I was more excited to replay as it has a lot of nostalgic value. I can still remember leafing through the <a href="https://www.spacequest.net/sq5/manual/sq5manual.pdf">Galactic Inquirer</a> that came with the game. At that time I would still occasionally go out grocery shopping with my parents and would see the tabloids at the check outs with headlines like <a href="https://www.ranker.com/list/funny-tabloid-headlines/nathandavidson">“Half-Man Half-Dog Baffles Doctors”</a>, so the format here was immediately appealing.</p>

<p>Not really sure how well this stands up nowadays though…</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00001.png" alt="" /></p>

<p>The manual gives you a couple pointers on how to get started on your adventure, including getting to your classroom and cheating on the StarCon Aptitude Test. Once you sit down and start taking the test, there is a robot monitoring everyone to make sure no one’s cheating - so clearly the goal here is to cheat.</p>

<p>Roger can peer over to see the answers of the students to either side of him. If he gets caught, he’ll be ejected from the academy (into space) and it’s game over. If you copy from the wrong student you’ll get the wrong answers, so make sure you pick the smart kid to cheat off of (hint: the one with the big brain).</p>

<p>When you select the right student you’ll hear the tone play that indicates your score has gone up. This is a sure fire way to confirm you’ve done something correctly that will advance the plot or direction of the game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00009.png" alt="" /></p>

<p>The game is a mashup of all your favourite sci-fi properties such as Star Trek, Star Wars and Alien. Early on you’ll meet a critter on the shape that looks a lot like a <a href="https://avp.fandom.com/wiki/Facehugger">facehugger</a> from Alien. Instead of it killing you right away though, Roger thinks he looks cute, names him Spike and keeps him as a pet.</p>

<p>Many story sequences are presented in this comic book panel style and it’s clear a lot of effort went into the artwork for this game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00002.png" alt="" /></p>

<p>For game from 1993 you’re getting some of the best VGA graphics sprite-based artists could crank out. The character models are extremely expressive, the background artwork is detailed and there’s plenty of sight gags and hidden details to discover on each screen that immerses you in the experience.</p>

<p>Space Quest games never take themselves too seriously, and Space Quest V is no exception. I really enjoy clicking the <code class="language-plaintext highlighter-rouge">LOOK</code> action on as much as I can on each screen as the feedback you get tends to be witty or funny.</p>

<p>When Roger does something stupid, the sound effect they chose was Homer Simpson’s “DOH!”, which just feels weirdly appropriate for this game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00030.png" alt="" /></p>

<p>There is no voice acting, and many scenes don’t have background music - just some looping background noise. When on the deck of your garbage scow the sound effects are what you’d expect to hear on the deck of the starship Enterprise.</p>

<p>When you do get music in a scene it tends to help build tension or reinforce that something significant is about to happen, but it is used sparingly which can make some scenes feel a bit empty.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00025.png" alt="" /></p>

<p>If you’ve played any of the Space Quest games you know that Roger Wilco is a bit of a tool, and sort of bumbles his way into situations he doesn’t belong in. For this installment in the series, he accidentally gets a perfect score on his StarCon Aptitude test and gets assigned to a starship as a captain.</p>

<p>This starship is actually a garbage scow - which is appropriate seeing as you’re a janitor. You’ll have to fly to various locations to pick up garbage in space as you wait for instructions or story elements to unfold that direct you to your next location.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00008.png" alt="" /></p>

<p>Initially you have 3 crew members, and you issue commands through various menus you can access from your control panel (click a coloured button to bring these up, or speak the crew members directly using the <code class="language-plaintext highlighter-rouge">COMMAND</code> icon).</p>

<p>This is a bit more involved than previous games, but it ends up being fairly straightforward. You’ll need the Galactic Inquirer for the star codes to various planets (this is the copy protection), and the commands you issue are usually the same:</p>

<ul>
  <li>lay in a course</li>
  <li>go to light speed</li>
  <li>wait to arrive</li>
  <li>go to regular speed</li>
  <li>orbit planet</li>
  <li>activate RSS</li>
</ul>

<p>This will suck up the space trash and allow you to proceed with the story.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00036.png" alt="" /></p>

<p>Like all good Sierra games of this era, there are many ways to get yourself killed. The Space Quest series always tends to have the best game over screens, so it’s worth experimenting a bit to see how Roger’s untimely end can be met in various scenarios.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00014.png" alt="" /></p>

<p>Also, like many Sierra games at the time, Space Quest V contains an unrelated mini-game that acts as filler. Instead of having to play poker like in <a href="/blog/2022/03/15/police-quest-1/">Police Quest: In Pursuit of the Death Angel</a>, or that stupid card game in <a href="/blog/2024/03/20/codename-iceman/">Codename: ICEMAN (Sierra On-Line)</a> … this time you play something like <a href="https://en.wikipedia.org/wiki/Battleship_(game)">Battleship</a>.</p>

<p>Seeing as you can <a href="https://en.wiktionary.org/wiki/savescum">savescum</a> your way to victory pretty easily, there’s not much challenge here. It is a decent distraction and can be fun for a few minutes, so I appreciate the fact that it was included.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00033.png" alt="" /></p>

<p>There is some variety to the gameplay, and at one point you are teleported down to a planet at the same time as a fly and end up having your genes spliced with the insect. Playing as a fly, you have to solve a couple of puzzles to get your body back while also advancing the story.</p>

<p>Being a fly allows you to crawl through a security card reader to gain access to a building that you’d typically need a card for. By crawling through the beams and observing which ones activate locking mechanisms, you’ll later be able to punch a card to recreate the access card.</p>

<p>I remember really finding this puzzle clever when I originally played this game as it wasn’t overly complicated, and knowing I had a business card and a hole punch in my inventory it sort of made sense what I was going to have to do.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00028.png" alt="" /></p>

<p>Not all the puzzles are fun though. When Cliffy (your chief engineer) gets himself ejected from the ship and you need to go rescue him it typically takes a few tries to navigate the awkward controls before you run out of fuel or oxygen.</p>

<p>Since I play these games on max speed, turning this down about 50% actually made the sequence a lot easier to complete.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00022.png" alt="" /></p>

<p>As I’m writing this review and going back over my screenshots, it seems arcade sequences are actually more prominent that I remembered. This is potentially the result of Dynamix developing the game - not Sierra.</p>

<p>An interesting piece of trivia is that Dynamix originally developed the demo for Space Quest V using their <a href="https://wiki.scummvm.org/index.php/DGDS">DGDS game engine</a>, but for the final game Sierra’s <a href="https://wiki.scummvm.org/index.php/SCI">SCI engine</a> was used.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00037.png" alt="" /></p>

<p>The only real gripe I had with the game was the maze at the very end. I just really dislike mazes - unless I’m playing a CRPG that is.</p>

<p>Navigating this maze is just a pain in the ass, but thankfully it’s fairly short and you can burn through the entire sequence in about 10 minutes. If you happen to pop out under the elevator incorrectly and try to climb you will be crushed to death and get to enjoy one of the many death screens this game has to offer … so that’s something I guess.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00044.png" alt="" /></p>

<p>Unlike most (all?) Sierra games, Space Quest V includes product placement in the form of the Sprint logo being displayed after every video call you make. I didn’t find this to be overly intrusive, but it was kind of odd for an adventure game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00043.png" alt="" /></p>

<p>The nostalgia factor on this game is pretty high for me, which is definitely reflected in the higher <em>Replayability</em> and <em>Bonus / Surprise</em> categories. I love the characters and the unapologetic parody at every turn - even if the plot is kind of thin.</p>

<p>I actually tried the <a href="https://archive.org/details/SpaceQuestVTheNextMutationDemo">demo</a> in DOSBox just to see what the difference was, and surprisingly it looked almost identical to the final version of the game.</p>

<p>I had a lot of fun replaying Space Quest V and would highly recommend this title to anyone getting into the genre. It’s pretty accessible, easy to get into and full of great writing - and puns - lots and lots of puns.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Space Quest V: Roger Wilco – The Next Mutation</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Dynamix">Dynamix</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>February 5, 1993</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/8867"><em>How Long To Beat?</em></a></td>
      <td>6 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://wiw.org/~jess/sq5.html">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Graphics (10)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Sound (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Plot / Progression (25)</strong></td>
      <td>17</td>
    </tr>
    <tr>
      <td><strong>Characters / Development (15)</strong></td>
      <td>10</td>
    </tr>
    <tr>
      <td><strong>Gameplay / Experience (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Replayability (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact / Impression (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Bonus / Surprise (5)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>61%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/sq5/scummvm-sq5-00003.png', thumb: '/images/adventure/sq5/scummvm-sq5-00003.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00004.png', thumb: '/images/adventure/sq5/scummvm-sq5-00004.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00005.png', thumb: '/images/adventure/sq5/scummvm-sq5-00005.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00006.png', thumb: '/images/adventure/sq5/scummvm-sq5-00006.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00007.png', thumb: '/images/adventure/sq5/scummvm-sq5-00007.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00010.png', thumb: '/images/adventure/sq5/scummvm-sq5-00010.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00011.png', thumb: '/images/adventure/sq5/scummvm-sq5-00011.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00013.png', thumb: '/images/adventure/sq5/scummvm-sq5-00013.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00015.png', thumb: '/images/adventure/sq5/scummvm-sq5-00015.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00016.png', thumb: '/images/adventure/sq5/scummvm-sq5-00016.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00017.png', thumb: '/images/adventure/sq5/scummvm-sq5-00017.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00018.png', thumb: '/images/adventure/sq5/scummvm-sq5-00018.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00019.png', thumb: '/images/adventure/sq5/scummvm-sq5-00019.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00020.png', thumb: '/images/adventure/sq5/scummvm-sq5-00020.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00021.png', thumb: '/images/adventure/sq5/scummvm-sq5-00021.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00023.png', thumb: '/images/adventure/sq5/scummvm-sq5-00023.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00026.png', thumb: '/images/adventure/sq5/scummvm-sq5-00026.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00027.png', thumb: '/images/adventure/sq5/scummvm-sq5-00027.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00029.png', thumb: '/images/adventure/sq5/scummvm-sq5-00029.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00031.png', thumb: '/images/adventure/sq5/scummvm-sq5-00031.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00032.png', thumb: '/images/adventure/sq5/scummvm-sq5-00032.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00034.png', thumb: '/images/adventure/sq5/scummvm-sq5-00034.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00035.png', thumb: '/images/adventure/sq5/scummvm-sq5-00035.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00038.png', thumb: '/images/adventure/sq5/scummvm-sq5-00038.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00039.png', thumb: '/images/adventure/sq5/scummvm-sq5-00039.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00040.png', thumb: '/images/adventure/sq5/scummvm-sq5-00040.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00041.png', thumb: '/images/adventure/sq5/scummvm-sq5-00041.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00042.png', thumb: '/images/adventure/sq5/scummvm-sq5-00042.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/144/space-quest-v-the-next-mutation/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Dynamix" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/sq5/scummvm-sq5-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/sq5/scummvm-sq5-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Risk of data corruption when using Node v22.7.0 and the MongoDB Node.js driver</title><link href="https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver/" rel="alternate" type="text/html" title="Risk of data corruption when using Node v22.7.0 and the MongoDB Node.js driver" /><published>2024-08-29T07:18:44-04:00</published><updated>2024-09-12T05:35:46-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver/"><![CDATA[<blockquote class="prompt-warning">
  <p>MongoDB issued the alert titled <a href="https://www.mongodb.com/resources/products/alerts/potential-data-integrity-issues-sep-2024">“Node.js v22.7.0 runtime defect can lead to data encoding issues”</a> on September 10, 2024
If you need detection or remediation scripts, you can find them there.</p>
</blockquote>

<p>Within days of the <a href="https://nodejs.org/en/blog/release/v22.7.0">Node v22.7.0 release</a>, users were already reporting that UTF-8 <a href="https://github.com/nodejs/node/issues/54543">encodings were broken</a>. The issue results from the introduction of an incorrect optimization for <code class="language-plaintext highlighter-rouge">buffer.write</code> which can result in strings being encoded using ISO-8859-1 rather than UTF-8.</p>

<p>Though the use of the fast API for <code class="language-plaintext highlighter-rouge">buffer.write</code> <a href="https://github.com/nodejs/node/pull/54565">will be disabled</a> with Node v22.8.0, developers using MongoDB’s Node.js driver could experience data corruption with Node v22.7.0.</p>

<h2 id="mitigating-the-issue">Mitigating the Issue</h2>

<p>To avoid the possibility of data corruption due to this bug it is recommended that Node v22.7.0 <strong>is not used at all.</strong></p>

<p>MongoDB recommends only using Node runtime versions <a href="https://www.mongodb.com/docs/drivers/node/current/compatibility/#language-compatibility">documented as compatible</a> in production environments. At the time of writing, Node v22.x is not considered a compatible runtime for use with the MongoDB Node.js driver.</p>

<h2 id="how-it-occurs">How it Occurs</h2>

<p>To illustrate how this can occur, consider the following reproduction:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">MongoClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">mongodb</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb://...</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bébé</span><span class="dl">'</span><span class="p">;</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Running Node </span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">versions</span><span class="p">.</span><span class="nx">node</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">drop</span><span class="p">();</span>

    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while </span><span class="p">(</span><span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="p">)</span> <span class="p">{</span> <span class="nx">i</span><span class="o">++</span> <span class="p">}</span>

    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="nx">value</span> <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Found doc </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">doc</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nf">run</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When run using a previous version of Node, the <code class="language-plaintext highlighter-rouge">Buffer</code> length is consistently evaluated for 20K iterations, a document is inserted into a MongoDB collection then successfully retrieved.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Running Node 22.6.0
Found doc {"_id":1,"message":"bébé"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When the same reproduction is run using Node v22.7.0 however, invalid UTF-8 string data can be produced, which would then be inserted into the MongoDB collection, resulting in subsequent retrieval attempts failing.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre>Running Node 22.7.0
BSONError: Invalid UTF-8 string in BSON document
    at parseUtf8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:148:19)
    at Object.toUTF8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:273:21)
    ... 6 lines matching cause stack trace ...
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Collection.findOne (/Users/alex/temp/test-node/node_modules/mongodb/lib/collection.js:274:21) {
  [cause]: TypeError: The encoded data was not valid for encoding utf-8
      at TextDecoder.decode (node:internal/encoding:443:16)
      at parseUtf8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:145:37)
      at Object.toUTF8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:273:21)
      at deserializeObject (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:2952:31)
      at internalDeserialize (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:2863:12)
      at Object.deserialize (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:4335:12)
      at OnDemandDocument.toObject (/Users/alex/temp/test-node/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js:208:28)
      at CursorResponse.shift (/Users/alex/temp/test-node/node_modules/mongodb/lib/cmap/wire_protocol/responses.js:207:35)
      at FindCursor.next (/Users/alex/temp/test-node/node_modules/mongodb/lib/cursor/abstract_cursor.js:222:41)
      at process.processTicksAndRejections (node:internal/process/task_queues:105:5) {
    code: 'ERR_ENCODING_INVALID_ENCODED_DATA'
  }
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though MongoDB’s Node.js driver supports <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/bson/utf8-validation/">UTF-8 validation</a>, that feature applies to <em>decoding</em> BSON strings that are being received from the MongoDB server. As the bug in Node v22.7.0 occurs when <em>encoding</em> strings as UTF-8, the invalid data can still be serialized to BSON and written to the database.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><category term="javascript" /><category term="node" /><summary type="html"><![CDATA[MongoDB issued the alert titled “Node.js v22.7.0 runtime defect can lead to data encoding issues” on September 10, 2024 If you need detection or remediation scripts, you can find them there.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-node.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-node.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linearize a Recursive Call Stack Using Thread Primitives</title><link href="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/" rel="alternate" type="text/html" title="Linearize a Recursive Call Stack Using Thread Primitives" /><published>2024-08-26T12:57:14-04:00</published><updated>2024-08-26T16:24:02-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/"><![CDATA[<h1 id="linearize-a-recursive-call-stack-using-thread-primitives">Linearize a Recursive Call Stack Using Thread Primitives</h1>

<blockquote class="prompt-tip">
  <p>Written by <a href="https://www.linkedin.com/in/advitimishra/">Adviti Mishra</a>, an intern on the MongoDB Ruby driver team</p>
</blockquote>

<p><a href="https://www.mongodb.com/docs/mongoid/current/">Mongoid</a> is an object document mapper (like an ORM) built on the <a href="https://www.mongodb.com/docs/ruby-driver/current/">MongoDB Ruby driver</a> that Ruby on Rails developers use to interact with their MongoDB data through model instances. When developers choose to <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#cascading-callbacks">cascade callbacks</a>, if their document has a large number of <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#embedded-associations">embedded documents</a>, they might encounter a <code class="language-plaintext highlighter-rouge">SystemStackError</code>. In this article, we walk through how we used <a href="https://docs.ruby-lang.org/en/master/Fiber.html">Fibers</a> — a lightweight thread primitive — in a non-concurrency related context of recursion to address this issue!</p>

<h2 id="background"><strong>Background</strong></h2>

<p>MongoDB is a document database that’s designed for scalability, flexibility, and high availability. It’s a non-relational database that uses JSON-like documents to store data.</p>

<p>Using Mongoid, Ruby on Rails developers working with MongoDB can leverage <a href="https://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a>-like referential associations as well as a directly embeddable variation known as embedded associations. Let’s first explore one type of document: embedded documents.</p>

<h3 id="embedded-documents"><strong>Embedded documents</strong></h3>

<p>Developers can store related data together by <em>embedding</em> these documents in their parent model. This enables them to retrieve the associated data in a single query.</p>

<p>In our example we will use throughout the article, we define a Parent class, a Child class, and a Grandchild class that contain embedded associations. First, we will create a parent document that <em>embeds</em> two children documents with the first child, <em>embedding</em> two grandchildren documents.</p>

<p>The document representation in MongoDB would look something like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813902"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138fe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"grand_children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813900"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813901"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138ff"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>This document was generated as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="nb">require</span> <span class="s1">'bundler/inline'</span>
<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

  <span class="n">gem</span> <span class="s1">'mongoid'</span><span class="p">,</span> <span class="s1">'9.0.0'</span>
<span class="k">end</span>

<span class="no">Mongoid</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">clients</span><span class="p">.</span><span class="nf">default</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">uri: </span><span class="s2">"mongodb://localhost:27017"</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># to indicate around callbacks should be fired for embedded documents</span>
<span class="no">Mongoid</span><span class="p">.</span><span class="nf">around_callbacks_for_embeds</span> <span class="o">=</span> <span class="kp">true</span>

<span class="c1"># Initial model definitions</span>
<span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Parent</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:children</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:grandchildren</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Grandchild</span> <span class="o">&lt;</span> <span class="no">Example</span><span class="p">;</span> <span class="k">end</span>

<span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 2 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, let’s say that every time the parent document is saved, we want to perform some logic on the parent document before, after, and around the save operation. An example of this would be logging the beginning of the operation, calculating and storing the time taken by the save operation, and logging the end of the operation. How exactly can we <em>hook</em> into this stage of the document lifecycle?</p>

<h3 id="callbacks"><strong>Callbacks</strong></h3>

<p><strong>Callbacks</strong>, in the context of a Mongoid application, are hooks into the lifecycle of a document’s persistence context. These hooks enable developers to perform logic before, after, and/or around (immediately before and immediately after) document lifecycle events like validate, create, update, save, and destroy.</p>

<p>Let’s modify our Example base class definition to include hooks into the before, after, and around events of the document’s <em>“save”</em> lifecycle.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>

  <span class="c1"># callbacks for the save operation</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] before callback"</span> <span class="p">}</span>
  <span class="n">around_save</span> <span class="ss">:log_around</span>
  <span class="n">after_save</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] after callback"</span> <span class="p">}</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">log_around</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (begin)"</span>
    <span class="k">yield</span> <span class="c1"># to yield control to the code block performing the save operation</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (end)"</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Mongoid depends on <a href="https://guides.rubyonrails.org/active_record_callbacks.html">ActiveRecord’s callbacks</a> implementation, with the relevant API for executing callbacks being <a href="https://www.rubydoc.info/github/mongoid/mongoid/Mongoid%2FInterceptable:run_callbacks"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#run_callbacks</code></a>. In our example, when <code class="language-plaintext highlighter-rouge">run_callbacks</code> is triggered, it will execute the <code class="language-plaintext highlighter-rouge">before_save</code> and <code class="language-plaintext highlighter-rouge">around_save</code> callbacks around the execution of the save operation, followed by the <code class="language-plaintext highlighter-rouge">after_save</code> callback.</p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> keyword in Ruby used when executing around callbacks is key.</p>

<p>Given that embedded documents are often used to store related data, sometimes, we may want the callbacks of embedded documents to run whenever a persistence operation is performed on the parent document. This phenomenon is known as <strong>cascading callbacks.</strong></p>

<p>💡 <strong>Illustration to build intuition:</strong></p>

<p>To illustrate how the callbacks <em>cascade</em> through the embedded documents, when we run the sample code above, the call to <code class="language-plaintext highlighter-rouge">parent.save</code> would produce the following output:</p>

<p><img src="/images/adviti-01.png" alt="" /></p>

<p>Having gained a better understanding of how callbacks cascade for embedded documents, we will now work on the implementation for the same. The task of running callbacks on embedded documents is abstracted away in a private API called <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#_mongoid_run_child_callbacks_with_around</code></a> and will be the function we will be working with moving forward.</p>

<h2 id="existing-implementation-mongoid-900-and-earlier"><strong>Existing implementation (Mongoid 9.0.0 and earlier)</strong></h2>

<p>Before we start coding, let’s first set some goals for our implementation and enumerate what <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> needs to know:</p>

<ol>
  <li>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</li>
  <li>All cascadable embedded documents need to have their callbacks executed.</li>
</ol>

<p>The implementation must also be elegant, readable, and simple to reason about so that working with it feels good (like <a href="https://www.artima.com/articles/the-philosophy-of-ruby">Matz tells us working with Ruby should</a>).</p>

<p>Next, let’s dive into the parameters <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> expects:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">kind</code>: the kind of callbacks to run (e.g., save, create, validate, etc.)</li>
  <li><code class="language-plaintext highlighter-rouge">children</code>: the list of embedded documents to run the callbacks on</li>
  <li><code class="language-plaintext highlighter-rouge">block</code>: executes the persistence operation the callbacks are being run for; this can either happen directly or after running any other callbacks</li>
</ol>

<p>Equipped with this, we will first analyze the <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187">old recursive implementation</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">child</span><span class="p">,</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>
  <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>
  <span class="k">elsif</span> <span class="n">tail</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="n">tail</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This function handles three cases:</p>

<ol>
  <li>There are zero embedded documents (<code class="language-plaintext highlighter-rouge">child.nil?</code>), and if a code block was provided, it will be run.</li>
  <li>There is one embedded document (<code class="language-plaintext highlighter-rouge">tail.empty?</code>) and its <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L113-L143"><code class="language-plaintext highlighter-rouge">run_callbacks</code></a> function will be invoked.</li>
  <li>There are more than one embedded documents, at which point <code class="language-plaintext highlighter-rouge">run_callbacks</code> will be called recursively.</li>
</ol>

<p>This recursive use case is where we can get into trouble. If we dig into the logic, it appears that <code class="language-plaintext highlighter-rouge">run_callbacks</code> yields to the custom block passed in that invokes <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> but with the parameter for children as the list of remaining documents (stored in <code class="language-plaintext highlighter-rouge">tail</code>).</p>

<p>This seems intuitive as well based on colorized output (see above), where each color corresponds to one invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code>.</p>

<p>To better understand how this recursive implementation can become problematic, let’s adjust the number of <code class="language-plaintext highlighter-rouge">Child</code> embedded documents our sample code will generate:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 750 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">750</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though the increased number of child embedded documents being generated may not seem like much, according to our Ruby runtime, it is… and running this example will now raise a <a href="https://ruby-doc.org/core-2.5.1/SystemStackError.html"><code class="language-plaintext highlighter-rouge">SystemStackError</code></a>.</p>

<pre><code class="language-txt">[...]/mongoid-9.0.0/lib/mongoid/config/options.rb:38:in `block (2 levels) in option': stack level too deep (SystemStackError)
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:177:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:183:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
         ... 8134 levels...
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:109:in `prepare_insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:21:in `insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/savable.rb:27:in `save'
        from test.rb:53:in `&lt;main&gt;'
</code></pre>

<p>There are well-defined base cases in <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks</code>, so there is no way this is a case of:</p>

<pre><code class="language-txt">a case of:
	a case of:
		a case of:
			a case of:
				a case of:
					a case of:
						a case of:
							…
</code></pre>
<p>Infinite recursion!</p>

<p><strong>So, how did the stack space get exhausted?!</strong></p>

<p>Well, in the general case, an invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> creates a stack frame for <code class="language-plaintext highlighter-rouge">run_callbacks</code>. When <code class="language-plaintext highlighter-rouge">run_callbacks</code> eventually yields to the block passed in, this block creates a stack frame for running <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> and so on.</p>

<p>As a result, there is at least one extra stack frame for every invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> which corresponds directly to the number of embedded documents, eventually reaching a depth that results in a <code class="language-plaintext highlighter-rouge">SystemStackError</code> being raised. The number of callbacks that can be added to the stack can vary from system to system, which makes it challenging to optimize the existing approach consistently.</p>

<p>Maybe there’s a better way to approach this …</p>

<h2 id="replacing-recursion-with-fibers-in-mongoid-901"><strong>Replacing recursion with fibers in Mongoid 9.0.1</strong></h2>

<h3 id="so-what-even-are-fibers"><strong>So, what even are fibers?</strong></h3>

<p>Fibers are thread primitives that are used for implementing lightweight cooperative concurrency. These are the two methods we will be using from the Fiber API:</p>

<ol>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-i-resume"><code class="language-plaintext highlighter-rouge">Fiber#resume</code></a> method starts/resumes running the fiber.</li>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-c-yield"><code class="language-plaintext highlighter-rouge">Fiber.yield</code></a> method is called from within the fiber to return control to the caller of the <code class="language-plaintext highlighter-rouge">Fiber#resume</code>. These two methods equip fibers with a feature that we will leverage. We can control the scheduling (unlike threads that are scheduled by the operating system).</li>
</ol>

<p>Fibers are typically used in concurrent contexts. However, we thought of using these two methods to somehow run callbacks based on a <a href="https://jira.mongodb.org/secure/attachment/480870/fiber-callbacks-exploration.rb">proof of concept</a> initially proposed by my mentor, <a href="https://github.com/jamis">Jamis Buck</a>!</p>

<h3 id="approach"><strong>Approach</strong></h3>

<p>To investigate this, I wanted to first answer these high-level questions:</p>

<ol>
  <li><strong>Bottom-up</strong>: How do callbacks work at the level of ActiveSupport in Ruby on Rails through <code class="language-plaintext highlighter-rouge">CallbackSequence</code>, <code class="language-plaintext highlighter-rouge">CallTemplate</code>, <code class="language-plaintext highlighter-rouge">Filters</code>, all the way up to <code class="language-plaintext highlighter-rouge">run_callbacks</code>?</li>
  <li><strong>Top-down</strong>: How does Mongoid identify a persistence operation, obtain a list of the embedded documents that callbacks can be cascaded to, and cascade the right callbacks for all of them using <code class="language-plaintext highlighter-rouge">run_callback</code>?</li>
  <li><strong>Middle-layer</strong>: At what point within the entire flow of callbacks (discovered through one and two) can fibers be used correctly?</li>
</ol>

<p>I spent the first few weeks of my internship understanding callbacks in the context of the holy trinity: Ruby on Rails, Mongoid, and fibers from the Ruby language. However, when my dreams started running on separate fibers that kept yielding to each other, I realized I had to touch some grass. It was when I was touching grass on a hike that I had my eureka moment — ironically inspired by recursion.</p>

<p>In the Programming and Data Structure class I TA’d, one mantra we would emphasize in the recursion unit was: <em>“Take the recursive leap of faith.”</em></p>

<p>The recursive leap of faith means:</p>

<ol>
  <li>Trust that the function you are implementing runs perfectly and returns the right value.</li>
  <li>Solely focus on figuring out how to depend on the function.</li>
</ol>

<p>Extrapolate this philosophy of trust to this project where <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> depends on Ruby on Rails’ ActiveSupport:</p>

<blockquote class="prompt-info">
  <p><strong>What if we trust that Ruby on Rails’ handling of callbacks is incredibly efficient and solely focus on <em>how</em> we depend on Ruby on Rails’ <code class="language-plaintext highlighter-rouge">run_callbacks</code> instead?</strong></p>
</blockquote>

<p>This helped us answer Question 3 above: At what point within the entire flow of callbacks can fibers be used correctly? Within <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> itself!</p>

<p>The fundamental idea underpinning the solution that I discovered is leveraging fibers in a <em>“hand-off”</em> fashion.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">hand_off</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span>
  <span class="c1"># creating fibers for each child in children</span>
  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> does work (begin)"</span>
      <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> finishes work (end)"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># resumes one fiber at a time</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>

  <span class="c1"># execute the block</span>
  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="c1"># resumes one fiber at a time in reverse</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> line runs the fiber for the 0th child. “Fiber for 0 does work (begin)” gets printed. When execution hits the <code class="language-plaintext highlighter-rouge">Fiber.yield</code> statement, control is returned to <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code>. This then runs the fiber for the next child. In this fashion, the work <em>“before”</em> the yield gets executed for all the children.</p>

<p>Now, the actual <em>“work”</em> can take place. Thus, <code class="language-plaintext highlighter-rouge">block&amp;.call</code> runs.</p>

<p>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> line runs the fiber for the last child. <em>“Fiber for 1 does work (end)”</em> gets printed. This then runs the fiber for the second-to-last child. In this fashion, the work <em>“after”</em> the yield gets executed for all the children.</p>

<p>Does this flow seem familiar? It is a linearized version of the bottleneck in the recursive call stack from the implementation in Mongoid 9.0 (and earlier)!</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> mimics running the before callback and the part of the around callback before the yield.</li>
  <li>The <code class="language-plaintext highlighter-rouge">block&amp;.call</code> mimics running the block passed in.</li>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> mimics the <em>“unfolding”</em> of the recursive algorithm by running the part of the around callback after the yield and the after callback.</li>
</ul>

<p>Isn’t this cool? Together, we have linearized the recursive call stack using a thread primitive!</p>

<p>In our case, <code class="language-plaintext highlighter-rouge">run_callbacks</code> does all the work we illustrated in the code block. To effectively hand off control between the fibers, the one tweak we need to make is that the block we pass into <code class="language-plaintext highlighter-rouge">run_callbacks</code> should yield the fiber.</p>

<p>The solution that we arrived at looks like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">children</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>

  <span class="k">return</span> <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span> <span class="k">if</span> <span class="n">children</span><span class="p">.</span><span class="nf">empty?</span>

  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
        <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fiber</span><span class="o">|</span>
    <span class="n">fiber</span><span class="p">.</span><span class="nf">resume</span>
    <span class="k">raise</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Errors</span><span class="o">::</span><span class="no">InvalidAroundCallback</span> <span class="k">unless</span> <span class="n">fiber</span><span class="p">.</span><span class="nf">alive?</span>
  <span class="k">end</span>

  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yay! Let’s now analyze how the two implementations fair for correctness and efficiency:</p>

<blockquote>
  <p><strong>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: Stack frames remember where to resume execution.</li>
    <li><em>Fiber-based implementation</em>: Each fiber resumes execution from the point it yielded.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>All cascadable embedded documents need to have their callbacks executed.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: A stack frame is created for each embedded document.</li>
    <li><em>Fiber-based implementation</em>: A fiber is created for each embedded document within one stack frame.</li>
  </ul>
</blockquote>

<p>As demonstrated previously, the recursive implementation stops working for embedded documents in the hundreds. On the other hand, the fibers implementation works for even 10,000+ embedded documents. Thus, you don’t need to worry about your application working or not working depending on the data you have (although, you should ideally not design your database to have tens of thousands of embedded documents).</p>

<p>The Fiber-based implementation we’ve discussed throughout this post was released in <a href="https://github.com/mongodb/mongoid/releases/tag/v9.0.1">Mongoid 9.0.1</a> if you want to go check it out. If you’re unsure how to get started with Mongoid, there are tutorials for <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-rails7/">Ruby on Rails</a> and <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-sinatra/">Sinatra</a> that can help start you on your journey to building something amazing with MongoDB and Ruby!</p>]]></content><author><name>Adviti Mishra</name></author><category term="Programming" /><category term="ruby" /><summary type="html"><![CDATA[Linearize a Recursive Call Stack Using Thread Primitives]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rendering MongoDB Driver Specifications as a Book</title><link href="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/" rel="alternate" type="text/html" title="Rendering MongoDB Driver Specifications as a Book" /><published>2024-08-26T07:36:01-04:00</published><updated>2024-08-26T08:27:58-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/"><![CDATA[<p>MongoDB’s <a href="https://github.com/mongodb/specifications">Drivers Specifications</a> have always been available on GitHub. Since the content <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/us/">license is extremely permissive</a> there are a number of things we could do to transform that work as long as we provide proper attribution.</p>

<p>Until recently, this content has always been maintained as <a href="https://docutils.sourceforge.io/rst.html">restructuredText</a> documents, however with <a href="https://jira.mongodb.org/browse/DRIVERS-2789">DRIVERS-2789</a> this content has all been converted to <a href="https://daringfireball.net/projects/markdown/">Markdown</a>. MongoDB decided to use this opportunity (via <a href="https://jira.mongodb.org/browse/DRIVERS-2881">DRIVERS-2881</a>) to <a href="https://specifications.readthedocs.io/en/latest/">publish the specifications to ReadTheDocs</a> using <a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html">MkDocs</a>, however I wanted to try taking an alternate approach to see how difficult it would be to automate publication of Markdown content in book format.</p>

<h2 id="configuration">Configuration</h2>

<p>Since the specifications are hosted on GitHub, I began by <a href="https://github.com/alexbevi/specifications">forking the repository to <code class="language-plaintext highlighter-rouge">alexbevi/specifications</code></a>. Instead of <code class="language-plaintext highlighter-rouge">MkDocs</code> I chose <a href="https://rust-lang.github.io/mdBook/"><code class="language-plaintext highlighter-rouge">mdBook</code></a> as the tool for rendering Markdown to HTML as creating a book was as simple as:</p>

<ol>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#booktoml">Defining a <code class="language-plaintext highlighter-rouge">book.toml</code></a> with basic configuration options</li>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#summarymd">Outlining the book structure in a <code class="language-plaintext highlighter-rouge">SUMMARY.md</code></a> file</li>
</ol>

<p>I <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/book.toml">defined my <code class="language-plaintext highlighter-rouge">book.toml</code></a> to indicate all my Markdown files would be in the <code class="language-plaintext highlighter-rouge">source/</code> directory, <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/source/SUMMARY.md">created a <code class="language-plaintext highlighter-rouge">source/SUMMARY.md</code></a> file with links to all the Markdown files I wanted in my book and was basically done.</p>

<p>Testing this out was as easy as running <code class="language-plaintext highlighter-rouge">mdbook serve --open</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>mdbook serve --open
2024-08-26 07:56:39 [INFO] (mdbook::book): Book building has started
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): It seems that there are both "README.md" and index.md under "/Users/alex/Workspace/specifications/source".
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): mdbook converts "README.md" into index.html by default. It may cause
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): unexpected behavior if putting both files under the same directory.
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): To solve the warning, try to rearrange the book structure or disable
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): "index" preprocessor to stop the conversion.
2024-08-26 07:56:39 [INFO] (mdbook::book): Running the html backend
2024-08-26 07:56:43 [INFO] (mdbook::cmd::serve): Serving on: http://localhost:3000
2024-08-26 07:56:43 [INFO] (mdbook): Opening web browser
2024-08-26 07:56:43 [INFO] (warp::server): Server::run; addr=[::1]:3000
2024-08-26 07:56:43 [INFO] (warp::server): listening on http://[::1]:3000
2024-08-26 07:56:43 [INFO] (mdbook::cmd::watch::poller): Watching for changes...
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mdBook</code> will process the <code class="language-plaintext highlighter-rouge">SUMMARY.md</code> file, generate HTML content based on the indexed Markdown files and open a preview in your default browser.</p>

<h2 id="automation">Automation</h2>

<p>Laying out the book and rendering it from Markdown to HTML turned out to be pretty easy, but MongoDB’s engineers continuously refine the specifications so anything we generate would go stale fairly quickly. What if we could leverage <a href="https://docs.github.com/en/actions">GitHub Actions</a> to refresh our fork of the <code class="language-plaintext highlighter-rouge">specifications</code> repository, rebuild our book and continuously publish as <a href="https://pages.github.com/">GitHub Pages</a>?</p>

<p>We’ll be publishing our repository to a GitHub Pages instance (see the <a href="https://docs.github.com/en/pages/quickstart">Quickstart for GitHub Pages</a> if needed), so the first step is to ensure this has been configured. Next we’ll setup workflow that GitHub Actions can use to:</p>

<ol>
  <li>Checkout the upstream repository</li>
  <li>Sync the upstream repository’s <code class="language-plaintext highlighter-rouge">master</code> branch with our fork’s default branch (<code class="language-plaintext highlighter-rouge">mkbook</code> in this case)</li>
  <li>Install <code class="language-plaintext highlighter-rouge">mdbook</code> and build our book based on the latest Markdown files</li>
  <li>Deploy the HTML contents from our build target (<code class="language-plaintext highlighter-rouge">book/</code>) to the branch GitHub pages is configured to use (<code class="language-plaintext highlighter-rouge">gh-pages</code> in this case)</li>
</ol>

<p>If you want to check out the latest version of this it’s at <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/.github/workflows/sync.yml"><code class="language-plaintext highlighter-rouge">.github/workflows/sync.yml</code></a>, but at the time of writing it looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="rouge-code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Scheduled</span><span class="nv"> </span><span class="s">Upstream</span><span class="nv"> </span><span class="s">Sync'</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span>  <span class="s1">'</span><span class="s">0</span><span class="nv"> </span><span class="s">8</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span>

  <span class="na">workflow_dispatch</span><span class="pi">:</span>  <span class="c1"># click the button on Github repo!</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">sync_test_mode</span><span class="pi">:</span> <span class="c1"># Adds a boolean option that appears during manual workflow run for easy test mode config</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Fork</span><span class="nv"> </span><span class="s">Sync</span><span class="nv"> </span><span class="s">Test</span><span class="nv"> </span><span class="s">Mode'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
        <span class="na">default</span><span class="pi">:</span> <span class="kc">false</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">sync_latest_from_upstream</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Sync latest commits from upstream repo</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 1: run a standard checkout action, provided by github</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout target repo</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="c1"># optional: set the branch to checkout,</span>
        <span class="c1"># sync action checks out your 'target_sync_branch' anyway</span>
        <span class="na">ref</span><span class="pi">:</span>  <span class="s">mkbook</span>
        <span class="c1"># REQUIRED if your upstream repo is private (see wiki)</span>
        <span class="c1"># persist-credentials: false</span>

    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 2: run the sync action</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Sync upstream changes</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">sync</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">aormsby/Fork-Sync-With-Upstream-action@v3.4.1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">target_sync_branch</span><span class="pi">:</span> <span class="s">mkbook</span>
        <span class="c1"># REQUIRED 'target_repo_token' exactly like this!</span>
        <span class="na">target_repo_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">upstream_sync_branch</span><span class="pi">:</span> <span class="s">master</span>
        <span class="na">upstream_sync_repo</span><span class="pi">:</span> <span class="s">mongodb/specifications</span>
        <span class="c1"># upstream_repo_access_token: $</span>

        <span class="c1"># Set test_mode true during manual dispatch to run tests instead of the true action!!</span>
        <span class="na">test_mode</span><span class="pi">:</span> <span class="s">$</span>

    <span class="c1"># Step 3: Display a sample message based on the sync output var 'has_new_commits'</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">New commits found</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'true'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "New commits were found to sync."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">No new commits</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'false'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "There were no new commits."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show value of 'has_new_commits'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install latest mdbook</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')</span>
        <span class="s">url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"</span>
        <span class="s">mkdir mdbook</span>
        <span class="s">curl -sSL $url | tar -xz --directory=./mdbook</span>
        <span class="s">echo `pwd`/mdbook &gt;&gt; $GITHUB_PATH</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build Book</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s"># This assumes your book is in the root of your repository.</span>
        <span class="s"># Just add a `cd` here if you need to change to another directory.</span>
        <span class="s">mdbook build</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">JamesIves/github-pages-deploy-action@4.1.7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">branch</span><span class="pi">:</span> <span class="s">gh-pages</span> <span class="c1"># The branch the action should deploy to.</span>
        <span class="na">folder</span><span class="pi">:</span> <span class="s">book</span> <span class="c1"># The folder the action should deploy.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that the above is configured to run on a <a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule"><code class="language-plaintext highlighter-rouge">schedule</code></a>, so GitHub Actions will fire once a day to check if there were any updates in the upstream repository that we may want to sync.</p>

<h2 id="results">Results</h2>

<p>Since I wrote about <a href="/blog/2024/05/17/peeling-the-mongodb-drivers-onion/">“Peeling the MongoDB Drivers Onion”</a> I wanted this to be included in the book as well, so this was included as the <a href="https://github.com/alexbevi/specifications/blob/mkbook/source/README.md"><code class="language-plaintext highlighter-rouge">source/README.md</code></a> file. The rest of the contents of the specification repository were untouched and are just being rendered by <code class="language-plaintext highlighter-rouge">mdBook</code>.</p>

<p>If you want to explore MongoDB’s Driver Specifications, you can now just click on through to <a href="https://alexbevi.com/specifications/">alexbevi.com/specifications</a> (or select “Specifications” from the menu) and explore these to your heart’s content :)</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[MongoDB’s Drivers Specifications have always been available on GitHub. Since the content license is extremely permissive there are a number of things we could do to transform that work as long as we provide proper attribution.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Overhauling My Scoring Criteria</title><link href="https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria/" rel="alternate" type="text/html" title="Overhauling My Scoring Criteria" /><published>2024-08-22T05:32:09-04:00</published><updated>2024-09-10T09:02:52-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria/"><![CDATA[<p>When I started the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series I devised a scoring system that I thought would meaningfully allow me to rate the games I was playing in a fair and balanced way:</p>

<blockquote class="prompt-warning">
  <p><strong>Atmosphere</strong>: This will focus on how the game makes you feel while you’re playing it and includes inputs such as <em>Music</em>, <em>Sound Effects</em>, <em>Graphics</em>, <em>Cut Scenes</em> and overall quality.
<br />Max Points: <strong>20</strong></p>

  <p><strong>Story</strong>: Adventure games are very story-driven, and as such the story needs to be evaluated as a top-level criteria. Focus will be on <em>Quality</em>, <em>Immersion</em>, <em>Complexity</em>, <em>Progression and Pacing</em>.
<br />Max Points: <strong>25</strong></p>

  <p><strong>Experience</strong>: How much <em>Fun</em> was the game? Was the <em>Difficulty</em> too high/low? Were the puzzles a <em>Challenge</em> or were they repetitive and felt derivative and lazy? Was there any introduction for the player or are you dropped in blind?
<br />Max Points: <strong>15</strong></p>

  <p><strong>Impact</strong>: Did you enjoy the overall experience? Would you play this again? Would you want to know more about this world and its characters in subsequent adventures?
<br />Max Points: <strong>10</strong></p>
</blockquote>

<p>For the first 84 games in this series, this was the rating system I used. What I learned pretty early on was that I didn’t really have a very good set of evaluation criteria, and since my score only went up to 70 and I was generating a percentage score, it wasn’t very balanced.</p>

<p>Nothing’s set in stone, so now’s as good a time as any to correct this misstep and revise the scoring system for the remainder of the series.</p>

<h2 id="new-scoring-system">New Scoring System</h2>

<p>In an attempt to improve the overall rating system used for the series I’ve decided to expand the categories and make the total score out of 100. I’ve also included some more opinionated criteria to allow me to boost games that I personally enjoyed - even if they’re less critically acclaimed.</p>

<blockquote class="prompt-info">
  <p>[10] <strong>Graphics</strong><br />
The overall visual experience of the game can include background art, character models, game interface, cutscenes, inventory design and basically anything that you can see while playing the game.</p>

  <p>[10] <strong>Sound</strong><br />
What do you hear? Is there ambient music or background noise? If the game is voiced are the actors giving it their all or <a href="https://grammarist.com/idiom/phone-it-in/">phoning it in</a>? Are sound effects present and enhancing the experience, or jarring/distracting.</p>

  <p>[25] <strong>Plot / Progression</strong><br />
What’s the quality of the overarching story in this game? Does it grab your attention and hold it or is it sort of “just there” as a forced reason for you to interact with this virtual world? How does the plot progress, and does everything wrap up at the end? When the game is over do you feel satisfied and want to learn more about this world and its inhabitants?</p>

  <p>[15] <strong>Characters / Development</strong><br />
Is the main character interesting and engaging? Are there other characters you interact with and are they fleshed out or just hollow NPCs there to deliver basic instructions? Do the main and supporting characters add depth to the world and gaming experience and how do they grow and evolve as the game progresses?</p>

  <p>[15] <strong>Gameplay / Experience</strong><br />
This is a game … so is it fun to play? The goal is to get from some starting point to some ending point, but was this journey worth your time? Sometimes these games can be a joy to play through and sometimes they’re a slog and focus too heavily on “filler” or elements that artificially pad out play time.</p>

  <p>[10] <strong>Replayability</strong><br />
Once the game is complete would you ever find yourself itching to play it again? Was the game fun to play or experience, or offer some variety of gameplay or character selection that could entice you back for repeated playthroughs.</p>

  <p>[10] <strong>Impact / Impression</strong><br />
Final thoughts and impressions on this game as a whole. Were you left wanting more, or were you rushing to the end to get it over with.</p>

  <p>[5] <strong>Bonus / Surprise</strong><br />
Anything unexpected or notable that’s worth calling out?</p>
</blockquote>

<h2 id="scores-for-posterity">Scores (for posterity)</h2>

<p>The snapshot of the scores at the time the system was overhauled is below. As I’m going to revisit each of these scores over time, the master list - <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">sorted by score</a> - will slowly be updated.</p>

<ol>
  <li><strong>91%</strong> <a href="/blog/2024/01/20/day-of-the-tentacle/">Maniac Mansion: Day of the Tentacle (LucasArts)</a> - 1993</li>
  <li><strong>89%</strong> <a href="/blog/2023/03/10/full-throttle/">Full Throttle (LucasArts)</a> - 1995</li>
  <li><strong>89%</strong> <a href="/blog/2023/06/14/gabriel-knight-sins-of-the-fathers/">Gabriel Knight: Sins of the Fathers (Sierra On-Line)</a> - 1993</li>
  <li><strong>87%</strong> <a href="/blog/2024/04/30/the-secret-of-monkey-island/">The Secret of Monkey Island (Lucasfilm Games)</a> - 1990</li>
  <li><strong>87%</strong> <a href="/blog/2022/12/16/grim-fandango/">Grim Fandango (LucasArts)</a> - 1998</li>
  <li><strong>86%</strong> <a href="/blog/2023/02/10/beneath-a-steel-sky/">Beneath a Steel Sky (Revolution Software)</a> - 1994</li>
  <li><strong>86%</strong> <a href="/blog/2021/12/22/sanitarium/">Sanitarium (DreamForge Intertainment)</a> - 1998</li>
  <li><strong>84%</strong> <a href="/blog/2023/01/23/sam-and-max-hit-the-road/">Sam &amp; Max Hit the Road (LucasArts)</a> - 1993</li>
  <li><strong>84%</strong> <a href="/blog/2021/08/09/space-quest-the-sarien-encounter/">Space Quest: The Sarien Encounter (Sierra On-Line)</a> - 1986</li>
  <li><strong>84%</strong> <a href="/blog/2024/06/09/flight-of-the-amazon-queen/">Flight of the Amazon Queen (Interactive Binary Illusions)</a> - 1995</li>
  <li><strong>81%</strong> <a href="/blog/2021/08/06/kings-quest/">King’s Quest: Quest for the Crown (Sierra On-Line)</a> - 1984</li>
  <li><strong>80%</strong> <a href="/blog/2021/08/15/princess-tomato-in-the-salad-kingdom/">Princess Tomato in the Salad Kingdom (Hudson Soft)</a> - 1984</li>
  <li><strong>80%</strong> <a href="/blog/2021/08/16/shadowgate/">Shadowgate (ICOM Simulations)</a> - 1987</li>
  <li><strong>79%</strong> <a href="/blog/2024/01/29/innocent-until-caught/">Innocent Until Caught (Divide By Zero)</a> - 1993</li>
  <li><strong>77%</strong> <a href="/blog/2022/03/31/blue-force/">Blue Force (Tsunami Games)</a> - 1993</li>
  <li><strong>76%</strong> <a href="/blog/2023/02/13/rise-of-the-dragon/">Rise of the Dragon (Dynamix)</a> - 1990</li>
  <li><strong>73%</strong> <a href="/blog/2023/03/30/i-have-no-mouth-and-i-must-scream/">I Have No Mouth, and I Must Scream (The Dreamers Guild)</a> - 1995</li>
  <li><strong>71%</strong> <a href="/blog/2023/02/21/police-quest-2/">Police Quest II: The Vengeance (Sierra On-Line)</a> - 1988</li>
  <li><strong>70%</strong> <a href="/blog/2024/02/16/space-quest-iii/">Space Quest III: The Pirates of Pestulon (Sierra On-Line)</a> - 1989</li>
  <li><strong>69%</strong> <a href="/blog/2023/02/18/manhunter-new-york/">Manhunter: New York (Evryware)</a> - 1988</li>
  <li><strong>69%</strong> <a href="/blog/2023/07/31/tony-tough/">Tony Tough and the Night of Roasted Moths (Nayma Software, Prograph Research S.r.l.)</a> - 1999</li>
  <li><strong>67%</strong> <a href="/blog/2023/10/05/blade-runner/">Blade Runner (Westwood Studios)</a> - 1997</li>
  <li><strong>67%</strong> <a href="/blog/2022/03/15/police-quest-1/">Police Quest: In Pursuit of the Death Angel (Sierra On-Line)</a> - 1987</li>
  <li><strong>66%</strong> <a href="/blog/2021/08/03/mystery-house/">Mystery House (On-Line Systems)</a> - 1980</li>
  <li><strong>66%</strong> <a href="/blog/2022/12/31/nightshade/">Nightshade (Beam Software)</a> - 1992</li>
  <li><strong>66%</strong> <a href="/blog/2023/02/24/space-quest-2/">Space Quest II: Vohaul’s Revenge (Sierra On-Line)</a> - 1987</li>
  <li><strong>64%</strong> <a href="/blog/2022/12/19/ringworld/">Ringworld: Revenge of the Patriarch (Tsunami Games)</a> - 1992</li>
  <li><strong>64%</strong> <a href="/blog/2024/05/27/normality/">Normality (Gremlin Interactive)</a> - 1996</li>
  <li><strong>64%</strong> <a href="/blog/2023/02/01/leisure-suit-larry-2/">Leisure Suit Larry Goes Looking for Love (in Several Wrong Places) (Sierra On-Line)</a> - 1988</li>
  <li><strong>63%</strong> <a href="/blog/2023/05/18/dreamweb/">DreamWeb (Creative Reality)</a> - 1994</li>
  <li><strong>63%</strong> <a href="/blog/2021/08/30/labyrinth/">Labyrinth: The Computer Game (Lucasfilm Games)</a> - 1986</li>
  <li><strong>61%</strong> <a href="/blog/2023/06/28/snatcher/">Snatcher (Konami)</a> - 1988</li>
  <li><strong>61%</strong> <a href="/blog/2023/04/20/countdown/">Countdown (Access Software)</a> - 1990</li>
  <li><strong>59%</strong> <a href="/blog/2024/07/09/discworld/">Discworld (Teeny Weeny Games/Perfect 10 Productions)</a> - 1995</li>
  <li><strong>59%</strong> <a href="/blog/2023/11/20/darkseed/">Dark Seed (Cyberdreams)</a> - 1992</li>
  <li><strong>59%</strong> <a href="/blog/2024/02/12/the-adventures-of-willy-beamish/">The Adventures of Willy Beamish (Dynamix)</a> - 1991</li>
  <li><strong>59%</strong> <a href="/blog/2023/12/16/police-quest-iii/">Police Quest III: The Kindred (Sierra On-Line)</a> - 1991</li>
  <li><strong>57%</strong> <a href="/blog/2022/12/19/leisure-suit-larry/">Leisure Suit Larry in the Land of the Lounge Lizards (Sierra On-Line)</a> - 1987</li>
  <li><strong>57%</strong> <a href="/blog/2023/01/19/mean-streets/">Mean Streets (Access Software)</a> - 1989</li>
  <li><strong>56%</strong> <a href="/blog/2023/05/31/return-to-ringworld/">Return to Ringworld (Tsunami Games)</a> - 1994</li>
  <li><strong>56%</strong> <a href="/blog/2023/11/24/the-legend-of-kyrandia/">The Legend of Kyrandia: Fables and Fiends (Westwood Studios)</a> - 1992</li>
  <li><strong>56%</strong> <a href="/blog/2023/11/29/gateway/">Frederik Pohl’s Gateway (Legend Entertainment)</a> - 1992</li>
  <li><strong>56%</strong> <a href="/blog/2024/02/06/loom/">Loom (Lucasfilm Games)</a> - 1990</li>
  <li><strong>53%</strong> <a href="/blog/2023/09/27/ripper/">Ripper (Take-Two Interactive)</a> - 1996</li>
  <li><strong>53%</strong> <a href="/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/">Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line)</a> - 1991</li>
  <li><strong>51%</strong> <a href="/blog/2024/02/23/harvester/">Harvester (DigiFX Interactive)</a> - 1996</li>
  <li><strong>51%</strong> <a href="/blog/2023/04/16/beavis-and-butthead/">Beavis and Butt-Head in Virtual Stupidity (Viacom New Media)</a> - 1995</li>
  <li><strong>50%</strong> <a href="/blog/2023/04/11/deja-vu/">Déjà Vu: A Nightmare Comes True (ICOM Simulations)</a> - 1985</li>
  <li><strong>49%</strong> <a href="/blog/2023/03/03/duckman/">Duckman: The Graphic Adventures of a Private Dick (The Illusions Gaming Company)</a> - 1997</li>
  <li><strong>49%</strong> <a href="/blog/2023/02/15/urban-runner/">Urban Runner (Coktel Vision)</a> - 1996</li>
  <li><strong>47%</strong> <a href="/blog/2023/01/16/hopkins-fbi/">Hopkins FBI (MP Entertainment)</a> - 1998</li>
  <li><strong>47%</strong> <a href="/blog/2023/09/06/manhunter-san-francisco/">Manhunter 2: San Francisco (Evryware)</a> - 1989</li>
  <li><strong>46%</strong> <a href="/blog/2024/04/16/lure-of-the-temptress/">Lure of the Temptress (Revolution Software)</a> - 1992</li>
  <li><strong>46%</strong> <a href="/blog/2023/12/27/tass-times-in-tonetown/">Tass Times in Tonetown (Interplay Productions, Brainwave Creations)</a> - 1986</li>
  <li><strong>46%</strong> <a href="/blog/2021/08/08/ulysses-and-the-golden-fleece/">Ulysses and the Golden Fleece (On-Line Systems)</a> - 1981</li>
  <li><strong>44%</strong> <a href="/blog/2023/06/07/torins-passage/">Torin’s Passage (Sierra On-Line)</a> - 1995</li>
  <li><strong>44%</strong> <a href="/blog/2023/08/09/uninvited/">Uninvited (ICOM Simulations)</a> - 1986</li>
  <li><strong>43%</strong> <a href="/blog/2023/02/07/eternam/">Eternam (Infogrames)</a> - 1992</li>
  <li><strong>41%</strong> <a href="/blog/2022/12/21/hugos-house-of-horrors/">Hugo’s House of Horrors (Gray Design Associates)</a> - 1990</li>
  <li><strong>41%</strong> <a href="/blog/2023/04/25/kings-quest-ii/">King’s Quest II: Romancing the Throne (Sierra On-Line)</a> - 1985</li>
  <li><strong>40%</strong> <a href="/blog/2023/02/15/the-crimson-crown-further-adventures-in-transylvania/">The Crimson Crown - Further Adventures in Transylvania (Penguin Software)</a> - 1985</li>
  <li><strong>40%</strong> <a href="/blog/2024/04/25/police-quest-open-season/">Police Quest: Open Season (Sierra On-Line)</a> - 1993</li>
  <li><strong>39%</strong> <a href="/blog/2023/05/23/companions-of-xanth/">Companions of Xanth (Legend Entertainment)</a> - 1993</li>
  <li><strong>39%</strong> <a href="/blog/2024/03/20/codename-iceman/">Codename: ICEMAN (Sierra On-Line)</a> - 1989</li>
  <li><strong>39%</strong> <a href="/blog/2023/01/12/cruise-for-a-corpse/">Cruise for a Corpse (Delphine Software International)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/02/28/ecoquest/">EcoQuest: The Search for Cetus (Sierra On-Line)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/05/10/hugo-ii-whodunit/">Hugo II, Whodunit? (Gray Design Associates)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/07/15/jurassic-park/">Jurassic Park (Sega of America)</a> - 1993</li>
  <li><strong>34%</strong> <a href="/blog/2023/05/10/murder-on-the-mississippi/">Murder on the Mississippi (Activision)</a> - 1986</li>
  <li><strong>34%</strong> <a href="/blog/2024/06/14/altered-destiny/">Altered Destiny (Accolade)</a> - 1990</li>
  <li><strong>34%</strong> <a href="/blog/2023/11/14/the-black-cauldron/">The Black Cauldron (Sierra On-Line)</a> - 1986</li>
  <li><strong>34%</strong> <a href="/blog/2023/10/07/rendezvous-with-rama/">Rendezvous with Rama (Telarium)</a> - 1984</li>
  <li><strong>33%</strong> <a href="/blog/2021/08/24/transylvania/">Transylvania (Penguin Software)</a> - 1982</li>
  <li><strong>31%</strong> <a href="/blog/2023/12/08/the-dark-crystal/">The Dark Crystal (On-Line Systems)</a> - 1983</li>
  <li><strong>31%</strong> <a href="/blog/2024/03/29/the-dallas-quest/">Dallas Quest (Datasoft)</a> - 1984</li>
  <li><strong>29%</strong> <a href="/blog/2023/05/16/ace-ventura/">Ace Ventura (7th Level)</a> - 1996</li>
  <li><strong>29%</strong> <a href="/blog/2022/12/30/wizard-and-the-princess/">Wizard and the Princess (On-Line Systems)</a> - 1980</li>
  <li><strong>27%</strong> <a href="/blog/2023/02/07/kabul-spy/">Kabul Spy (Sirius Software)</a> - 1982</li>
  <li><strong>21%</strong> <a href="/blog/2024/08/06/bargon-attack/">Bargon Attack (Coktel Vision)</a> - 1992</li>
  <li><strong>19%</strong> <a href="/blog/2023/10/26/lost-in-time/">Lost in Time (Coktel Vision)</a> - 1993</li>
  <li><strong>19%</strong> <a href="/blog/2023/04/26/mission-asteroid/">Mission Asteroid (On-Line Systems)</a> - 1980</li>
  <li><strong>14%</strong> <a href="/blog/2023/10/24/adventureland/">Adventureland (Adventure International)</a> - 1982</li>
  <li><strong>13%</strong> <a href="/blog/2023/02/08/emmanuelle/">Emmanuelle (Coktel Vision)</a> - 1989</li>
  <li><strong>11%</strong> <a href="/blog/2023/03/23/geisha/">Geisha (Coktel Vision)</a> - 1990</li>
</ol>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="series" /><category term="adventure" /><summary type="html"><![CDATA[When I started the “Let’s Adventure!” series I devised a scoring system that I thought would meaningfully allow me to rate the games I was playing in a fair and balanced way:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure-banner.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bargon Attack (Coktel Vision) - 1992</title><link href="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/" rel="alternate" type="text/html" title="Bargon Attack (Coktel Vision) - 1992" /><published>2024-08-06T06:29:18-04:00</published><updated>2024-09-10T09:02:52-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/06/bargon-attack</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Bargon_Attack">Bargon Attack</a> is an adventure game, originally released in Spain and France in 1992. The cyberpunk game uses stylized art presented in a 2.5D format.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00001.png" alt="" /></p>

<p>Bargon Attack is one of the less known adventures from Coktel Vision, though it was one of the first that introduced the unique interface that was used in many Coktel games that followed. It was also one of the first of Coktel’s games to use FMV technology in cut-scenes.</p>

<p>The gameplay is a mix of science fiction, cyberpunk and comedy elements. It takes place in the near future when an alien race named Bargon conquered the Earth and enslaved its people. You take a role of the young programmer who decides to put an end to the cruel aliens. You’ll travel through 20 or so locations. Each one consists of 1 to 3 screens, similar to other Coktel games.</p>

<p>Along your travels, you’ll face dangerous creatures and some strange alien technology. There are some occasions when you can die (though the option to replay the level is always available), plus the game also features several arcade sequences.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00002.png" alt="" /></p>

<p>The game starts off with some good ol’ fashion copy protection. I assumed ScummVM would allow me to bypass this, but if you happen to play an original copy in DOSBox or something else, the <a href="https://amiga.abime.net/games/view/bargon-attack#scans">scans</a> for these colour charts aren’t hard to find.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00007.png" alt="" /></p>

<p>Once you get past the copy protection you get into the main game, which is a fairly generic point and click adventure. Moving the cursor around the screen will call out areas you can interact with, and click on those will execute the associated action.</p>

<p>Unlike most adventure games, there are only a couple of verbs available, and they tend to just be to “look” at whatever is highlighted, or to pick it up if that’s an option.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00003.png" alt="" /></p>

<p>Picking up items will change the cursor to represent the item you just picked up, but you typically can’t use it right away so you need to right click to get your original cursor back. This was a bit cumbersome and unintuitive at first, but once you realize that’s how you’re supposed to play this game it wasn’t that big of a deal.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00011.png" alt="" /></p>

<p>The purpose of the game seems to be to follow this hooded guy around that you witnessed killing someone. It turns out that he’s from Bargon (and is a Bargonian?) and through people playing the game Bargon Attack, humans have somehow allowed Bargon … to Attack.</p>

<p>I really didn’t follow the plot at all, but there’s a computer at the end you need to put a disk into that for some reason or another will save the Earth.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00012.png" alt="" /></p>

<p>There aren’t a lot of items you need to pick up and use throughout the game, but the arm unit you get early on is actually sort of an interesting tool. You can pick up various “disks” throughout the game that give the arm unit different abilities, which can help you solve puzzles or give you clues as to what to do next.</p>

<p>The programs these disks contain are “shoot”, which lets you fire a beam at something (usually an enemy). A “mutate” program allows you to transform what you aim at, and “translate” can be used to decipher Bargonian text or speech.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00016.png" alt="" /></p>

<p>You’ll use the arm unit quite a bit as it’s the main way to advance through the game. The other way to advance through the game is with a walkthrough as a lot of the puzzles just aren’t that well designed and it’s very easy to get yourself killed.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00009.png" alt="" />
<em>Get used to this screen - it’s the only one you see when you mess up</em></p>

<p>Every time you die - which will happen a lot - you get the exact same <em>Game Over</em> screen. Thankfully the game allows you to just return to the same screen you just died on to try again, so if you forgot to save for a while you typically won’t lose much progress.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00004.png" alt="" />
<em>Make sure you write this pattern down …</em></p>

<p>It’s really not all that obvious what you’re supposed to be doing at any time during this game. Though you’ll meet a couple characters here and there, there’s no dialogue or interaction to speak of so those characters are no different than any other static asset in the game.</p>

<p>The story will progress via the cutscenes as you advance from section to section, but the story also doesn’t really make all that much sense - though they’re clearly trying to make it seem like there is one.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00010.png" alt="" />
<em>Oh goody, a filler arcade sequence</em></p>

<p>To break up the monotony (I guess) there is an arcade sequence early on … assuming you are able to make your way into the water. There’s absolutely no reason for this sequence to exist other than to kill time, so you need to mash your way through a bunch of crab things before they take away enough of your “health” to trigger another <em>Game Over</em>.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00014.png" alt="" /></p>

<p>Though there is absolutely no background music, and the sound effects are annoying at best - the game’s visuals are extremely well done. There really isn’t much to do on each screen you visit, but they are nice to look at.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00019.png" alt="" /></p>

<p>Since there’s little to no dialogue in the game, plot progression occurs through cutscenes that happen between each game section. You’ll learn that the Earth is destroyed and you have to go to Bargon to put some program in their super computer.</p>

<p>If you do this you save (restore?) the planet - which ends up being your ultimate goal in the game. After a handful of unintuitive puzzles on Bargon you’ll find the computer, make your way up an elevator and put the disk in drive #3 (you do get a clue about this earlier at least).</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00024.png" alt="" /></p>

<p>Yay, the game is over! I’m not a fan of Coktel Vision games, and so far in this review series some of the lowest scores belong to their titles. Bargon Attack is the best of these games so far, but that’s not saying much.</p>

<p>The intro in the version I played was at least voice acted, so that was a nice touch as this game is mostly devoid of sound. There is no background music at any point throughout the game, and the annoying sound effects that you get occasionally don’t really improve the experience.</p>

<p>The game really isn’t fun, the story isn’t compelling and the experience is lackluster at best. I was hoping to find something interesting to support this review, but I couldn’t. If you happen to be a fan of this game though, check out the reviews at <a href="https://advgamer.blogspot.com/search/label/Bargon%20Attack">The Adventurers Guild</a> on the topic as they’re clearly meant for you ;)</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Bargon Attack</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Coktel_Vision">Coktel Vision</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Coktel Vision</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1992</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Gob">Gob</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16676"><em>How Long To Beat?</em></a></td>
      <td>3 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/bargonattack.aspx">Walkthrough</a>, <a href="https://amiga.abime.net/manual/0001-0100/42_manual0.pdf?v=85">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>21%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/bargon/scummvm-bargon-00005.png', thumb: '/images/adventure/bargon/scummvm-bargon-00005.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00006.png', thumb: '/images/adventure/bargon/scummvm-bargon-00006.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00008.png', thumb: '/images/adventure/bargon/scummvm-bargon-00008.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00013.png', thumb: '/images/adventure/bargon/scummvm-bargon-00013.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00015.png', thumb: '/images/adventure/bargon/scummvm-bargon-00015.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00017.png', thumb: '/images/adventure/bargon/scummvm-bargon-00017.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00018.png', thumb: '/images/adventure/bargon/scummvm-bargon-00018.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00020.png', thumb: '/images/adventure/bargon/scummvm-bargon-00020.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00021.png', thumb: '/images/adventure/bargon/scummvm-bargon-00021.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00022.png', thumb: '/images/adventure/bargon/scummvm-bargon-00022.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00023.png', thumb: '/images/adventure/bargon/scummvm-bargon-00023.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/13178/bargon-attack/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Coktel Vision" /><category term="Gob" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Jurassic Park (Sega of America) - 1993</title><link href="https://www.alexbevi.com/blog/2024/07/15/jurassic-park/" rel="alternate" type="text/html" title="Jurassic Park (Sega of America) - 1993" /><published>2024-07-15T17:13:20-04:00</published><updated>2024-07-17T07:34:00-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/15/jurassic-park</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/15/jurassic-park/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Jurassic_Park_(Sega_CD_video_game)">Jurassic Park</a> is a 1994 point-and-click adventure game developed and published by Sega for the Sega CD. The video game is based on the 1993 film of the same name, and includes elements from Michael Crichton’s 1990 novel Jurassic Park, which the film is based upon.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.58.58.png" alt="" /></p>

<p>The story takes place after the events of the movie/book. You are sent back to Jurassic Park to retrieve dinosaur eggs from around the park and put them in an incubator. You only have 12 hours to retrieve one egg from every species of dino in the park. Unfortunately, shortly before arriving at the park, your helicopter crashes!<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.40.13.png" alt="" /></p>

<p>I didn’t have any Sega systems when I was growing up, so having an opportunity to play some of these games on either the Genesis or Sega CD is not something I’m going to pass up. I don’t really know anything about the system, according to the <a href="https://en.wikipedia.org/wiki/Sega_CD#Technical_specifications">technical specs</a> I guess the Sega CD was just an expansion unit for the Genesis, so it’s not going to really improve the look or feel of these games - though it did have a CPU that ran 5 MHz faster than the Genesis 💨.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.56.37.png" alt="" /></p>

<p>Once you hit <code class="language-plaintext highlighter-rouge">START</code> to begin the game, your objective is very succinctly splashed across the screen, you hear the crash and the adventure begins and you get to start trying to figure out the UI and how to interact with the game world.</p>

<p>The game splits the view into 3 “strips”. The top strip shows the currently selected item/action, the direction you’re facing, how much time you have left and your health. I don’t really know what the satellite icon represented and couldn’t find anything in the <a href="https://segaretro.org/images/f/fe/Jurassicpark_mcd_us_manual.pdf">manual</a> about it either.</p>

<p>The middle half of the screen is the game view, which is typically a 360 degree view of the current location. As you move the cursor left or right you can see the game screen scroll and the direction in the top strip will update accordingly.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.48.44.png" alt="" /></p>

<p>Moving the cursor around the screen will give you an idea what you can interact with or where you can go. The cursor helpfully turns into a little hand if you can pick something up, an arrow if you can move in a certain direction, or a magnifying glass so you can inspect the thing you’ve hovered over.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 08.00.17.png" alt="" /></p>

<p>There are quite a few items you can pick up and use, though where you can use things can be a bit unintuitive. As you move around the park there are paths blocked or doors that are inaccessible but the cursor doesn’t always give you a visually appropriate cue that there’s something you need to do - such as use an item.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 07.57.02.png" alt="" />
<em>Keep your eyes peeled for that green <code class="language-plaintext highlighter-rouge">X</code> cursor change</em></p>

<p>If you’ve got the cursor icon selected (and not an item) you may get a green <code class="language-plaintext highlighter-rouge">X</code>to show up as you sweep the cursor across the screen. This is typically an indication that you can use an item on that spot, but it’s up to you to pick the right item for the situation.</p>

<p>In the case of the above screenshot of the raptor’s nest, you need to throw a rock at the boulders to cause them to cave in and scare some of the raptors to run out of the cave - allowing you to sneak in and steal their eggs.</p>

<p>Speaking of rocks, make sure you pick them ALL UP! The game doesn’t tell you how many you have, but you’ll need at least 5-6 and some puzzles involve using 2 at a time.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.33.57.png" alt="" /></p>

<p>The bottom strip of the screen shows your permanent items, such as the night vision goggles or the motion detector. The latter is extremely useful when you’re navigating an area with dinosaurs as it lets you know what direction they might attack you from.</p>

<p>If you’ve picked up any dinosaur eggs it will also let you know. This reminder is important because the goal of the game is to get those eggs back to the incubator. If you hold onto the eggs for too long, the dinosaur inside dies.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 08.10.46.png" alt="" /></p>

<p>Every time you pick up eggs you should high tail it back to the visitor center to load the eggs into the incubator. You only need to collect one sample per dinosaur, so if a few sample die along the way you still have a bit of a buffer.</p>

<p>Pausing the game will also bring up a summary that lets you know how many eggs you’ve collected, along with how many samples have died.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.45.23.png" alt="" /></p>

<p>Navigating through this game is pretty straightforward, and though figuring out which items to use where isn’t always intuitive, you can typically just cycle through all your items on a given action area and trial and error your way to a solution.</p>

<p>Picking the wrong item will give audible feedback that you chose wrong, so it’s obvious you need to try again. The one exception I found was putting the gas in the boat.</p>

<p>For this puzzle you need to fill the boat with gas, but unlike <em>every other interaction in this game</em>, you need to hold down the <code class="language-plaintext highlighter-rouge">C</code> button to <em>keep</em> filling the tank until the cursor changes indicating you can now move in that direction.</p>

<p>This threw me off for a while because I would just “use” the item and expect it to work … but apparently you had to “keep using” it in this case.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.36.04.png" alt="" /></p>

<p>Jurassic Park incorporates an arcade shooter style mechanic as well. You can pick up various weapons throughout the game that you can use on the dinosaurs to get them out of your way, or distract/stun them.</p>

<p>When you select a weapon the cursor changes to a target and your ammo will be displayed at the top of the screen. You have <em>very</em> limited ammo, and you can only replenish your tranquilizer darts <em>once</em>.</p>

<p>These arcade sequences get harder and harder as the game goes on, and you have very limited health. I’m fairly certain you can top your health up as many times as you want at the visitor center, but having to constantly backtrack to do this is a pain in the ass.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 20.05.52.png" alt="" /></p>

<p>As you move between areas you’ll sometimes get a brief animation, which acts as a screen transition with some background music.</p>

<p>The sound effects and music definitely add some ambiance, but it’s a bit weird that none of the music from the movie was included. Not sure if this was a technical limitation, an oversight or something else - but having at least one entry from the iconic soundtrack on the title screen or something would have been a welcome addition.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.01.54.png" alt="" /></p>

<p>Right from the beginning the game lets you know you only have 12 hours to complete the task of incubating one of each dinosaur species’ eggs. If you can pull this off you’ll see a helicopter fly by and land, which you’ll have to get to - but first a group of 4 “bad guys” will try to take you out.</p>

<p>This final arcade sequence is <em>really</em> hard - especially if you don’t top up your tranquilizer dart supply. I had plenty of stunner charges, but these do nothing in this scenario so going into this fight with only 15 darts was a guaranteed game over …</p>

<p>I’m not really sure why these guys are trying to prevent me from getting to the helicopter, but for this sequence I was extremely grateful to be playing the game on an emulator. I was using save states pretty heavily here, and ended up using pause/frame-advance for the last enemy just to finish the game with like 1 health bar left.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.03.51.png" alt="" />
<em>Once the credits roll you’ll be greeted by the same “Game Over” screen as if you’d died</em></p>

<p>For an adventure game, Jurassic Park is definitely interesting. It’s sort of a cross between Myst and an arcade-style shooter. The fact that you’re on a timer adds a sense of urgency to the game, but your objectives are clear from the outset so you know what you’re trying to accomplish at all times.</p>

<p>My biggest issue with the game is how unintuitive a lot of the puzzles are. Getting the raptor key by throwing rocks into the water to make the water level rise wasn’t obvious - and once I did finally try throwing a rock in there it turns out I needed at least two rocks, so I had to backtrack (or reload) to make sure I came back to the area with the right items.</p>

<p>The T-Rex fight didn’t make a lot of sense either. The info disc you can watch in-game indicates you should shoot him in the cheek to stun him, so you do that a whole bunch but I don’t really know how you’d come to the conclusion you should use the gas grenades on him twice to get him to raise his head so you can dash under him into the sewers.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.10.00.png" alt="" />
<em>Jump to any screen in the game using the handy debug menu</em></p>

<p>While researching this game I stumbled across <a href="https://www.mobygames.com/person/63182/doug-lanford/">Doug Landford</a>’s website, where he shares <a href="https://www.opusgames.com/games/jpark/jp.html">a blog post</a> about his experience working on this game - including how you can trigger the debug menu.</p>

<p>I enjoy learning about the behind the scenes experiences of the teams that build these games, as it can shed some light on how we ended up with the final product. It seems this game used <a href="https://en.wikipedia.org/wiki/QSound">QSound</a> to augment the audio, but this isn’t something I was able to experience (not sure if it’s emulated or not - but I don’t have a stereo setup anyway).</p>

<p>Overall the game isn’t bad, but I can’t imagine there’s much of an audience for this. Maybe if the game had taken advantage of the <a href="https://segaretro.org/Sega_Mouse">Sega mouse</a> it might have made the arcade sequences a bit more fun, but as an “adventure game” I think you can pass it up.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Jurassic Park</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sega_of_America">Sega of America</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sega_of_America">Sega</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>December 17, 1993</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Sega CD</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/4896"><em>How Long To Beat?</em></a></td>
      <td>5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>Sega CD via <a href="http://openemu.org/">OpenEmu</a> &gt; <a href="https://segaretro.org/Genesis_Plus_GX">Genesis Plus GX</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://gamefaqs.gamespot.com/genesis/563328-jurassic-park/faqs/5334">Walkthrough</a>, <a href="https://segaretro.org/images/f/fe/Jurassicpark_mcd_us_manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>36%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.42.56.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.42.56.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.43.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.43.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.45.18.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.45.18.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.48.18.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.48.18.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 20.08.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 20.08.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 20.09.12.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 20.09.12.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-12 06.42.43.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-12 06.42.43.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 19.56.55.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 19.56.55.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.01.37.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.01.37.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.17.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.17.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.25.13.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.25.13.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.28.07.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.28.07.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-15 17.03.36.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-15 17.03.36.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/12129/jurassic-park/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sega" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/jp/Jurassic%20Park%202024-07-11%2019.39.35.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/jp/Jurassic%20Park%202024-07-11%2019.39.35.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Call Stack, But Make It Async!</title><link href="https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async/" rel="alternate" type="text/html" title="Call Stack, But Make It Async!" /><published>2024-07-12T11:15:50-04:00</published><updated>2024-07-16T09:21:46-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async/"><![CDATA[<blockquote class="prompt-tip">
  <p>Written by Neal Beeken (<a href="https://nbbeeken.github.io/">Blog</a>, <a href="https://github.com/nbbeeken">GitHub</a>) - Canonical URL is at <a href="https://medium.com/@MongoDB/call-stack-but-make-it-async-f912cb895ebd">medium.com</a></p>
</blockquote>

<p>In a recent release of the MongoDB Node.js driver (<a href="https://github.com/mongodb/node-mongodb-native/releases/tag/v6.5.0">v6.5.0</a>), the team completed the effort of getting all our asynchronous operations to report an accurate asynchronous stack trace to assist in pinpointing error origination. Here, I’ll walk you through what this feature of JavaScript is and how to obtain it at the low price of zero cost.</p>

<h2 id="calls-and-how-to-stack-them-">Calls and how to stack them 📚</h2>

<p>First, what is a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack">call stack</a>? A call stack is a hidden data structure that stores information about the active subroutines of a program - active subroutines being functions that have been called but have yet to complete execution and return control to the caller. The main function of the call stack is to keep track of the point to which each active subroutine should return control when it finishes executing.</p>

<p>Let’s go through an example. Take a program that parses a string from its arguments that is an equation like “2+2” and computes the result:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nf">main</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">splitString</span><span class="p">()</span>
      <span class="o">-&gt;</span> <span class="nf">stringLength</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">stringToNumber</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">add</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">printResult</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="k">return</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Most of us are familiar with the above procedural paradigm (whether from JavaScript, C, Java, or Python) where each step in the program is synchronous, so our call stack is a clear ordering of dependent procedures. For example, if <code class="language-plaintext highlighter-rouge">stringLength</code> fails, the call stack would contain <code class="language-plaintext highlighter-rouge">stringLength</code>, <code class="language-plaintext highlighter-rouge">splitString</code>, <code class="language-plaintext highlighter-rouge">parseString</code>, and <code class="language-plaintext highlighter-rouge">main</code> as active procedures that have yet to return to their callers. The error system of our runtime uses this stack trace to generate a helpful error trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:35
    throw new Error('cannot get string length')
          ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:35:11)
    at splitString (file://addNumbers.mjs:17:17)
    at parseString (file://addNumbers.mjs:11:19)
    at main (file://addNumbers.mjs:4:5)
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="the-async-wrench-">The async wrench 🔧</h3>
<p>Everything changes when we shift to an asynchronous programming model, as the introduction of asynchronous work means we no longer have strictly dependent procedures. Essentially, async programming is about setting up tasks and adding handling that will be invoked sometime later when the task is complete.</p>

<p>Let’s add I/O (a read from standard in) into our program to see how this changes our call stack:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nf">main</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="nf">readStdin</span><span class="p">(</span><span class="nx">handleUserInput</span><span class="p">)</span>
<span class="c1">// When the user finishes typing</span>
<span class="nf">handleUserInput</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">splitString</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">stringLength</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, main’s only job is to ask the runtime to read from stdin and invoke a function of our choice when it is done doing so. This means main is no longer an active procedure; it returns, leaving it up to the runtime to keep the process running until it has input from stdin to hand back to our function <code class="language-plaintext highlighter-rouge">handleUserInput</code>.</p>

<p>Here’s what the stack trace looks like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:42
    throw new Error('cannot get string length')
    ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:42:11)
    at splitString (file://addNumbers.mjs:24:17)
    at parseString (file://addNumbers.mjs:18:19)
    at ReadStream.handleUserInput (file://addNumbers.mjs:11:5)
    at ReadStream.emit (node:events:511:28)
    at addChunk (node:internal/streams/readable:332:12)
    at readableAddChunk (node:internal/streams/readable:305:9)
    at Readable.push (node:internal/streams/readable:242:10)
    at TTY.onStreamRead (node:internal/stream_base_commons:190:23)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>No sign of <code class="language-plaintext highlighter-rouge">main</code>, only <code class="language-plaintext highlighter-rouge">handleUserInput</code>.</p>

<p>This is a common hazard of asynchronous programming: You are always replacing the record of your active procedures as they are all performing task setup that completes and the callbacks they created are later invoked by the runtime.</p>

<h2 id="javascript-">JavaScript 💚</h2>

<p>Asynchronous programming has always been at the heart of JS and is one of the central selling points of using Node.js.</p>

<p>In 2015, the first <a href="https://nodejs.org/en/blog/release/v4.2.0">Long Term Support version of Node.js was released</a>, and with it came a stable standard library that popularized a common pattern for handling asynchronous tasks. All asynchronous tasks would accept a callback as their last argument, with the callback taking at least two arguments: an error and the task’s result. The pattern was that if the first argument was <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthy</a> (an error object), the task failed, and if it was not, then the second argument would contain the result.</p>

<p>Here’s a simplified example of a function that reads a file:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">filename.txt</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">file contents</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The Node.js callback pattern is ubiquitous and familiar, resulting in many popular libraries - such as the <a href="https://www.mongodb.com/docs/drivers/node/current/">MongoDB Node.js driver</a> - adopting it, as well.</p>

<h3 id="no-throw-only-callback-">No throw, only callback 🐕</h3>

<p><img src="/images/js-cupcake.png" alt="" />
<em>credit: <a href="https://cupcakelogic.tumblr.com/post/124392369931/she-is-still-learning">cupcakelogic</a></em></p>

<p>A challenge associated with the callback pattern is the requirement that the implementer keep in mind execution expectations manually. Otherwise, they can end up with a confusing order of operations.</p>

<p>Typically, this is something that should be abstracted to the runtime or language, which can be broken down as follows:</p>

<p><strong>Error handling</strong></p>

<p>Properly implementing the callback pattern means errors are passed as variables to a chain of handlers so they eventually reach the top-level initiator of the async operation. The syntax and keywords <code class="language-plaintext highlighter-rouge">throw</code>/<code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code> can no longer be used for control flow.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">try</span> <span class="p">{</span>
  <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">filename</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ? */</span> <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// So what's the truth?</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Runtime order</strong></p>

<p>Callbacks also demand the developers ensure execution order is consistent. If a file is successfully read and the contents are returned in the callback passed to <code class="language-plaintext highlighter-rouge">readFile</code>, that callback will always run after the code that is on the line following <code class="language-plaintext highlighter-rouge">readFile</code>. However, say <code class="language-plaintext highlighter-rouge">readFile</code> is passed an invalid argument, like a number instead of a string for the path. When it invokes the callback with an invalid argument error, we would still expect that code to run in the same order as the success case:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">filename</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
       <span class="nf">callback</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">invalid argument</span><span class="dl">'</span><span class="p">))</span>
       <span class="k">return</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="c1">// open &amp; read file ...</span>
<span class="p">}</span>

<span class="nf">readFile</span><span class="p">(</span><span class="mh">0xF113</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">cannot read file</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
       <span class="k">return</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">contents:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">starting to read file</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The code above prints:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>cannot read file Error: invalid argument
starting to read file
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Whereas when I change <code class="language-plaintext highlighter-rouge">readFile</code> to be called with a non-existent path:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>starting to read file
cannot read file Error: /notAPath.txt Does Not Exist
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is unexpected! The implementer of <code class="language-plaintext highlighter-rouge">readFile</code> calls the callback synchronously for an invalid type so <code class="language-plaintext highlighter-rouge">readFile</code> does not return until that callback completes. It is fairly easy to write callback-accepting functions that inconsistently order their execution in this way.</p>

<h3 id="promises-">Promises 🤞</h3>

<p>Introducing a more structured approach: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promises</a>. A promise is an object that handles the resolution or rejection of an async operation, mitigating the above issues and allowing for many async operations to be chained together without needing to explicitly pass a finalizer callback through to each API that would indicate when all tasks are done.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">// callbacks</span>
<span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nf">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="nx">client</span>
   <span class="p">.</span><span class="nf">db</span><span class="p">()</span>
   <span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span>
   <span class="p">.</span><span class="nf">findOne</span><span class="p">({},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
     <span class="k">return</span> <span class="nf">done</span><span class="p">();</span>
   <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// promises</span>
<span class="nx">client</span>
 <span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
 <span class="p">.</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">).</span><span class="nf">findOne</span><span class="p">({}))</span>
 <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nb">document</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">));</span>
 <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note how in the promise code there is one error handling case as opposed to the two in the callback case. The ability to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining">chain promises</a> allows us to treat many async operations as one. The <code class="language-plaintext highlighter-rouge">catch</code> handler would be called if either the <code class="language-plaintext highlighter-rouge">connect</code> or the <code class="language-plaintext highlighter-rouge">find</code> methods were to throw an error. This chaining is convenient, but when writing JavaScript today, we do even better by using special syntax for handling promises.</p>

<h3 id="enter-asyncawait-">Enter <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> 🔁</h3>

<p>Mid-2017, JavaScript engines shipped support for <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> syntax, allowing programmers to write asynchronous operations in a familiar procedural format. Using <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> allows the programmer to encode their logical asynchronous dependencies right into the syntax of the language.</p>

<p>Let’s return to our user input example, as we can now “await” the input which keeps <code class="language-plaintext highlighter-rouge">main</code> as the active procedure that began the task to read from standard in.</p>

<blockquote class="prompt-info">
  <p>“For <code class="language-plaintext highlighter-rouge">await</code>, the suspend and resume points coincide and so we not only know where we would continue, but by coincidence, we also know where we came from.”</p>

  <p>source: <a href="https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit#heading=h.e6lcalo0cl47">Zero-cost async stack traces</a></p>
</blockquote>

<p>When the input is available, <code class="language-plaintext highlighter-rouge">readStdin</code> will resolve and we can continue with our parsing.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="nf">main</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="k">await</span> <span class="nf">readStdin</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:43
    throw new Error('cannot get string length')
          ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:43:11)
    at splitString (file://addNumbers.mjs:25:17)
    at parseString (file://addNumbers.mjs:19:19)
    at main (file://addNumbers.mjs:9:5)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async file://addNumbers.mjs:62:1
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When the JavaScript engine reaches the “await”, <code class="language-plaintext highlighter-rouge">main</code> is suspended. The engine is free to handle other tasks while the read is waiting for our user to type. We can now encode into the syntax of the function that it will suspend until some other task completes, and when it continues, it maintains the context of everything that was in scope when it started.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">try</span> <span class="p">{</span>
 <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nb">document</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">).</span><span class="nf">findOne</span><span class="p">({});</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote class="prompt-info">
  <p>“The fundamental difference between <code class="language-plaintext highlighter-rouge">await</code> and manually constructed promises is that <code class="language-plaintext highlighter-rouge">await X()</code> <strong>suspends</strong> execution of the current function, while <code class="language-plaintext highlighter-rouge">promise.then(X)</code> will <strong>continue</strong> execution of the current function after adding the <code class="language-plaintext highlighter-rouge">X</code> call to the callback chain. In the context of stack traces, this difference is pretty significant.”</p>

  <p>source: <a href="https://mathiasbynens.be/notes/async-stack-traces">Why await beats Promise#then() · Mathias Bynens</a></p>
</blockquote>

<h2 id="sample-stack-traces">Sample Stack Traces</h2>

<p>Prior to completing the <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> conversion down to the internal network layer of the driver, our error stack would begin at the point of converting a server’s error message into a JavaScript, such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>MongoServerError: Failing command via 'failCommand' failpoint
    at Connection.onMessage (./mongodb/lib/cmap/connection.js:231:30)
    at MessageStream.&lt;anonymous&gt; (./mongodb/lib/cmap/connection.js:61:60)
    at MessageStream.emit (node:events:520:28)
    at processIncomingData (./mongodb/lib/cmap/message_stream.js:125:16)
    at MessageStream._write (./mongodb/lib/cmap/message_stream.js:33:9)
    at writeOrBuffer (node:internal/streams/writable:564:12)
    at _write (node:internal/streams/writable:493:10)
    at Writable.write (node:internal/streams/writable:502:10)
    at Socket.ondata (node:internal/streams/readable:1007:22)
    at Socket.emit (node:events:520:28)
                    ^-- Sadness, that's not my code...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, post v6.5.0, the stack trace points directly back to the origination of an operation (we see you <code class="language-plaintext highlighter-rouge">main.js</code>!):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>MongoServerError: Failing command via 'failCommand' failpoint
    at Connection.sendCommand (./mongodb/lib/cmap/connection.js:290:27)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Connection.command (./mongodb/lib/cmap/connection.js:313:26)
    at async Server.command (./mongodb/lib/sdam/server.js:167:29)
    at async FindOperation.execute (./mongodb/lib/operations/find.js:34:16)
    at async tryOperation (./mongodb/lib/operations/execute_operation.js:192:20)
    at async executeOperation (./mongodb/lib/operations/execute_operation.js:69:16)
    at async FindCursor._initialize (./mongodb/lib/cursor/find_cursor.js:51:26)
    at async FindCursor.cursorInit (./mongodb/lib/cursor/abstract_cursor.js:471:27)
    at async FindCursor.fetchBatch (./mongodb/lib/cursor/abstract_cursor.js:503:13)
    at async FindCursor.next (./mongodb/lib/cursor/abstract_cursor.js:228:13)
    at async Collection.findOne (./mongodb/lib/collection.js:274:21)
    at async main (./mongodb/main.js:19:3)
                   ^-- Yay, that's my code!
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<p><strong>Additional Resources</strong></p>

<ul>
  <li><a href="https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit">Zero-cost async stack traces</a></li>
  <li><a href="https://github.com/tc39/proposal-error-stacks">tc39/proposal-error-stacks</a></li>
  <li><a href="https://v8.dev/docs/stack-trace-api">Stack trace API</a></li>
  <li><a href="https://v8.dev/blog/modern-javascript#proper-tail-calls">ES2015, ES2016, and beyond · Tail Calls · V8</a></li>
  <li><a href="https://v8.dev/blog/fast-async">Faster async functions and promises · V8</a></li>
  <li><a href="https://mathiasbynens.be/notes/async-stack-traces">Asynchronous stack traces: why await beats Promise#then() · Mathias Bynens</a></li>
</ul>]]></content><author><name>Neal Beeken</name></author><category term="Programming" /><category term="javascript" /><category term="node" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[Written by Neal Beeken (Blog, GitHub) - Canonical URL is at medium.com]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/nodejs-banner.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/nodejs-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995</title><link href="https://www.alexbevi.com/blog/2024/07/09/discworld/" rel="alternate" type="text/html" title="Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995" /><published>2024-07-09T07:06:16-04:00</published><updated>2024-07-17T07:34:00-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/09/discworld</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/09/discworld/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Discworld_(video_game)">Discworld</a> is a point-and-click adventure game developed by Teeny Weeny Games and Perfect 10 Productions and published by Psygnosis. It is based on <a href="https://en.wikipedia.org/wiki/Terry_Pratchett">Terry Pratchett</a>’s novels of the same name.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00011.png" alt="" /></p>

<p>This adventure game puts the player in the shoes of Rincewind, a wizard whose sole purpose in life is to stay alive. He appears to be very good at it as well, because apparently the universe has decided to continuously challenge him. The game takes place in the humorous fantasy world called the Discworld, as it is actually a flat disc carried on the backs of four gigantic elephants, which themselves stand on the back of an even larger turtle.</p>

<p>The story is loosely based on the <a href="https://en.wikipedia.org/wiki/Guards!_Guards!">novel “Guards! Guards!”</a>. Both in the book and the game, a dragon is summoned by a group of mysterious conspirators and now terrorizes the city state of Ankh-Morpork. Being the most expendable wizard of the Unseen University, Rincewind is given the task to get rid of the beast (only in the game though; in the book, the city’s nightwatch has to deal with the problem).<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00015.png" alt="" /></p>

<p>Discworld is a pretty typical point and click adventure from the mid-90s: the game starts with a brief intro sequence, you’re introduced to the protagonist, you’re given the first (of likely many) fetch quests which you’ll need to complete and you’re on your way.</p>

<p>Over the course of four acts your task is to rid the Discworld of the dragon that the secret brotherhood has summoned. As a wizard of Unseen University, the Archchancellor has decided you’re up to this task so first you’ll need to collect the various elements from around Ankh-Morpork that he needs to build a “dragon detector”.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00005.png" alt="" /></p>

<p>Every time you leave an area of the game you’ll be returned to the map screen, which is how you navigate between the various game locations. There are a few more locations beyond the main map, but the majority of the game takes place here (both in the past, and in the present).</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00010.png" alt="" /></p>

<p>Throughout the course of the game you’ll pick up <em>a lot</em> of items. Luckily for Rincewind you’re always accompanied by your trusty luggage - which is a treasure chest with a lot of legs. I remember vaguely reading these books when I was a kid and the traveling treasure chest standing out to me as a really interesting character, so I was really hoping it would play a big part in this game once it was introduced.</p>

<p>When you find a new item you can pick up you’ll have the option of adding it to the chest or Rincewind’s inventory. The chest has unlimited storage, whereas Rincewind only has 4 “slots” that you can use.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00013.png" alt="" /></p>

<p>Inventory management plays a pretty large role in this game as there are several puzzles that require Rincewind to take items with him to a location the chest can’t access. Typically it’s not obvious what you need to bring with you and the will involve trial and error, backtracking and repetition.</p>

<p>Speaking of backtracking, that’s about 90% of the game. You typically need to talk to everyone you possibly can on every screen to get a sense of what fetch quest they’re going to send you on, then head off to fetch said maguffin.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00007.png" alt="" /></p>

<p>The dialogue system is reminiscent of games of this era such as <a href="/blog/2023/01/23/sam-and-max-hit-the-road/">Sam &amp; Max Hit the Road</a> where a row of icons will be presented that represent various interactions that according to the <a href="https://archive.org/details/discworld-manual/page/n7/mode/2up">manual</a> represent actions/moods such as <code class="language-plaintext highlighter-rouge">GREETING</code>, <code class="language-plaintext highlighter-rouge">QUESTION</code>, <code class="language-plaintext highlighter-rouge">SARCASM</code>and <code class="language-plaintext highlighter-rouge">ANGER</code>.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00009.png" alt="" /></p>

<p>Though the gameplay itself can be a bit tedious, the character interactions and descriptions of the world you’re engaging with are fantastic. <a href="https://en.wikipedia.org/wiki/Monty_Python">Monty Python</a>’s <a href="https://en.wikipedia.org/wiki/Eric_Idle">Eric Idle</a> voices Rincewind, and really brings the character to life as a dry, witty British stereotype.</p>

<p>There is ever-present <a href="https://www.youtube.com/watch?v=_dxSji16tOc&amp;list=PL9434353ADDF48CD6">background music</a> playing throughout the game, but it just sort of fades into the background. I don’t consider this a bad thing for ambient music as it means it’s essentially just doing it’s job.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00019.png" alt="" /></p>

<p>In order for Rincewind to solve the mystery of who stole the Dragon Summoning book, uncover the identities of the members of the brotherhood and retrieve the various gold trinkets the dragon has requested, he’ll have to travel back in time.</p>

<p>This is done through the University’s library (following a long series of fetch quests) that opens a door to L-Space. Once you’ve accessed L-Space a new series of puzzles need to be solved - many of them involving making changes in the past to impact the placement or availability of things in the present.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00020.png" alt="" /></p>

<p>I really liked the mechanic, but found myself getting lost or confused or having to repeatedly go back and forth between the past and preset trying ot suss out exactly what it is I’m trying to do.</p>

<p>Discworld does not hold your hand. The clues can be vague and require you to really think. I don’t believe any knowledge of the books is required to be successful, but I’m sure it couldn’t hurt.</p>

<p>For example, to get the password to the thieve’s hideout you need to turn the drainpipe, hide, then listen to the pipe with a glass. If you don’t use the glass a long sequence plays out that doesn’t make it obvious you <em>didn’t</em> get the password until you try and get into the hideout.</p>

<p>You then need to repeat this trying various items on the drainpipe to see if anything will happen.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00024.png" alt="" /></p>

<p>Trying everything on everything (including every item on every other item) can be a requirement to progression. There are just so many items you’ll find, an the solution to many puzzles requires either a single item or an item combination puzzle to be solved first - and the solutions are typically not obvious.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00023.png" alt="" /></p>

<p>This is definitely not a game for kids. There are allusions to adult themes, the writing is complex, the humour is more nuanced and you really have to pay attention to your surroundings and all dialogue to make any progress.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00031.png" alt="" /></p>

<p>I seem to remember playing this game as a teenager and just not being able to get into it. I was a big Monty Python fan (who wasn’t in the 90’s) so Eric Idle voicing a character really appealed to me … but I just couldn’t make any progress.</p>

<p>If you’re playing in ScummVM there are a <a href="https://bugs.scummvm.org/query?game=Discworld&amp;status=new&amp;status=pending&amp;order=priority">number of known bugs</a>, though the game is not really affected too badly. I did hit the <a href="https://bugs.scummvm.org/ticket/10659">Act 4 missing guard crash</a>, but that is easily avoidable by just not engaging a clearly missing background character in conversation.</p>

<p>I really love Terry Pratchett’s writing style and have previously read <a href="https://en.wikipedia.org/wiki/The_Colour_of_Magic">The Colour of Magic</a>. Having now played through this game I definitely feel like firing up the eReader and diving back into the world of Ankh-Morpork.</p>

<p>There are better adventure games out there that would likely be more approachable, but the story and writing of Discworld definitely stands out.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Discworld</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Perfect_Entertainment">Teeny Weeny Games/Perfect 10 Productions</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Psygnosis">Psygnosis</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Mac, PlayStation, Sega Saturn</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Tinsel">Tinsel</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/2589"><em>How Long To Beat?</em></a></td>
      <td>11 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/discworld">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>14</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>19</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>59%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/dw1/scummvm-dw-cd-00001.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00001.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00002.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00002.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00003.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00003.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00004.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00004.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00006.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00006.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00008.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00008.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00012.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00012.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00014.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00014.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00016.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00016.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00017.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00017.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00018.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00018.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00021.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00021.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00022.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00022.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00025.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00025.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00026.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00026.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00027.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00027.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00028.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00028.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00029.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00029.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00030.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00030.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/184/discworld/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Tinsel" /><category term="Teeny Weeny Games/Perfect 10 Productions" /><category term="Psygnosis" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>