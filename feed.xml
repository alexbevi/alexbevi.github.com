<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.alexbevi.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.alexbevi.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-05-21T13:52:10-04:00</updated><id>https://www.alexbevi.com/feed.xml</id><title type="html">ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle><entry><title type="html">Peeling the MongoDB Drivers Onion</title><link href="https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion/" rel="alternate" type="text/html" title="Peeling the MongoDB Drivers Onion" /><published>2024-05-17T12:45:06-04:00</published><updated>2024-05-21T13:51:32-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/17/peeling-the-mongodb-drivers-onion/"><![CDATA[<p>The modern MongoDB driver consists of a number of components, each of which are thoroughly documented in the <a href="https://github.com/mongodb/specifications">Specifications</a> repository. Though this information is readily available and extremely helpful, what it lacks is a high level overview to tie the specs together into a cohesive picture of what a MongoDB driver is.</p>

<p>Architecturally an implicit hierarchy exists within the drivers, so expressing drivers in terms of an <a href="https://en.wikipedia.org/wiki/Onion_model">onion model</a> feels appropriate.</p>

<h2 id="layers-of-the-onion">Layers of the Onion</h2>

<p><img src="/images/drivers-onion.png" alt="" /></p>

<p>The <em>“drivers onion”</em> is meant to represent how various concepts, components and APIs can be layered atop each other to build a MongoDB driver from the ground up, or to help understand how existing drivers have been structured. Hopefully this representation of MongoDB’s drivers helps provide some clarity, as the complexity of these libraries - like the onion above - could otherwise bring you to tears.</p>

<h3 id="serialization">Serialization</h3>

<p>At their lowest level all MongoDB drivers will need to know how to work with <a href="https://bsonspec.org/">BSON</a>. BSON (short for “Binary JSON”) is a bin­ary-en­coded serialization of <a href="https://www.json.org/json-en.html">JSON</a>-like documents, and like JSON, it sup­ports the nesting of arrays and documents. BSON also contains extensions that al­low representation of data types that are not part of the <a href="https://datatracker.ietf.org/doc/html/rfc7159">JSON spec</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://bsonspec.org/spec.html">BSON</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/objectid.rst">ObjectId</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.md">Decimal128</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/uuid.rst">UUID</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/dbref.md">DBRef</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/extended-json.rst">Extended JSON</a></p>
</blockquote>

<h3 id="communication">Communication</h3>

<p>Once BSON documents can be created and manipulated, the foundation for interacting with a MongoDB host process has been laid. Drivers communicate by sending <a href="https://www.mongodb.com/docs/manual/reference/command/">database commands</a> as serialized BSON documents using MongoDB’s <a href="https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/">wire protocol</a>.</p>

<p>From the provided connection string and options a socket connection is established to a host, which an initial handshake verifies is in fact a valid MongoDB connection by sending a simple <a href="https://www.mongodb.com/docs/manual/reference/command/hello/"><code class="language-plaintext highlighter-rouge">hello</code></a>. Based on the response to this first command a driver can continue to establish and authenticate connections.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.md"><code class="language-plaintext highlighter-rouge">OP_MSG</code></a>, <a href="https://github.com/mongodb/specifications/blob/master/source/run-command/run-command.rst">Command Execution</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-string/connection-string-spec.md">Connection String</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/uri-options/uri-options.md">URI Options</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/ocsp-support/ocsp-support.rst">OCSP</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst">Initial Handshake</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/compression/OP_COMPRESSED.md">Wire Compression</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/socks5-support/socks5.rst">SOCKS5</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/initial-dns-seedlist-discovery/initial-dns-seedlist-discovery.md">Initial DNS Seedlist Discovery</a></p>
</blockquote>

<h3 id="connectivity">Connectivity</h3>

<p>Now that a valid host has been found, the cluster’s topology can be discovered and monitoring connections can be established. Connection pools can then be created and populated with connections. The monitoring connections will subsequently be used for ensuring operations are routed to available hosts, or hosts that meet certain criteria (such as a configured <a href="https://www.mongodb.com/docs/upcoming/core/read-preference/">read preference</a> or acceptable latency window).</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst">SDAM</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md">CMAP</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/load-balancers/load-balancers.md">Load Balancer Support</a></p>
</blockquote>

<h3 id="authentication">Authentication</h3>

<p>Establishing and monitoring connections to MongoDB ensures they’re available, but MongoDB server processes typically will require the connection to be <a href="https://www.mongodb.com/docs/manual/core/authentication/">authenticated</a> before commands will be accepted. MongoDB offers many authentication mechanisms such as <a href="https://www.mongodb.com/docs/manual/core/security-scram">SCRAM</a>, <a href="https://www.mongodb.com/docs/manual/core/security-x.509/">x.509</a>, <a href="https://www.mongodb.com/docs/manual/core/kerberos/">Kerberos</a>, <a href="https://www.mongodb.com/docs/manual/core/security-ldap/">LDAP</a>, <a href="https://www.mongodb.com/docs/manual/core/security-oidc/">OpenID Connect</a> and <a href="https://www.mongodb.com/docs/atlas/security/passwordless-authentication/">AWS IAM</a>, which MongoDB drivers support using the <em><a href="https://www.ietf.org/rfc/rfc4422.txt">Simple Authentication and Security Layer</a></em> (SASL) framework.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/auth/auth.md">Authentication</a></p>
</blockquote>

<h3 id="availability">Availability</h3>

<p>All client operations will be serialized as BSON and sent to MongoDB over a connection that will first be checked out of a connection pool. Various monitoring processes exist to ensure a driver’s internal state machine contains an accurate view of the cluster’s topology so that read and write requests can always be appropriately routed according to MongoDB’s <a href="https://www.mongodb.com/docs/manual/core/read-preference-mechanics/">server selection algorithm</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-monitoring.md">Server Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/polling-srv-records-for-mongos-discovery/polling-srv-records-for-mongos-discovery.rst"><code class="language-plaintext highlighter-rouge">SRV</code> Polling for mongos Discovery</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md">Server Selection</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.md">Max Staleness</a></p>
</blockquote>

<h3 id="resilience">Resilience</h3>

<p>At their core, database drivers are client libraries meant to facilitate interactions between an application and the database. MongoDB’s drivers are no different in that regard, as they abstract away the underlying serialization, communication, connectivity, and availability functions required to programmatically interact with your data.</p>

<p>To further enhance the developer experience while working with MongoDB, various resilience features can be added based on <a href="https://www.mongodb.com/docs/manual/reference/server-sessions/">logical sessions</a> such as <a href="https://www.mongodb.com/docs/manual/core/retryable-writes">retryable writes</a>, <a href="https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#std-label-causal-consistency">causal consistency</a>, and <a href="https://www.mongodb.com/docs/manual/core/transactions/">transactions</a>.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> Retryability (<a href="https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md">Reads</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md">Writes</a>), <a href="https://github.com/mongodb/specifications/blob/master/source/client-side-operations-timeout/client-side-operations-timeout.md">CSOT</a>, Consistency (<a href="https://github.com/mongodb/specifications/blob/master/source/sessions/driver-sessions.md">Sessions</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/causal-consistency/causal-consistency.md">Causal Consistency</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/sessions/snapshot-sessions.md">Snapshot Reads</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/transactions/transactions.md">Transactions</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/transactions-convenient-api/transactions-convenient-api.rst">Convenient Transactions API</a>)</p>
</blockquote>

<h3 id="programmability">Programmability</h3>

<p>Now that we can serialize commands and send them over the wire through an authenticated connection we can begin actually manipulating data. Since all database interactions are in the form of commands, if we wanted to remove a single document we might issue a <a href="https://www.mongodb.com/docs/manual/reference/command/delete"><code class="language-plaintext highlighter-rouge">delete</code> command</a> such as the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nf">runCommand</span><span class="p">(</span>
  <span class="p">{</span>
     <span class="na">delete</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span>
     <span class="na">deletes</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">q</span><span class="p">:</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">D</span><span class="dl">"</span> <span class="p">},</span> <span class="na">limit</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">]</span>
  <span class="p">}</span>
<span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though not exceedingly complex, a better developer experience can be achieved through more single-purpose APIs. This would allow the above example to be expressed as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">orders</span><span class="p">.</span><span class="nf">deleteMany</span><span class="p">({</span> <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">D</span><span class="dl">"</span> <span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To provide a cleaner and clearer developer experience, many specifications exist to describe how these APIs should be consistently presented across driver implementations, while still providing the flexibility to make APIs more idiomatic for each language.</p>

<p>Advanced security features such as <a href="https://www.mongodb.com/docs/manual/core/csfle/">client-side field level encryption</a> are also defined at this layer.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> Resource Management (<a href="https://github.com/mongodb/specifications/blob/master/source/enumerate-databases.rst">Databases</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst">Collections</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/index-management/index-management.md">Indexes</a>), Data Management (<a href="https://github.com/mongodb/specifications/blob/master/source/crud/crud.md">CRUD</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/collation/collation.md">Collation</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server_write_commands.rst">Write Commands</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst">Bulk API</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/crud/bulk-write.md">Bulk Write</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst">R/W Concern</a>), Cursors (<a href="https://github.com/mongodb/specifications/blob/master/source/change-streams/change-streams.md">Change Streams</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/find_getmore_killcursors_commands.rst"><code class="language-plaintext highlighter-rouge">find</code>/<code class="language-plaintext highlighter-rouge">getMore</code>/<code class="language-plaintext highlighter-rouge">killCursors</code></a>), <a href="https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.md">GridFS</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/versioned-api/versioned-api.rst">Stable API</a>, Security (<a href="https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md">Client Side Encryption</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/subtype6.md">BSON Binary Subtype 6</a>)</p>
</blockquote>

<h3 id="observability">Observability</h3>

<p>With database commands being serialized and sent to MongoDB servers and responses being received and deserialized, our driver can be considered fully functional for most read and write operations. As MongoDB drivers abstract away most of the complexity involved with creating and maintaining the connections these commands will be sent over, providing mechanisms for introspection into a driver’s functionality can provide developers with added confidence that things are working as expected.</p>

<p>The inner workings of connection pools, connection lifecycle, server monitoring, topology changes, command execution and other driver components are exposed by means of events developers can register listeners to capture. This can be an invaluable troubleshooting tool and can help facilitate monitoring the health of an application.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="p">{</span> <span class="nx">MongoClient</span><span class="p">,</span> <span class="na">BSON</span><span class="p">:</span> <span class="p">{</span> <span class="nx">EJSON</span> <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongodb</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">label</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">EJSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb://localhost:27017</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">monitorCommands</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">commandStarted</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="dl">'</span><span class="s1">commandStarted</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span><span class="p">));</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckedOut</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">debugPrint</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckedOut</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span><span class="p">));</span>
 <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
 <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">();</span>
 <span class="nx">client</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>
<span class="nf">main</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Given the example above (using the <a href="https://www.mongodb.com/docs/drivers/node/current/">Node.js driver</a>) the specified connection events and command events would be logged as they’re emitted by the driver:</p>

<p><code>connectionCheckedOut: {"time":{"$date":"2024-05-17T15:18:18.589Z"},"address":"localhost:27018","name":"connectionCheckedOut","connectionId":1}</code><br />
<code>commandStarted: {"name":"commandStarted","address":"127.0.0.1:27018","connectionId":1,"serviceId":null,"requestId":5,"databaseName":"test","commandName":"find","command":{"find":"foo","filter":{},"limit":1,"singleBatch":true,"batchSize":1,"lsid":{"id":{"$binary":{"base64":"4B1kOPCGRUe/641MKhGT4Q==","subType":"04"}}},"$clusterTime":{"clusterTime":{"$timestamp":{"t":1715959097,"i":1}},"signature":{"hash":{"$binary":"base64":"AAAAAAAAAAAAAAAAAAAAAAAAAAA=","subType":"00"}},"keyId":0}},"$db":"test"},"serverConnectionId":140}</code></p>

<p>The preferred method of observing internal behavior would be through <a href="https://github.com/mongodb/specifications/blob/master/source/logging/logging.md">standardized logging</a> once it is available in all drivers (<a href="https://jira.mongodb.org/browse/DRIVERS-1204">DRIVERS-1204</a>), however until that time only event logging is consistently available. In the future additional observability tooling such as <a href="https://opentelemetry.io/">Open Telemetry</a> support may also be introduced.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/command-logging-and-monitoring/command-logging-and-monitoring.rst">Command Logging and Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-logging-and-monitoring.md">SDAM Logging and Monitoring</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/logging/logging.md">Standardized Logging</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md#connection-pool-logging">Connection Pool Logging</a></p>
</blockquote>

<h3 id="testability">Testability</h3>

<p>Ensuring existing as well as net-new drivers can be effectively tested for correctness and performance, most specifications define a standard set of tests using <a href="https://web.archive.org/web/20230930061614/https://www.mongodb.com/blog/post/cat-herds-crook-yaml-test-specs-improve-driver-conformance">YAML tests to improve driver conformance</a>. This allows specification authors and maintainers to describe functionality once with the confidence that the tests can be executed alike by language-specific test runners across all drivers.</p>

<p>Though the unified test format greatly simplifies language-specific implementations, not all tests can be represented in this fashion. In those cases the specifications may describe tests to be manually implemented as prose. By limiting the number of prose tests that each driver must implement, engineers can deliver functionality with greater confidence while also minimizing the burden of upstream verification.</p>

<blockquote class="prompt-tip">
  <p><strong>Specifications:</strong> <a href="https://github.com/mongodb/specifications/blob/master/source/unified-test-format/unified-test-format.md">Unified Test Format</a>, <a href="https://github.com/mongodb/specifications/tree/master/source/atlas-data-lake-testing/tests">Atlas Data Federation Testing</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/benchmarking/benchmarking.md">Performance Benchmarking</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/bson-corpus/bson-corpus.md">BSON Corpus</a>, <a href="https://github.com/mongodb/specifications/tree/master/source/connections-survive-step-down/tests">Replication Event Resilience</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/faas-automated-testing/faas-automated-testing.md">FAAS Automated Testing</a>, <a href="https://github.com/mongodb/specifications/blob/master/source/serverless-testing/README.rst">Atlas Serverless Testing</a></p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<p>Most (if not all) the information required to build a new driver or maintain existing drivers technically exists within the specifications, however without a mental mode of their composition and architecture it can be extremely challenging to know where to look.</p>

<p>Peeling the <em>“drivers onion”</em> should hopefully make reasoning about them a little easier, especially with the understanding that everything can be tested to validate individual implementations are “up to spec”.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[The modern MongoDB driver consists of a number of components, each of which are thoroughly documented in the Specifications repository. Though this information is readily available and extremely helpful, what it lacks is a high level overview to tie the specs together into a cohesive picture of what a MongoDB driver is.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hugo II, Whodunit? (Gray Design Associates) - 1991</title><link href="https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit/" rel="alternate" type="text/html" title="Hugo II, Whodunit? (Gray Design Associates) - 1991" /><published>2024-05-10T06:51:54-04:00</published><updated>2024-05-13T06:35:50-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/10/hugo-ii-whodunit/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Hugo_II,_Whodunit%3F">Hugo II, Whodunit?</a> (named Hugo’s Mystery Adventure in the Hugo Trilogy re-release) is a parser-based adventure game designed by independent software developer David P. Gray and published as shareware by Gray Design Associates in 1991. It is the sequel to 1990’s <a href="/blog/2022/12/21/hugos-house-of-horrors/">Hugo’s House of Horrors</a>, and it was followed by Hugo III, Jungle of Doom! in 1992.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00014.png" alt="" /></p>

<p>Hugo and his wife, Penelope, arrive to stay at the mansion that belongs to Hugo’s Great Uncle Horace. Penelope falls asleep in the bedroom, while Hugo accidentally finds a bookcase passage and is locked in a secret room. Penelope wakes up, only to witness Uncle Horace’s murder through the keyhole. The player controls Penelope (and later, briefly, Hugo) and must solve the murder.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00001.png" alt="" /></p>

<p>This title improves slightly on the original as moving the mouse around the screen will occasionally highlight character or object names. This is a cue as to something you should type into the text parser to interact with (ex: <code class="language-plaintext highlighter-rouge">LOOK BOOKCASE</code>).</p>

<p>Once you lie down and Hugo disappears, you’ll gain control of Penelope - who is the main character on this adventure.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00007.png" alt="" /></p>

<p>As you work your way through the Uncle Horace’s property you’ll meet a couple NPCs that you can interact with. These interactions are extremely limited (they’re not dialogue trees) and typically don’t advance the plot - they just serve as puzzles as you typically need them to move so you can progress.</p>

<p>Since I’m playing this game in ScummVM, the original text boxes have been replaced by UI modals - which IMHO look awful. Apparently a “nice to have” on the <a href="https://wiki.scummvm.org/index.php?title=Hugo/TODO">Hugo/TODO</a> page is implementing the original dialog boxes … so maybe one day.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00010.png" alt="" /></p>

<p>In a couple areas you need to navigate the screen using almost pixel-perfect navigation to either keep yourself from dying, or getting into an unwinnable situation.</p>

<p>The venus fly trap screen requires you to walk through a “maze” in order to get a magnifying glass. The hit boxes for these plants are massive though, so you’ll die <em>many times</em> trying to get through this.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00011.png" alt="" /></p>

<p>When you get past the venus fly traps you’ll need to cross a bridge, but if you accidentally touch the “edges” of the walkable area you’ll drop your matches and they’ll get wet.</p>

<p>If this happens, you won’t be able to light a stick of dynamite later in the game.</p>

<p>Luckily this game is very short, so if you happen to get yourself into this situation it’s really only a matter of backtracking about 30 minutes of play time to get yourself to that point from an earlier save.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00013.png" alt="" /></p>

<p>To progress through the mid-portion of the game you need to press various buttons in the shed to trigger certain events. These can’t be done until you first walk all the way to the screen where the event will occur, then walk back and press the button.</p>

<p>For example, you can’t turn on the bug light to attract the bees until you’ve “been there” once.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00009.png" alt="" /></p>

<p>Since you’ll be doing a lot of backtracking it is appreciated that this game has a “Turbo” mode that makes Penelope walk twice as fast.</p>

<p>This is especially helpful when you have to navigate through the hedge maze (oh goody … a maze). Thankfully this isn’t all that big and is easy enough to map out, but given the limited colour palette of this game this section is a little hard on the eyes.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00018.png" alt="" /></p>

<p>The maze exists to hide a couple items you’ll need to collect to proceed - which honestly sums up most of this game. A good portion of the game’s screens contain items that you’ll need to use exactly once to solve a single puzzle.</p>

<p>This is fairly simplistic game design, but I can’t fault David P. Gray as he single handedly wrote a trilogy of games that he even <a href="https://www.facebook.com/notes/759580011285484/">went into technical detail about</a> for anyone that was interested.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00017.png" alt="" /></p>

<p>To add some flavour there are timing-based puzzles as well. For example, if you place and light the dynamite you have a fixed amount of time to get out of the well before it explodes and kills you.</p>

<p>Though there aren’t many game over scenarios, they are possible so it’s worth saving every few screens just so you don’t have to backtrack too far when you mess up.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00015.png" alt="" /></p>

<p>The narrative of this game is a little disjointed, like when you step into a phone booth, call a number you just saw written in graffiti and meet Dr. Who (sort of).</p>

<p>It’s all to give you a screwdriver you can use to open a safe a few screens later, but there’s no rhyme or reason for this encounter.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00021.png" alt="" /></p>

<p>Once you make your way back into the mansion you’ll talk to family members who you’ll get clues from as to what happened to Uncle Horace. Finally you’ll all gather in a room with a police officer who asks you “Whodunit?!?”.</p>

<p>If you guess right (that nobody murdered Horace) you get points, otherwise Cousin Harry gives you a little info and we meet back up with Hugo, who is locked in a closet.</p>

<p>The solution to get out of the closet is fairly straightforward. Once you put the newspaper under the door, poke the key out of the keyhole so it falls and you pull it under the door on the newspaper, you get out and it’s game over.</p>

<p><img src="/images/adventure/hugo2/scummvm-hugo2-00022.png" alt="" />
<em>And that’s a wrap</em></p>

<p>Though it improves on the previous entry in the series, Hugo 2 is extremely simplistic. The graphics are simple, the audio is PC speaker beeps and there’s typically no music (aside from a couple of screens).</p>

<p>The game is very straightforward aside from a couple of slightly obtuse puzzles such as rubbing catnip on a bell, then giving the bell to the cat so he’ll ring it and distract the maid while you’re in another room.</p>

<p>Hugo games really feel like they’re a variation of Sierra’s AGI games, but not nearly as robust. For a game written and developed by one guy though, it really isn’t all that bad.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Hugo II, Whodunit?</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td>Gray Design Associates</td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Gray Design Associates</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1991</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Hugo">Hugo</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/28569"><em>How Long To Beat?</em></a></td>
      <td>1.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="http://gamerwalkthroughs.com/hugo-2-whodunit/">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>36%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/hugo2/scummvm-hugo2-00000.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00000.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00002.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00002.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00003.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00003.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00004.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00004.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00005.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00005.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00006.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00006.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00008.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00008.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00012.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00012.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00016.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00016.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00019.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00019.png' },{ src: '/images/adventure/hugo2/scummvm-hugo2-00020.png', thumb: '/images/adventure/hugo2/scummvm-hugo2-00020.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/1158/hugo-ii-whodunit/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Gray Design Associates" /><category term="Hugo" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/hugo2/scummvm-hugo2-0000a.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/hugo2/scummvm-hugo2-0000a.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Do Not Use Mutexes in Finalizers</title><link href="https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers/" rel="alternate" type="text/html" title="Do Not Use Mutexes in Finalizers" /><published>2024-05-09T13:27:41-04:00</published><updated>2024-05-09T14:00:07-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/09/do-not-use-mutexes-in-finalizers/"><![CDATA[<blockquote class="prompt-tip">
  <p>Reposted from <a href="https://comandeo.dev/2023/01/01/mutexes-in-finalizers.html">Dmitry’s blog</a>. Canonical URL points to his original post.</p>
</blockquote>

<p>Ruby allows a developer to specify a <em>finalizer</em> proc for an object. This proc is called after an object was destroyed. This is a very useful mechanism that can be used for some cleanup when the object is gone. However, it turned out that there are limitations to what you can do inside finalizers. And these limitations are the same as ones for a signal trap. So, if you write a finalizer, you should follow the <a href="https://github.com/ruby/ruby/blob/master/doc/signals.rdoc">documentation for signal traps</a>.</p>

<p>Some time ago a user opened an issue in our bug tracker. In his logs he noticed an exception raised by the MongoDB Ruby driver:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>`synchronize': can't be called from trap context (ThreadError)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the logs, we could see that the exception was raised when calling synchronize on a mutex inside the finalizer. However, the exception says that synchronize can’t be called from a “trap context”. What is that, and how is it related to our finalizers?</p>

<p>Finalizer is a proc that will be called when a specific object is about to be destroyed by garbage collection. In the MongoDB Ruby driver, we use finalizers to close unused cursors. A cursor is returned in response to a query and can be iterated to retrieve results. Cursors are a very convenient mechanism; however, cursors are server-side objects, and every cursor consumes server memory. Therefore, it is a good idea to let the server know if a cursor is unused so that the resources are released. So, if an object that represents a cursor is destroyed, the cursor is definitely unused and can be closed.</p>

<p>Below is a very simplified example of how this can be done:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Cursor</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">finalize</span><span class="p">(</span><span class="n">cursor_id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="nb">proc</span> <span class="k">do</span>
      <span class="nb">puts</span> <span class="s2">"Killing cursor </span><span class="si">#{</span><span class="n">cursor_id</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">database</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">collection</span><span class="si">}</span><span class="s2">"</span>
      <span class="c1"># Execute command to close cursor</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="c1"># Initialize the cursor</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">define_finalizer</span><span class="p">(</span>
      <span class="nb">self</span><span class="p">,</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">finalize</span><span class="p">(</span><span class="vi">@id</span><span class="p">,</span> <span class="vi">@database</span><span class="p">,</span> <span class="vi">@collection</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can ask Ruby to do the garbage collection by calling <code class="language-plaintext highlighter-rouge">GC.start</code>, so we can test the code.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">)</span> <span class="p">}</span>
<span class="no">GC</span><span class="p">.</span><span class="nf">start</span>

<span class="c1"># =&gt; Killing cursor 258 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 938 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 791 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 705 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 114 on database.collection</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So far so good. Of course, this solution is far from ideal. Here we send a command to the server every time the finalizer is called. First, this will block the main thread. Further, it will issue one command per cursor, which is not ideal. We can also reduce the number of commands we send by killing all cursors for a collection in one command. So, we came up with an idea for the cursor reaper — a background thread that wakes up from time to time and kills unused cursors:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">CursorReaper</span>
  <span class="no">Task</span> <span class="o">=</span> <span class="no">Struct</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:database</span><span class="p">,</span> <span class="ss">:collection</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@tasks</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">schedule</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
      <span class="vi">@tasks</span> <span class="o">&lt;&lt;</span> <span class="no">Task</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">kill_cursors</span>
    <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
      <span class="k">while</span> <span class="n">task</span> <span class="o">=</span> <span class="vi">@tasks</span><span class="p">.</span><span class="nf">pop</span>
        <span class="nb">puts</span> <span class="s2">"Killing cursor </span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">database</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">task</span><span class="p">.</span><span class="nf">collection</span><span class="si">}</span><span class="s2">"</span>
        <span class="c1"># Group cursors per collection</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="c1"># Execute commands to close cursors</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Cursor</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">finalize</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="nb">proc</span> <span class="k">do</span>
      <span class="n">reaper</span><span class="p">.</span><span class="nf">schedule</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">database</span><span class="p">,</span> <span class="n">collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="c1"># Initialize the cursor</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">define_finalizer</span><span class="p">(</span>
      <span class="nb">self</span><span class="p">,</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">finalize</span><span class="p">(</span><span class="vi">@id</span><span class="p">,</span> <span class="vi">@database</span><span class="p">,</span> <span class="vi">@collection</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that there is a mutex in the CursorReaper class. The kill_cursors method of the reaper will be called in a background thread, hence the locking. Let’s test it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="n">reaper</span> <span class="o">=</span> <span class="no">CursorReaper</span><span class="p">.</span><span class="nf">new</span>
<span class="n">reaper_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">reaper</span><span class="p">.</span><span class="nf">kill_cursors</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span> <span class="p">}</span>
<span class="no">GC</span><span class="p">.</span><span class="nf">start</span>
<span class="n">reaper_thread</span><span class="p">.</span><span class="nf">join</span>

<span class="c1"># =&gt; Killing cursor 205 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 847 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 284 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 609 on database.collection</span>
<span class="c1"># =&gt; Killing cursor 485 on database.collection</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Still, no error, even though the latter example calls synchronize inside the finalizer. What is the difference between the example and the real-world situation? In the example, we trigger garbage collection manually. Normally this is triggered by Ruby itself. What if we create so many objects that Ruby actually starts the GC?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="n">reaper</span> <span class="o">=</span> <span class="no">CursorReaper</span><span class="p">.</span><span class="nf">new</span>
<span class="n">reaper_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">reaper</span><span class="p">.</span><span class="nf">kill_cursors</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">populator_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
  <span class="kp">loop</span> <span class="k">do</span>
    <span class="mi">5000</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="no">Cursor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'database'</span><span class="p">,</span> <span class="s1">'collection'</span><span class="p">,</span> <span class="n">reaper</span><span class="p">)</span> <span class="p">}</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="p">[</span><span class="n">reaper_thread</span><span class="p">,</span> <span class="n">populator_thread</span><span class="p">].</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yes, this code actually reproduces the problem, and the exception is raised! So, it looks like finalizers are executed inside a signal trap. Therefore, to fix the problem we should just <a href="https://github.com/ruby/ruby/blob/master/doc/signals.rdoc">follow the documentation</a> and not use operations that are not allowed inside the traps. In our case with the cursor reaper, we got rid of mutexes in finalizers by using a queue data structure, and the bug was fixed.</p>

<h2 id="we-need-to-go-deeper">We Need to Go Deeper</h2>

<p>Even though the problem was gone, I decided to find out whether finalizers are really executed inside a signal trap. I though maybe Ruby VM uses signals internally to trigger garbage collection. I could not find any mentions about such a usage of signals, so I had to read Ruby source code. It tuned out to be fun, and the outcome was very unexpected!</p>

<p>I started by finding where the error <em>“can’t be called from trap context”</em> is raised. I found it in <code class="language-plaintext highlighter-rouge">do_mutex_lock</code> function inside <code class="language-plaintext highlighter-rouge">thread_sync.c</code> file:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/* When running trap handler */</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">FL_TEST_RAW</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">MUTEX_ALLOW_TRAP</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
  <span class="n">th</span><span class="o">-&gt;</span><span class="n">ec</span><span class="o">-&gt;</span><span class="n">interrupt_mask</span> <span class="o">&amp;</span> <span class="n">TRAP_INTERRUPT_MASK</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eThreadError</span><span class="p">,</span> <span class="s">"can't be called from trap context"</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So, what is actually verified is whether the execution context has a <code class="language-plaintext highlighter-rouge">TRAP_INTERRUPT_MASK</code> flag set. This flag is set in three functions: <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> in <code class="language-plaintext highlighter-rouge">vm_trace.c</code>, <code class="language-plaintext highlighter-rouge">rb_threadptr_execute_interrupts</code> in <code class="language-plaintext highlighter-rouge">thread.c</code>, and <code class="language-plaintext highlighter-rouge">signal_exec</code> in <code class="language-plaintext highlighter-rouge">signal.c</code>. After some debugging, I found out that in our case the flag is set in the <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> function. Actually, this is also confirmed by this comment for the <code class="language-plaintext highlighter-rouge">rb_gc</code> function in <code class="language-plaintext highlighter-rouge">gc.h</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>* Finalisers are deferred until we can handle interrupts. See * `rb_postponed_job_flush` in vm_trace.c.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Alright, now it is more or less clear what is going on. Finalizers are not executed immediately after an object is “garbage collected”. Instead, a postponed job is created and scheduled. Such jobs are executed in the <code class="language-plaintext highlighter-rouge">rb_postponed_job_flush</code> function. This function sets the <code class="language-plaintext highlighter-rouge">TRAP_INTERRUPT_MASK</code> flag, which is later checked by <code class="language-plaintext highlighter-rouge">do_mutex_lock</code>. Hence the error. I even found <a href="https://github.com/ruby/ruby/commit/05459d1a33db59c47e98e327c9f52808ebc76a3f">the commit</a> that introduces the current behavior, and <a href="https://bugs.ruby-lang.org/issues/10595">a bug</a> that was fixed by this commit. It looks like the Ruby team wanted to make sure that finalizers are never interrupted by a signal; as a side effect, code inside finalizers is treated as code inside a signal trap.</p>

<p><em>To summarize, finalizers are <strong>not</strong> executed inside a signal trap; however, Ruby applies the same restrictions to signal traps and finalizers. This is not documented anywhere; further, the exception raised is a bit misleading. Be careful!</em></p>

<p>P.S. It is still unclear why we did not see the exception when we trigger the garbage collection manually. I wasn’t able to find the answer; maybe this is a topic for my next article.</p>]]></content><author><name>Dmitry Rybakov</name></author><category term="Programming" /><category term="ruby" /><summary type="html"><![CDATA[Reposted from Dmitry’s blog. Canonical URL points to his original post.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Secret of Monkey Island (Lucasfilm Games) - 1990</title><link href="https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island/" rel="alternate" type="text/html" title="The Secret of Monkey Island (Lucasfilm Games) - 1990" /><published>2024-04-30T05:03:32-04:00</published><updated>2024-05-07T07:04:43-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/30/the-secret-of-monkey-island/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/The_Secret_of_Monkey_Island">The Secret of Monkey Island</a> is a 1990 point-and-click graphic adventure game developed and published by Lucasfilm Games.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00001.png" alt="" /></p>

<p>Deep in the Caribbean lies Melee Island, ruled by the governor Elaine Marley. The cruel pirate LeChuck is deeply in love with her - so deeply that he refuses to accept his own death. As a ghost, he dwells with his undead crew somewhere near the mysterious Monkey Island. Meanwhile, a young fellow named Guybrush Threepwood is determined to become a real pirate. At the Scumm Bar, he meets three pirates who tell him he has to complete three difficult tasks in order to be worthy of this title. But as Guybrush is trying to complete these tasks, he encounters the lovely governor, and this meeting changes his life forever. Risking to incur the wrath of LeChuck, Guybrush has to prove his wit is as sharp as his sword, and figure out a way to foil the ghost pirate’s plans.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00007.png" alt="" /></p>

<p>Without pulling any punches I might as well just start off with the fact that this is possibly one of the best adventure games of all time. From the <a href="https://www.youtube.com/watch?v=Pdd2CNlcqn0">amazing soundtrack</a> and excellent pixel art to the captivating story and the extremely forgiving game play, Secret of Monkey Island is extremely welcoming to anyone looking to get started with this genre of game.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00031.png" alt="" /></p>

<p>Being an early SCUMM game you’re presented with a very familiar screen layout with the main view on top, a verb list in the lower left and inventory in the lower right. Moving the mouse cursor around the screen will call out any action areas you can interact with, and based on which verb is selected, you can perform said action on whatever you just clicked on.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00012.png" alt="" /></p>

<p>As you progress on your quest to become a mighty pirate, you’ll find yourself picking up a lot of items. As a result, most puzzles in this game involve either completing fetch quests, or item combination puzzles.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00014.png" alt="" /></p>

<p>The game typically points you in the right direction as to what you need to do next, which item you need or how things need to be combined so though it can be challenging at times, I never found the game to get frustrating.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00006.png" alt="" /></p>

<p>Most characters in the game can be engaged with, opening up a conversation system with branching dialogue options. There are typically a number of nonsense options in each conversation that will are just a distraction, but the writing in this game is so good (and funny) that it’s almost worth exploring these even if you know you’re picking the “wrong” option.</p>

<p>Graphically this game is top notch, as can be seen in character portraits and background artwork. As a result you’re typically not just sweeping your cursor around the screen hoping to find some magic pixel to interact with - the detail of the backgrounds make whatever thing you’re supposed to interact with pretty apparent.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00019.png" alt="" /></p>

<p>The Secret of Monkey Island introduces a unique battle mechanic, which is actually weirdly intuitive and easy to learn. One of the quests you need to embark on is to defeat the legendary swordmaster, but to do this you’ll need to build up a repertoire of insults.</p>

<p>“Battles” consist of you hurling an insult, and the other pirate either having a witty comeback or a generic comment (ex: “I am rubber you are glue”). If they have a comeback, they win a round and can insult you, and you need to “defend” with a comeback. If a pirate uses an insult in battle you haven’t learned, it’s added to your list of insults for future battles - as are the comebacks pirates have used.</p>

<p>If you match a comeback to an insult, you’ll win a round, and if you win 3 or 4 rounds you win the fight.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00021.png" alt="" /></p>

<p>Eventually you’ll build up enough insults to challenge (and hopefully defeat) the legendary swordmaster. This is actually pretty interesting as she’ll lob insults you’ve never heard before but you can still successfully parry with comebacks you’ve already learned - assuming you pick the right ones.</p>

<p>This is just another example of how well this game is written, as so much care was put into crafting this battle system that they wrote multiple insults that would make sense (and sort of be funny) with the same comebacks.</p>

<p>I personally loved this game mechanic and am impressed it wasn’t overplayed. They really only use it in the lead up to the swordmaster fight - then never again. With such a unique element to the game it may have been tempting to overplay it, but you gotta give the designers credit for fighting that urge and making a really well balanced game.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00022.png" alt="" /></p>

<p>The game is split into three main chapters, two of which take place on islands you can navigate from an overhead map view. This makes each area feel a lot bigger than it actually is, as there are typically a handful of actual locations to visit.</p>

<p>These locations are called out as you move your cursor over them, and clicking on them will make Guybrush walk there. In chapter 3 you eventually get access to a boat, which moves extremely slowly, but if you double click an area of the screen that’s further away from you he paddles quickly and the boat moves a lot faster.</p>

<p>I appreciated this type of optimization in the game as it can be tedious waiting for the character to slowly progress on the map just to give an area a false sense of scale.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00030.png" alt="" /></p>

<p>As the story progresses you’ll prove yourself to be a mighty pirate, meet the governor, fall for her and then have to go rescue her once the Ghost Pirate LeChuck kidnaps her. This is done by recruiting a crew and buying a boat, but once you do this crew sort of abandons you to instead soak up some rays on the deck.</p>

<p>The bulk of this second chapter consists of you completing a massive item combination puzzle as the directions to Monkey Island are presented to you in the form of a recipe.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00032.png" alt="" /></p>

<p>Everything you’ll need to get to the island are on the ship, so this giant fetch quest just involves searching the ship, picking up items, referring to the recipe (once you find it) to see what should get thrown in the pot - then throwing it in the pot.</p>

<p>Once the recipe is complete everyone on the ship falls asleep and you wake up off the shore of Monkey Island. How convenient!</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00036.png" alt="" /></p>

<p>Once you find Monkey Island you’ll need to get yourself there, but you don’t seem to have a rowboat. Good thing you learning how to fire yourself out of a cannon earlier in the game.</p>

<p>To me at least this was an example of good puzzle design, as you’d already learned how cannons could be used, and you happen to have a long piece of rope, embers from a fire, gunpowder and a pot you can use as a helmet …</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00037.png" alt="" /></p>

<p>There are only a few characters to meet on the island once you get there, but they drop some hints as to where LeChuck is and what they need from you. After embarking on another series of fetch quests, you’ll eventually get the key to enter the underground where LeChuck’s ghost ship is anchored.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00042.png" alt="" /></p>

<p>From the ghost ship you retrieve the root and give it back to the cannibals so they can make you som root beer you can use to get rid of ghosts. When you bring the root back, the cannibals prepare the root beer, you return to the ghost ship and find out you just missed them.</p>

<p>LeChunk has taken Governor Marley back to Melee Island to marry her. Instead of having to manually backtrack, your crew appears at this point and after a brief cutscene you automatically return to Melee Island with them.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00044.png" alt="" /></p>

<p>The final showdown with Lechuck is pretty easy, though you need to move quickly or he’ll punch you off screen and delay the fight. It’s kind of funny that you make it this far with the magic root beer, you go to use it on LeChuck and it gets jammed on some pocket lint.</p>

<p>Eventually you’ll grab a can of grog, spray LeChuck with it and the game will be over.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00045.png" alt="" />
<em>The End</em></p>

<p>I basically loved everything about this game. The writing was fantastic, the story was compelling, the puzzles were challenging but intuitive, the music was great, it’s visually appealing and the dialogue was engaging. If you’re already a fan of this game, I’d encourage you to go read the Video Game History Foundation’s <a href="https://gamehistory.org/monkeyisland/">30th anniversary of Monkey Island</a> article as it contains lots of development details and insights.</p>

<p>There are 2 sequels to this game that I plan on playing for this series, and I am really looking forward to getting to those. I know there’s a fourth game, but <a href="https://en.wikipedia.org/wiki/Escape_from_Monkey_Island">Escape from Monkey Island</a> came out in 2000 so is just outside the range I set - though I might circle back to it one day just for fun.</p>

<p><img src="/images/adventure/mi1/scummvm-monkey-00047.png" alt="" />
<em>The only game over in this game</em></p>

<p>Though this is a LucasArts game, there is exactly one game over screen in The Secret of Monkey Island, and it’s a bit of an easter egg. Right from the beginning of the game Guybrush mentions his talent is holding his breath for 10 minutes - which is something you’ll leverage at one point when you’re thrown in the ocean to drown.</p>

<p>You can easily just walk out of the water and escape certain death, but if you just let the game idle for more than 10 minutes, Guybrush will die. Unlike Sierra games of this era, instead of prompting you with a game over screen, the verb list changes to represent your new set of options.</p>

<p>This is just another example of the clever game design, excellent writing and underlying humor that permeates this title through and through. I would highly recommend this game to anyone - whether they’re a fan of the genre or not.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>The Secret of Monkey Island</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/LucasArts">Lucasfilm Games</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Lucasfilm Games</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>October 1990</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, Atari ST, CDTV, DOS, FM Towns, Mac OS, Sega CD</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCUMM">SCUMM</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/10162"><em>How Long To Beat?</em></a></td>
      <td>6.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/the-secret-of-monkey-island">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>18</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>23</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>87%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/mi1/scummvm-monkey-00002.png', thumb: '/images/adventure/mi1/scummvm-monkey-00002.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00003.png', thumb: '/images/adventure/mi1/scummvm-monkey-00003.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00004.png', thumb: '/images/adventure/mi1/scummvm-monkey-00004.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00005.png', thumb: '/images/adventure/mi1/scummvm-monkey-00005.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00008.png', thumb: '/images/adventure/mi1/scummvm-monkey-00008.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00009.png', thumb: '/images/adventure/mi1/scummvm-monkey-00009.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00010.png', thumb: '/images/adventure/mi1/scummvm-monkey-00010.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00011.png', thumb: '/images/adventure/mi1/scummvm-monkey-00011.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00013.png', thumb: '/images/adventure/mi1/scummvm-monkey-00013.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00015.png', thumb: '/images/adventure/mi1/scummvm-monkey-00015.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00016.png', thumb: '/images/adventure/mi1/scummvm-monkey-00016.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00017.png', thumb: '/images/adventure/mi1/scummvm-monkey-00017.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00018.png', thumb: '/images/adventure/mi1/scummvm-monkey-00018.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00020.png', thumb: '/images/adventure/mi1/scummvm-monkey-00020.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00023.png', thumb: '/images/adventure/mi1/scummvm-monkey-00023.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00024.png', thumb: '/images/adventure/mi1/scummvm-monkey-00024.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00025.png', thumb: '/images/adventure/mi1/scummvm-monkey-00025.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00026.png', thumb: '/images/adventure/mi1/scummvm-monkey-00026.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00027.png', thumb: '/images/adventure/mi1/scummvm-monkey-00027.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00028.png', thumb: '/images/adventure/mi1/scummvm-monkey-00028.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00033.png', thumb: '/images/adventure/mi1/scummvm-monkey-00033.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00034.png', thumb: '/images/adventure/mi1/scummvm-monkey-00034.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00035.png', thumb: '/images/adventure/mi1/scummvm-monkey-00035.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00038.png', thumb: '/images/adventure/mi1/scummvm-monkey-00038.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00039.png', thumb: '/images/adventure/mi1/scummvm-monkey-00039.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00040.png', thumb: '/images/adventure/mi1/scummvm-monkey-00040.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00041.png', thumb: '/images/adventure/mi1/scummvm-monkey-00041.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00043.png', thumb: '/images/adventure/mi1/scummvm-monkey-00043.png' },{ src: '/images/adventure/mi1/scummvm-monkey-00046.png', thumb: '/images/adventure/mi1/scummvm-monkey-00046.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/616/the-secret-of-monkey-island/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Lucasfilm Games" /><category term="SCUMM" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/mi1/scummvm-monkey-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/mi1/scummvm-monkey-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Event Monitoring with Mongoose</title><link href="https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose/" rel="alternate" type="text/html" title="Event Monitoring with Mongoose" /><published>2024-04-26T09:58:52-04:00</published><updated>2024-04-26T10:47:18-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/26/event-monitoring-with-mongoose/"><![CDATA[<p>I previously wrote about <a href="/blog/2022/05/15/mongodb-driver-monitoring/">MongoDB Driver Monitoring</a>, but there are <a href="/blog/2022/11/02/mongodb-orms-odms-and-libraries/">ODM libraries</a> and framework integrations that are built atop the drivers that can take advantage of this functionality.</p>

<p>For example, <a href="https://mongoosejs.com/docs/guide.html"><code class="language-plaintext highlighter-rouge">mongoose</code></a> can be easily configured to expose <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/cluster-monitoring/">cluster monitoring</a>, <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/connection-monitoring/">connection pool monitoring</a> and <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/monitoring/command-monitoring/">command monitoring</a> capabilities.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">Schema</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">;</span>

<span class="nf">run</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongodb://localhost:27017/test</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nf">getClient</span><span class="p">().</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectionCheckOutStarted</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Received: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">ev</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nc">Schema</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nb">String</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">Test</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test</span><span class="dl">'</span><span class="p">,</span> <span class="nx">schema</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span> <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This was documented within a comment of <a href="https://github.com/Automattic/mongoose/issues/9804">this GitHub issue</a> but for the sake of visibility I wanted to capture it here.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="connections" /><category term="drivers" /><category term="monitoring" /><category term="mongoose" /><category term="node.js" /><summary type="html"><![CDATA[I previously wrote about MongoDB Driver Monitoring, but there are ODM libraries and framework integrations that are built atop the drivers that can take advantage of this functionality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Police Quest: Open Season (Sierra On-Line) - 1993</title><link href="https://www.alexbevi.com/blog/2024/04/25/police-quest-open-season/" rel="alternate" type="text/html" title="Police Quest: Open Season (Sierra On-Line) - 1993" /><published>2024-04-25T05:18:42-04:00</published><updated>2024-04-26T07:27:14-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/25/police-quest-open-season</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/25/police-quest-open-season/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Police_Quest:_Open_Season">Police Quest: Open Season</a> (also known as Police Quest IV) is a 1993 police procedural point-and-click adventure video game developed and published by Sierra On-Line that follows homicide detective John Carey as he investigates a series of brutal murders in Los Angeles.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00023.png" alt="" /></p>

<p>This fourth installment in the Police Quest series abandons the story arc of the previous three games, introducing a new setting and a new protagonist. The story begins with detective John Carey finding his best friend and ex-partner, Officer Bob Hickman, murdered in an alley in the Southern part of the city. An eight-year-old boy named Bobby Washington has been murdered as well. Carey begins an investigation that leads him deep into the criminal life of the city and a hunt for a maniacal murderer.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00028.png" alt="" /></p>

<p>Growing up playing Sierra games, Police Quest was at the top of my list so I have very fond memories of the series. As I started on this review journey, I found myself playing through the first three games (<a href="/blog/2022/03/15/police-quest-1/">Police Quest: In Pursuit of the Death Angel</a>, <a href="/blog/2023/02/21/police-quest-2/">Police Quest II: The Vengeance</a>, <a href="/blog/2023/12/16/police-quest-iii/">Police Quest III: The Kindred</a>) pretty early on as I was looking forward to getting reacquainted with Sonny Bonds and the city of Lytton.</p>

<p>This entry in the series throws all that legacy out the window and instead tries to present a grittier, more realistic setting.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00017.png" alt="" />
<em>The graphics are blocky and just overall look shitty</em></p>

<p>What really struck me immediately is how bad this game looks. The character models are extremely chunky and looked overly compressed. Character walk cycle animations are rigid and awkward and everything in general just looks out of focus and kind of blurry.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00034.png" alt="" />
<em>The text boxes can be extremely hard to read</em></p>

<p>Whenever you interact with another character in the game you’re presented with a translucent text box that makes it extremely difficult to read the contents. Since this is an adventure game that involves talking to a lot of characters to uncover plot points and advance the story, you’ll find yourself frequently in situations that involve squinting to try and make out what’s on screen.</p>

<p>All interactions are fully voice acted (including Detective Carey’s observations when you interact with the background) so you can get around the text box quality, but then you’re at the mercy of some sub-par voice acting instead. Not all voice acting is awful in this game, but it’s definitely not one of this game’s strengths.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00044.png" alt="" />
<em>I’m sure this was meant to be an attempt at humor, but it feels forced</em></p>

<p>Unlike the voice acting, the background music is … fine. Nothing really notable other than it seems they reused a Leisure Suit Larry song for the elevator music which is a nice tip of the hat to fans of the series.</p>

<p>The tone of the game is a bit scattered. The subject matter is meant to be extremely serious, but they try to weave goofier elements in periodically. These attempts at comedy, mostly fell short for me and just came off as awkward and out of place.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00037.png" alt="" /></p>

<p>You advance through each day of this game by going to various locations across Los Angeles, interrogating various characters, collecting evidence and recording details using your notebook. Since this is another police procedure simulation you get points for following proper protocol.</p>

<p>This involves showing your badge to literally everyone you have to talk to (sometimes every single time you see them), clipping your name tag on every time you enter headquarters and filling out a form 3.14 <em>every single time you progress your investigation the tiniest bit</em>.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00022.png" alt="" />
<em>I HATE form 3.14</em></p>

<p>I know this is meant to be an “accurate simulation”, but this is just not fun game design. If you need to do this once - fine. If you need to do this every time it’s no longer a game - it’s just “work”.</p>

<p>A lot of this game just feels like work. Maybe that’s an accurate depiction of police detective work in the early 90s, but it really doesn’t translate to a compelling game experience.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00041.png" alt="" />
<em>Point and click to navigate between game areas</em></p>

<p>I appreciate that you can fast travel to the various locations you need to investigate. In earlier entries in this series you would have to manually drive yourself around town, which could take forever and result in unnecessary game ending situations.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00021.png" alt="" /></p>

<p>Speaking of “game ending situations”, seeing as this is a Sierra game you would expect death to be lurking around every corner - but that’s just not the case. There are maybe a handful of situations that will trigger a game over, but these are few and far between.</p>

<p>What’s worse is the prompt you get when you die is just as boring as the rest of the game. I used to go out of my way to see how the game would describe my character’s death in games like Leisure Suit Larry or Space Quest because it was always funny, descriptive and entertaining.</p>

<p>The plain gray box with a generic message stating I died is fitting for how boring this game is as a whole.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00032.png" alt="" />
<em>I got stuck here for a while</em></p>

<p>Open Season is not a very long game, but I found myself stuck and unable to progress at one point because a scripted event just would not trigger. After watching the news at the bar after the second day, the screen would just go blank and the game would wait forever. Eventually I found that lowering the detail and speed in the game settings before entering this sequence would allow the script to progress.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00043.png" alt="" /></p>

<p>The game takes place over the course of a few days. If you don’t complete <em>everything</em>, the scripted events required to trigger the transition to the next day won’t trigger.</p>

<p>I found myself in a situation where I couldn’t get Wednesday to end, which it turned out was actually a pretty common issue for a lot of gamers. The official spoiler from Sierra Help states that you need to:</p>

<blockquote>
  <p>Go to the L.A. County Morgue. You should see a news team questioning Sherry and the day will end. If this doesn’t happen, you have missed something. Did you get the newspaper clipping from the patrol car at the Impound Lot? Did you look at the clipping in your inventory? Did you go to the Bitty Kitty and question Electra and Barbie after showing them your badge? Did you show them both the shoe from Yo Money’s house? Did you question the proprietor of Ragin’ Records about the patrol car and the abandoned car? Did you give the bone from Griffith Park to the coroner?</p>
</blockquote>

<p>Turns out I didn’t show Barbie the shoe. After doing this I went back to the coroner’s office and the script triggered that had the reporter pestering the coroner’s assistant.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00045.png" alt="" /></p>

<p>You’ll pick up a lot of items throughout the game, and thankfully their usage is typically pretty obvious. There are very few item combination puzzles, but the mirror-based one is a pain in the ass.</p>

<p>Near the end of the game you’ll need to peer around a corner to make sure a dog isn’t there, which you do by gluing a broken side-view mirror to a drumstick. This is not very obvious, but adventure game veterans know to just try combining everything with everything so once you put the glue on the drumstick and it works it sort of “clicks” that this will be a 3 way item combo puzzle.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00013.png" alt="" /></p>

<p>This is an extremely repetitive game but the shooting range sequence is a neat distraction. Unfortunately this mechanic isn’t actually used anywhere in the game. You just sort of do this to kill time.</p>

<p>You do draw your gun a few times to make arrests, and there is a shotgun sequence at one point but the first person view of the shooting range doesn’t make an appearance anywhere else.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00048.png" alt="" /></p>

<p>The story progresses and you eventually uncover that there’s a cross dressing man killing people for … reasons? I don’t know if this wasn’t actually explained or if I just zoned out for the last couple days worth of content in this game but I never fully understood the motivations of the killer or why it was even all that material to the story as a whole.</p>

<p>You’ll ultimately find the killer then neutralize them by spraying them in the face with a home made flamethrower. Then you get a medal of valor for being awesome at your job. Way to go Detective Carey - you’re my hero.</p>

<p><img src="/images/adventure/pq4/scummvm-pq4-cd-00049.png" alt="" />
<em>The End</em></p>

<p>Sierra should have left this series alone after Police Quest 3. I guess after <a href="https://en.wikipedia.org/wiki/Jim_Walls">Jim Walls</a> left to join Tsunami Media (where he made <a href="/blog/2022/03/31/blue-force/">Blue Force</a>) they wanted to keep the series alive so they brought on <a href="https://en.wikipedia.org/wiki/Daryl_Gates">Daryl F. Gates</a> to fill the void.</p>

<p>That void should have remained unfilled. Gates also consulted on Sierra’s SWAT series, which I equally didn’t enjoy playing …</p>

<p>I don’t recommend this game. Go back and play any of PQ 1 through 3 instead.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Police Quest: Open Season</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Revolution_Software">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Sierra On-Line</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>November 1993</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Windows, DOS, Apple Macintosh System 7</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/7197"><em>How Long To Beat?</em></a></td>
      <td>6.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://gamerwalkthroughs.com/police-quest-4-open-season/">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>40%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/pq4/scummvm-pq4-cd-00001.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00001.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00002.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00002.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00003.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00003.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00004.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00004.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00005.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00005.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00006.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00006.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00007.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00007.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00008.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00008.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00009.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00009.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00010.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00010.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00011.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00011.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00012.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00012.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00014.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00014.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00015.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00015.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00016.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00016.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00018.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00018.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00019.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00019.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00020.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00020.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00024.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00024.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00025.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00025.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00026.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00026.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00027.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00027.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00029.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00029.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00030.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00030.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00031.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00031.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00033.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00033.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00035.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00035.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00036.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00036.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00038.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00038.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00039.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00039.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00040.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00040.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00042.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00042.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00046.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00046.png' },{ src: '/images/adventure/pq4/scummvm-pq4-cd-00047.png', thumb: '/images/adventure/pq4/scummvm-pq4-cd-00047.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/149/daryl-f-gates-police-quest-open-season/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/pq4/scummvm-pq4-cd-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/pq4/scummvm-pq4-cd-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lure of the Temptress (Revolution Software) - 1992</title><link href="https://www.alexbevi.com/blog/2024/04/16/lure-of-the-temptress/" rel="alternate" type="text/html" title="Lure of the Temptress (Revolution Software) - 1992" /><published>2024-04-16T06:45:29-04:00</published><updated>2024-04-19T06:51:04-04:00</updated><id>https://www.alexbevi.com/blog/2024/04/16/lure-of-the-temptress</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/04/16/lure-of-the-temptress/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Lure_of_the_Temptress">Lure of the Temptress</a> is a point-and-click adventure game published by Virgin Interactive Entertainment in June 1992 for Atari ST, MS-DOS, and Amiga. It was the first game developed by Revolution Software and uses their proprietary <a href="https://en.wikipedia.org/wiki/Virtual_Theatre">Virtual Theatre</a> engine.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00010.png" alt="" /></p>

<p>The medieval town of Turnvale has fallen into the hands of the evil sorceress Selena. She is controlling an army of an orc-like warrior race Skorl, who serve her with devotion. The Skorl hate humans and have terrorized the town and the nearby land. Diermot is an ordinary fellow who was captured by the Skorl and thrown into prison. His first task will be to escape. After gaining his freedom, Diermot will also have to find out how to liberate his entire homeland from the clutches of the villains.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/lure/scummvm-lure-1.png" alt="" /></p>

<p>The game starts off with a short intro sequence that lays out the story. This is presented as mostly static images followed by walls of text, but it gets the point across pretty succinctly and then turns control over to you.</p>

<p><img src="/images/adventure/lure/scummvm-lure-00001.png" alt="" /></p>

<p>Interaction with the game world is intuitive for anyone familiar with adventure games. You move a cursor around the screen, which will change shape and call out action areas in the top left when you hover over them.</p>

<p><img src="/images/adventure/lure/scummvm-lure-00008.png" alt="" /></p>

<p>Right-clicking on an action area will bring up a list of verbs you can select from to interact with it, and depending on the verb additional options will be made available.</p>

<p>Though certain verbs such as <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">PULL</code>, <code class="language-plaintext highlighter-rouge">PUSH</code>, and <code class="language-plaintext highlighter-rouge">USE</code> are typically always available, additional interaction options like <code class="language-plaintext highlighter-rouge">TALK TO</code> won’t appear unless you select an NPC, or <code class="language-plaintext highlighter-rouge">OPEN</code> if you select a door.</p>

<p><img src="/images/adventure/lure/scummvm-lure-00003.png" alt="" /></p>

<p>The initial sequence in the prison where you start the game gets you acclimatized to the controls and introduces you to the first NPC, Ratpouch.</p>

<p>This was also where this became immediately frustrating, as once we escaped the dungeon Ratpouch wouldn’t follow me. I think I was about 20 minutes into this game before I was <a href="https://www.gog.com/forum/lure_of_the_temptress/ratpouch_keeps_disappearing_and_reappearing_through_the_exit_of_the_sewers">looking on forums for help</a> to get this stupid NPC to follow me.</p>

<p>One interesting mechanic of this game is that certain NPCs will join you throughout the game, and once they do you can give them commands via the <code class="language-plaintext highlighter-rouge">TELL</code> verb. You can use this give them simple tasks, or chain together multiple commands to give them something more complex to do.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00005.png" alt="" /></p>

<p>Command chaining is required at one point in a cave where pulling certain skulls will open doors, but you need to coordinate these actions from different rooms. You’ll need to tell your companion NPC to first go to a different room, then pull a skull, then the other, then go to yet another room.</p>

<p>Figuring out the proper sequence of commands can be a bit frustrating as regardless of what commands Diermot issues, the result is the NPC agreeing and heading off to perform the actions … even if they’re not going to be helpful.</p>

<p><img src="/images/adventure/lure/scummvm-lure-00005.png" alt="" /></p>

<p>Navigating the game world is straightforward as all exits are easily identifiable. The cursor will change to an arrow if you can exit the current screen in that direction, and once a door has been opened, the cursor will change to an arrow when you hover over it as well.</p>

<p><img src="/images/adventure/lure/scummvm-lure-00011.png" alt="" /></p>

<p>The game’s visual style is good, and though there aren’t really any cutscenes the odd time that one is presented it’s typically well done.</p>

<p>Unlike many games of this era, death isn’t waiting around every corner. I only found a handful of situations in this game that would result in a game over but I still found myself saving frequently “just in case”.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00009.png" alt="" /></p>

<p>Though only used twice, there is a combat element to this game. When in the cave you find an axe and will have to fight a boar looking creature. I don’t know if this is also supposed to be a Skorl, but there’s really no details given and you kind of just get dropped into this sequence and are left to figure it out.</p>

<p>Combat just involves moving the mouse to either a high/medium/low position in front of you then left/right clicking to attack or block. Clicking both mouse buttons jumps. You need to hit this boar thing about 6-7 times to kill it, and if he hits you that many times you’ll die.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00014.png" alt="" /></p>

<p>The story progresses through a series of interactions with characters in town, then in the castle. These interactions are navigated using dialog trees, which are pretty common for adventure games of this era.</p>

<p>You’re typically presented with a number of options to choose from, with additional options being added based on other interactions you’ve had, items you’ve picked up or plot points you’ve completed.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00004.png" alt="" /></p>

<p>Characters have their own “schedules”, so they’ll roam around town and perform certain actions at certain times. If a character bumps into you or another NPC they’ll apologize and try to navigate around the obstacle.</p>

<p>This can get a little funny when you have 2-3 characters on screen and you sort of stand between them all and watch them jostle around, constantly apologizing.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00011.png" alt="" /></p>

<p>These NPCs include the Skorl, and to advance to the castle you’ll need to talk to Mallin to get a clue that there’s a Skorl acting suspiciously. When this happens you need to find a Skorl NPC and follow him around until he goes into a shop, where you can spy on him through the window.</p>

<p>When you learn the Skorl is going to take the shopkeeper to the castle in a barrel, you take his place to get transported there instead.</p>

<p><img src="/images/adventure/lure/scummvm-lure-2.png" alt="" /></p>

<p>The final sequence is pretty straightforward and involves some item combination puzzles and a timing puzzle whereby you have to <code class="language-plaintext highlighter-rouge">TELL</code> Minnow to pull a lever so you can turn a crank and lower the drawbridge.</p>

<p>Crossing the drawbridge triggers the second combat sequence of the game with another boar looking thing. After defeating him you advance to Selena’s room, where she turns into a scorpion and you automatically throw the Eye of Gethryn at her and the game is done.</p>

<p><img src="/images/adventure/lure/scummvm-lure-1-00018.png" alt="" /></p>

<p>Overall this game is not great, but it’s not bad. The puzzles weren’t overly complicated and there really aren’t that many areas to explore so the fact that there’s a lot of backtracking to complete fetch quests or find NPCs to talk to doesn’t get too frustrating.</p>

<p>I had problems getting the music to work, but this is <a href="https://www.gog.com/forum/lure_of_the_temptress/lure_of_temptress_no_music_plays_intermittently">apparently also a common issue</a>. I ended up sorting this out by changing my ScummVM configuration to use FluidSynth instead of the MT-32 emulator I typically used.</p>

<p>This got the sound and music working, but the background music is typically just one or two notes repeated periodically. It’s actually pretty annoying so the effort I went to to get this fixed wasn’t really worth it.</p>

<p>I did find the <code class="language-plaintext highlighter-rouge">TELL</code> mechanic innovative, though underused. Being able to direct multiple NPCs at once could have made for some interesting puzzle designs, but I’m satisfied with what I got so this isn’t really a complaint.</p>

<p>Lure of the Temptress is <a href="https://scummvm.org/games/#games-lure:lure">free to download from ScummVM</a> so there’s really no reason not to give it a go if you’re a fan of the genre. It’s relatively short and fairly straightforward to play, though if you’re looking for a much better title from Revolution Software I would point you to <a href="/blog/2023/02/10/beneath-a-steel-sky/">Beneath a Steel Sky</a> instead 😉.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Lure of the Temptress</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Revolution_Software">Revolution Software</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="Virgin Interactive Entertainment">Virgin Interactive Entertainment</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>June 1992</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Amiga, Atari ST</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Lure">Virtual Theatre</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/5448"><em>How Long To Beat?</em></a></td>
      <td>4 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/lureofthetemptress.aspx">Walkthrough</a>, <a href="https://openretro.org/file/76de1d3a7edfa87b461d18a6195ddcded6c3d964/Manual%20%28en%2Cit%29.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>10</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>46%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/lure/scummvm-lure-00002.png', thumb: '/images/adventure/lure/scummvm-lure-00002.png' },{ src: '/images/adventure/lure/scummvm-lure-00004.png', thumb: '/images/adventure/lure/scummvm-lure-00004.png' },{ src: '/images/adventure/lure/scummvm-lure-00006.png', thumb: '/images/adventure/lure/scummvm-lure-00006.png' },{ src: '/images/adventure/lure/scummvm-lure-00007.png', thumb: '/images/adventure/lure/scummvm-lure-00007.png' },{ src: '/images/adventure/lure/scummvm-lure-00009.png', thumb: '/images/adventure/lure/scummvm-lure-00009.png' },{ src: '/images/adventure/lure/scummvm-lure-00010.png', thumb: '/images/adventure/lure/scummvm-lure-00010.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00000.png', thumb: '/images/adventure/lure/scummvm-lure-1-00000.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00001.png', thumb: '/images/adventure/lure/scummvm-lure-1-00001.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00002.png', thumb: '/images/adventure/lure/scummvm-lure-1-00002.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00003.png', thumb: '/images/adventure/lure/scummvm-lure-1-00003.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00006.png', thumb: '/images/adventure/lure/scummvm-lure-1-00006.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00007.png', thumb: '/images/adventure/lure/scummvm-lure-1-00007.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00008.png', thumb: '/images/adventure/lure/scummvm-lure-1-00008.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00012.png', thumb: '/images/adventure/lure/scummvm-lure-1-00012.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00013.png', thumb: '/images/adventure/lure/scummvm-lure-1-00013.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00015.png', thumb: '/images/adventure/lure/scummvm-lure-1-00015.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00016.png', thumb: '/images/adventure/lure/scummvm-lure-1-00016.png' },{ src: '/images/adventure/lure/scummvm-lure-1-00017.png', thumb: '/images/adventure/lure/scummvm-lure-1-00017.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/1134/lure-of-the-temptress/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Revolution Software" /><category term="Virgin Interactive Entertainment" /><category term="Virtual Theatre" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/lure/scummvm-lure-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/lure/scummvm-lure-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dallas Quest (Datasoft) - 1984</title><link href="https://www.alexbevi.com/blog/2024/03/29/the-dallas-quest/" rel="alternate" type="text/html" title="Dallas Quest (Datasoft) - 1984" /><published>2024-03-29T09:45:36-04:00</published><updated>2024-03-29T21:05:20-04:00</updated><id>https://www.alexbevi.com/blog/2024/03/29/the-dallas-quest</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/03/29/the-dallas-quest/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/The_Dallas_Quest">The Dallas Quest</a> is a graphic adventure game based on the television soap opera Dallas. The game was programmed by James Garon for the TRS-80 Color Computer and published by Tandy Corporation in 1984. It was the second game in the “Animated Adventure” series, following The Sands of Egypt, and uses the same split-screen display. Datasoft published versions for the Apple II, Atari 8-bit family, and Commodore 64 in the same year.</p>

<p><img src="/images/adventure/dallas/trs80-4.gif" alt="" />
<em>TRS-80 version</em></p>

<p>When a game is faithful to the poor writing and wildly implausible plot conventions of a soap opera, does that make it a bad game or an effective adaptation of its source material? In any case, this game situates you as a private investigator hired by Sue Ellen to find a map to hidden oil fields, in hopes to accumulate enough wealth to escape the sinister influence of J.R. Sue Ellen offers you a reward of $2 million for the map. You snoop around the grounds of the South Fork Ranch, superficially interacting with much-loved characters from the TV show and an assortment of extras from the animal kingdom. You must avoid J.R. who would like to put a stop to Sue Ellen’s plans. So far, so good.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-07-53-44.png" alt="" />
<em>Apple II version</em></p>

<p>Your travels ultimately lead you to the jungles around Playa Peligro, in South America, where you overcome a series of obstacles by using various techniques, but mostly by doping a friendly monkey with tobacco – a firm reminder that we’re descending beneath even soap opera plot conflicts and sitting squarely in an early-‘80s text adventure game, with all of the internal logic-twisting that entails.<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/dallas/trs80-0.gif" alt="" /></p>

<p>Though my primary goal for this series I’m working through is to experience as many adventure games as possible, a secondary goal is to play them on as many different systems as possible. This is likely the only <a href="https://en.wikipedia.org/wiki/TRS-80">TRS-80</a> title I’ll have the opportunity to play, and getting up and running with <a href="http://48k.ca/trs80gp.html">trs80gp</a> proved to be fairly straightforward.</p>

<p><img src="/images/adventure/dallas/trs80-8.gif" alt="" /></p>

<p>The game seems to follow the characters from the <a href="https://en.wikipedia.org/wiki/Dallas_(1978_TV_series)">“Dallas” soap opera</a>, which I have no familiarity. Though I’d heard the <a href="https://en.wikipedia.org/wiki/Who_shot_J.R.%3F">“Who shot J.R”</a> catch phrase when I was a kid, I didn’t actually know it could be attributed to this show until many years later.</p>

<p>Since I don’t know the characters or the show I’m going to gloss over this as the game really doesn’t do anything to introduce anyone. You sort of need to know who everyone is, but not having background or context doesn’t affect the gameplay much as there no character development as you progress.</p>

<p><img src="/images/adventure/dallas/trs80-13.gif" alt="" /></p>

<p>I never had a TRS-80, but I can honestly say I was impressed with the quality of the graphics of this game - even if there only seemed to be a couple colours ever used. If you listen to the <a href="https://youtu.be/-Yd_Pe183lU?t=35">game’s intro music</a> you can make out that this is definitely a rendition of the <a href="https://www.youtube.com/watch?v=8sKX3tWaOew">TV show’s intro music</a>.</p>

<p><img src="/images/adventure/dallas/trs80-14.gif" alt="" />
<em>After getting the monkey to free me from the parachute the game craps out</em></p>

<p>Though I was enjoying the TRS-80 playthrough, I could only go so far before the game errored out. I wasn’t sure if this was a bad disk image, emulation problem or something else but I never ended up figuring it out so wound up starting over again using an Apple II emulator and ROM instead.</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-07-46-55.png" alt="" /></p>

<p>Switching over to the Apple II version of the game lets you once again experience the glory of the cracktro scene. Though not animated or interactive, I still appreciate the work that these programmers put into these digital taggings.</p>

<p>I might do a deeper dive into this topic in the future, but for now … back to trying to find this map that leads to an oil field …</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-07-57-48.png" alt="" /></p>

<p>This game is a lot goofier than I would have expected. Maybe this is what the writing on the show was like, but I have no real interest in finding out so feel free to let me know in the comments :)</p>

<p>Apparently the solution to at least three puzzles in this game involves giving the monkey that’s following you tobacco - so make sure you close the pouch after you give it to him so you don’t drop any. You’ll be needing that tobacco before you know it ;)</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-07-59-59.png" alt="" />
<em>You’ll die occasionally, so make sure you remember to save</em></p>

<p>The layout of the game is actually pretty intuitive. The screen is split between the text parser and scene rendering, and you also have a clue counter, move counter and list of exits. The exits are useful as at a glance you know what direction(s) you can go to leave any screen.</p>

<p>You can type <code class="language-plaintext highlighter-rouge">CLUE</code> on most screens to get some help. I definitely found myself doing a “save-clue-load” loop on more than one occasion to move the game along.</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-08-20-47.png" alt="" /></p>

<p>I’m guessing that the complexity of the puzzles later in the game are an artifact of the time at which this game was made. Nothing you’re required to do is grounded in sound logic and you typically end up resorting to the clue system or the walkthrough.</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-08-03-05.png" alt="" /></p>

<p>Though I died … a lot … I actually didn’t find it to be nearly as bad as a Sierra Online game. The main challenge for me was that progressing through the game didn’t feel natural or intuitive.</p>

<p>It’s possible my lack of familiarity with the property the game is based on might have contributed to this, but honestly I think this is just an artifact of early 80’s game design.</p>

<p><img src="/images/adventure/dallas/screenshot-2024-March-29-08-27-03.png" alt="" /></p>

<p>The Dallas Quest is interesting in that it was an early adventure game based on a popular TV show (at the time). These types licensed tie-ins are usually reserved for movies (like <a href="/blog/2021/08/30/labyrinth/">Labyrinth: The Computer Game)</a> so I guess that should speak to how popular this show must have been.</p>

<p>Other than the intro music and a couple segments where you have to play a bugle there isn’t much in the way of sound effects or music. The graphics are decent (for the time) and I had a lot of fun mucking around with a TRS-80 emulator - but I don’t think there’s a modern audience for this title.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Dallas Quest</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Datasoft">Datasoft</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Datasoft</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1984</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Commodore 64, Apple IIe, Atari 8-bit, TRS-80 Color Computer</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/89763"><em>How Long To Beat?</em></a></td>
      <td>2 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>TRS-80 via <a href="http://48k.ca/trs80gp.html">trs80gp</a> / Apple II via <a href="https://paleotronic.com/software/microm8/">microM8</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>31%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-47-21.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-47-21.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-48-45.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-48-45.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-50-11.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-50-11.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-50-55.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-50-55.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-51-22.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-51-22.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-53-15.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-53-15.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-54-23.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-54-23.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-55-23.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-55-23.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-57-02.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-57-02.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-58-26.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-58-26.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-07-59-25.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-07-59-25.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-08-06-35.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-08-06-35.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-08-07-59.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-08-07-59.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-08-15-52.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-08-15-52.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-08-26-00.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-08-26-00.png' },{ src: '/images/adventure/dallas/screenshot-2024-March-29-08-27-16.png', thumb: '/images/adventure/dallas/screenshot-2024-March-29-08-27-16.png' },{ src: '/images/adventure/dallas/trs80-1.gif', thumb: '/images/adventure/dallas/trs80-1.gif' },{ src: '/images/adventure/dallas/trs80-3.gif', thumb: '/images/adventure/dallas/trs80-3.gif' },{ src: '/images/adventure/dallas/trs80-5.gif', thumb: '/images/adventure/dallas/trs80-5.gif' },{ src: '/images/adventure/dallas/trs80-6.gif', thumb: '/images/adventure/dallas/trs80-6.gif' },{ src: '/images/adventure/dallas/trs80-7.gif', thumb: '/images/adventure/dallas/trs80-7.gif' },{ src: '/images/adventure/dallas/trs80-9.gif', thumb: '/images/adventure/dallas/trs80-9.gif' },{ src: '/images/adventure/dallas/trs80-10.gif', thumb: '/images/adventure/dallas/trs80-10.gif' },{ src: '/images/adventure/dallas/trs80-11.gif', thumb: '/images/adventure/dallas/trs80-11.gif' },{ src: '/images/adventure/dallas/trs80-12.gif', thumb: '/images/adventure/dallas/trs80-12.gif' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/22977/the-dallas-quest/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Datasoft" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/dallas/trs80-2.gif" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/dallas/trs80-2.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Codename: ICEMAN (Sierra On-Line) - 1989</title><link href="https://www.alexbevi.com/blog/2024/03/20/codename-iceman/" rel="alternate" type="text/html" title="Codename: ICEMAN (Sierra On-Line) - 1989" /><published>2024-03-20T06:26:45-04:00</published><updated>2024-03-26T05:44:07-04:00</updated><id>https://www.alexbevi.com/blog/2024/03/20/codename-iceman</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/03/20/codename-iceman/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Codename:_ICEMAN">Codename: ICEMAN</a> is a graphical adventure game made with the SCI engine and published by the American computer game company Sierra On-Line in 1990. The lead designer was Jim Walls, who also created several Police Quest games.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00001.png" alt="" /></p>

<p>In the beginning of the 21st century, Earth is experiencing a global oil shortage. Surprisingly, Tunisia remains one of the few countries still in possession of large quantities of high-quality oil. USA and Soviet governments race each other in their attempts to purchase as much oil as possible. Finally, the Soviets take a step further and kidnap the US ambassador, hoping to provoke an international incident. Naval Officer Johnny Westland is sent to Tunisia with the order of rescuing the ambassador and preventing further escalation of the conflict.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00014.png" alt="" /></p>

<p>Code-Name: Iceman is primarily an adventure game similar to Sierra’s other works in that genre. The player navigates the protagonist in eight different directions from third-person view, and types text commands to interact with the environment. The command <code class="language-plaintext highlighter-rouge">LOOK</code> may be typed separately and lead to different text descriptions depending on where on screen the protagonist is positioned. The game is similar to Police Quest series in that it relies on realistic procedures, in this case military instructions, first aid, etc. The player may reach dead ends and resort to restoring an earlier save if some of these procedures are not followed properly. In addition, a considerable portion of the game consists of submarine simulation, requiring the player to navigate a submarine and fight enemy craft.<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00034.png" alt="" /></p>

<p>I am a huge fan of the Police Quest series, and I had high expectations for this game since it was also designed by Jim Walls. The EGA artwork is beautiful and the text parser is very forgiving when you’re trying to describe how you want to interact with the current scene.</p>

<p>Like other text parser games you need to type out every command, so if you want to pick something up you need to move Johnny close to the desired object and type <code class="language-plaintext highlighter-rouge">PICK UP</code>.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00003.png" alt="" /></p>

<p>Once you leave the first screen and venture off to the left you’ll meet a bunch of people and ask to join their volleyball game. The ball floats off and someone goes in after it … and then almost drowns.</p>

<p>At this point you’re introduced to the first of many many many sequences in this game that rely heavily on following documented procedures laid out in the game’s <a href="https://www.mocagh.org/sierra/iceman-manual.pdf">manual</a>.</p>

<p>You need to perform CPR to save the girl that almost drowned, but this (like so many other parts of this game) needs to be done “by the book”.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00017.png" alt="" />
<em>Make sure you actually read the manual before playing this game</em></p>

<p>The story progresses and you’re called back to active duty. There’s been a kidnapping and you need to make your way to Tunisia to rescue the ambassador, which you’ll be responsible for aboard your nuclear submarine.</p>

<p>Though teh story is interesting and definitely held my attention, I have no idea who the actual intended audience for this game was supposed to be. Nothing you do in this game is intuitive, and almost every game mechanic and sequence will require referring back to the manual.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00036.png" alt="" />
<em>You’ll refer back to this item several times during the game</em></p>

<p>I’m not sure if it’s copy protection or not, but you find a code book in the game that you need to use to decipher messages the radio operator on the sub gives you. For example he might say something like <em>“Washington: FI-D-B J-C-D”</em>, which you then use the code book to translate too <em>17-4-8 9-6-4</em>. You then refer to page X, row Y, word Z in the manual accordingly to get the word pair <em>OCEAN RUSSIAN</em>, which you type into the computer in your room to hopefully get the right message to progress with the game.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00030.png" alt="" /></p>

<p>If you follow procedure and inspect the equipment properly at some point before encountering an enemy ship you’ll be able to fix a broken cylinder, which you’ll have to properly machine first. This requires selecting the right dimensions from a series of prompts to ensure you’ve got everything “just right” before trying to fix the torpedo launch assembly (I think).</p>

<p>If you don’t do this just right you can’t engage enemies and you’ll die when you get to that sequence.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00042.png" alt="" /></p>

<p>Expect to die often in this game. I’ve played a lot of Sierra Online games and this playthrough likely had the most deaths I’ve ever experienced.</p>

<p>It’s not only because the game is hard, it’s that it’s tedious and the expectation that you’re following instructions perfectly at every given moment sets you up for constant failure.</p>

<p>On the plus side you get different (and sometimes entertaining) failure messages, but it’s so easy to die in this game that it artificially inflates the play time by 3x or 4x.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00026.png" alt="" /></p>

<p>There’s one minigame that you must play as you need to win a bottle of rum, but to do this you play a dice game that takes forever to complete. It’s sort of like yahtzee, instead of points you just win rounds - and you need to win many many rounds to proceed.</p>

<p>The game allows you to save and restore twice before the sailor claims you’re cheating and leaves - putting you in an unwinnable state.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00035.png" alt="" /></p>

<p>Since you’re the captain of a nuclear submarine you get to engage in a couple fight sequences throughout the game. You’re armed with a couple different types of torpedoes and decoys which you can use, but your supply is extremely limited so the battles can be extremely challenging.</p>

<p>I almost gave up on this game after the first sequence a I ended up using all my decoys in the first battle and found myself unable to win the second fight without them. I was extremely close to just watching through a <a href="https://www.youtube.com/watch?v=LbSp7JOAJpE">longplay video</a> and taking screenshots of their playthrough instead …</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00044.png" alt="" /></p>

<p>If you survive the sub battle, use the periscope and make sure to note down the locations of the island and oil rig, remember to pick up explosives in the sub, properly put on the dive gear and swim to the rig correctly without running out of air - you can place the explosives and blow up the rig.</p>

<p>Assuming you make it this far you can then try to gain entry to Tunisia, which also involves an extremely convoluted sequence of steps.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00045.png" alt="" /></p>

<p>Death awaits you at every turn, screen and decision you make and the game will continue to be frustrating and put you in unwinnable situations as you muddle your way through to your CIA contact who gives you her apartment keys where you can find supplies to steal a delivery driver’s clothes and van.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00048.png" alt="" /></p>

<p>If you’ve made it this far without a walkthrough, my hat goes off to you because I was basically just playing the game with the walkthrough open at all times. As a result I was able to make it to the end, kill the ambassador’s kidnappers and save him.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00051.png" alt="" />
<em>Thankfully you can just press F8 to skip this entire sequence and end the game</em></p>

<p>The final sequence involves driving a van up a hill to a helicopter while terrorists chase you. I never made it around the first corner, and likely died a dozen times trying.</p>

<p>If it wasn’t for the fact that the game lets you skip this sequence, I might have finally just said fuck it and moved on at this point - but I didn’t and was able to complete yet another entry in this journey I’ve undertaken.</p>

<p><img src="/images/adventure/iceman/scummvm-iceman-00052.png" alt="" /></p>

<p>Codename: ICEMAN is not a fun game, and I have no clue who the intended audience for this was. I didn’t really enjoy this experience at all, and found that even using a walkthrough I had a hard time making progress most of the time.</p>

<p>If this were a “sub simulator” title maybe I’d feel a little differently, but it’s an adventure game so my expectation was that you’d be able to explore and discover - but that’s not the case. Keep the manual open - or just use a walkthrough.</p>

<p>Though the music is pretty good, and the story is compelling, the game itself is frustrating and punishing. I can’t imagine anyone actually likes this game and unless you’re a glutton for punishment I wouldn’t recommend it.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Codename: ICEMAN</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Sierra On-Line</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>November 1989</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Amiga, Atari ST, Apple Macintosh</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16686"><em>How Long To Beat?</em></a></td>
      <td>2.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/codenameiceman.aspx">Walkthrough</a>, <a href="https://www.mocagh.org/sierra/iceman-manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>10</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>12</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>39%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/iceman/scummvm-iceman-00002.png', thumb: '/images/adventure/iceman/scummvm-iceman-00002.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00004.png', thumb: '/images/adventure/iceman/scummvm-iceman-00004.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00005.png', thumb: '/images/adventure/iceman/scummvm-iceman-00005.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00006.png', thumb: '/images/adventure/iceman/scummvm-iceman-00006.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00007.png', thumb: '/images/adventure/iceman/scummvm-iceman-00007.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00008.png', thumb: '/images/adventure/iceman/scummvm-iceman-00008.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00009.png', thumb: '/images/adventure/iceman/scummvm-iceman-00009.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00010.png', thumb: '/images/adventure/iceman/scummvm-iceman-00010.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00011.png', thumb: '/images/adventure/iceman/scummvm-iceman-00011.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00012.png', thumb: '/images/adventure/iceman/scummvm-iceman-00012.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00013.png', thumb: '/images/adventure/iceman/scummvm-iceman-00013.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00015.png', thumb: '/images/adventure/iceman/scummvm-iceman-00015.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00016.png', thumb: '/images/adventure/iceman/scummvm-iceman-00016.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00018.png', thumb: '/images/adventure/iceman/scummvm-iceman-00018.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00019.png', thumb: '/images/adventure/iceman/scummvm-iceman-00019.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00020.png', thumb: '/images/adventure/iceman/scummvm-iceman-00020.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00021.png', thumb: '/images/adventure/iceman/scummvm-iceman-00021.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00022.png', thumb: '/images/adventure/iceman/scummvm-iceman-00022.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00023.png', thumb: '/images/adventure/iceman/scummvm-iceman-00023.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00024.png', thumb: '/images/adventure/iceman/scummvm-iceman-00024.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00025.png', thumb: '/images/adventure/iceman/scummvm-iceman-00025.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00027.png', thumb: '/images/adventure/iceman/scummvm-iceman-00027.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00028.png', thumb: '/images/adventure/iceman/scummvm-iceman-00028.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00029.png', thumb: '/images/adventure/iceman/scummvm-iceman-00029.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00031.png', thumb: '/images/adventure/iceman/scummvm-iceman-00031.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00032.png', thumb: '/images/adventure/iceman/scummvm-iceman-00032.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00033.png', thumb: '/images/adventure/iceman/scummvm-iceman-00033.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00037.png', thumb: '/images/adventure/iceman/scummvm-iceman-00037.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00038.png', thumb: '/images/adventure/iceman/scummvm-iceman-00038.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00039.png', thumb: '/images/adventure/iceman/scummvm-iceman-00039.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00040.png', thumb: '/images/adventure/iceman/scummvm-iceman-00040.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00041.png', thumb: '/images/adventure/iceman/scummvm-iceman-00041.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00043.png', thumb: '/images/adventure/iceman/scummvm-iceman-00043.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00046.png', thumb: '/images/adventure/iceman/scummvm-iceman-00046.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00047.png', thumb: '/images/adventure/iceman/scummvm-iceman-00047.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00049.png', thumb: '/images/adventure/iceman/scummvm-iceman-00049.png' },{ src: '/images/adventure/iceman/scummvm-iceman-00050.png', thumb: '/images/adventure/iceman/scummvm-iceman-00050.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/436/code-name-iceman/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/iceman/scummvm-iceman-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/iceman/scummvm-iceman-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MongoDB and Load Balancer Support</title><link href="https://www.alexbevi.com/blog/2024/03/08/mongodb-and-load-balancer-support/" rel="alternate" type="text/html" title="MongoDB and Load Balancer Support" /><published>2024-03-08T08:37:25-05:00</published><updated>2024-03-08T09:31:19-05:00</updated><id>https://www.alexbevi.com/blog/2024/03/08/mongodb-and-load-balancer-support</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/03/08/mongodb-and-load-balancer-support/"><![CDATA[<h2 id="overview">Overview</h2>

<p>A load balancer enhances your application’s scalability, availability, and performance by efficiently distributing traffic across multiple servers based on a number of <a href="https://kemptechnologies.com/load-balancer/load-balancing-algorithms-techniques">algorithms and techniques</a> - but what about your database? MongoDB is a distributed database, but can it be placed behind a load balancer?</p>

<p>Astute readers of MongoDB’s Node.js driver’s <a href="https://github.com/mongodb/node-mongodb-native/tree/main/test#load-balanced"><code class="language-plaintext highlighter-rouge">test</code> README</a> may have noticed at some point that there is mention of a testing methodology for load balancers, and <a href="https://www.mongodb.com/community/forums/t/load-balancing-mongos/247301">as some in the community have found</a> you can find <a href="https://jira.mongodb.org/browse/SERVER-58502">public <code class="language-plaintext highlighter-rouge">SERVER</code> tickets</a> that also allude to this functionality existing.</p>

<p>Digging further you’ll find the <a href="https://github.com/mongodb/specifications/blob/master/source/load-balancers/load-balancers.rst"><em>Load Balancer Support</em></a> specification for MongoDB’s drivers which states <em>“To specify to the driver to operate in load balancing mode, a connection string option of <code class="language-plaintext highlighter-rouge">loadBalanced=true</code> MUST be added to the connection string”</em> … but how do you actually make that work?</p>

<p>In this post we’re going to explore why MongoDB nodes couldn’t previously be placed behind an <a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">L4 load balancer</a>, and what changed in MongoDB 5.3 that may actually make this possible!</p>

<h3 id="replication">Replication</h3>

<p>Coordination of data distribution and ensuring high availability is done via <a href="https://www.mongodb.com/docs/manual/replication/">replication</a>, which requires the cluster to be aware at all times which node is the <a href="https://www.mongodb.com/docs/manual/core/replica-set-members/#primary">primary</a> and which are <a href="https://www.mongodb.com/docs/manual/core/replica-set-members/#secondaries">secondaries</a>.</p>

<p>As there can only be one primary, any application targeting the cluster will need to be aware of the current topology as well, as trying to write to a secondary will fail:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nb">require</span> <span class="s1">'mongo'</span>
<span class="c1"># connect directly to a secondary host in a local replica set</span>
<span class="n">client</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'mongodb://localhost:27018/test?directConnection=true'</span><span class="p">)</span>
<span class="n">collection</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="ss">:foo</span><span class="p">]</span>
<span class="n">collection</span><span class="p">.</span><span class="nf">insert_one</span> <span class="ss">bar: </span><span class="s2">"baz"</span>

<span class="c1"># =&gt; Mongo::Error::OperationFailure: [10107:NotWritablePrimary]: not primary (on localhost:27018, legacy retry, attempt 1)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>All official MongoDB drivers implement the <a href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst"><em>Server Discovery and Monitoring</em></a> specification to ensure applications can route requests to the appropriate servers (as outlined in the <a href="https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md"><em>Server Selection</em></a> specification). When you have a single application instance with a single connection pool (as outlined in the <a href="https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md"><em>Connection Monitoring and Pooling</em></a> specification) the number of connections to the cluster is easy to identify, but application deployment configurations can vary and scale.</p>

<p>Thanks to MongoDB drivers all consistently providing connection monitoring and pooling functionality, external connection pooling solutions aren’t required (ex: <a href="https://www.pgpool.net/mediawiki/index.php/Main_Page">Pgpool</a>, <a href="https://www.pgbouncer.org/">PgBouncer</a>). This allows applications built using MongoDB drivers to be resilient and scalable out of the box, but based on what we understand regarding <a href="https://alexbevi.com/blog/2023/07/04/how-many-connections-is-my-application-establishing-to-my-mongodb-cluster/">the number of connections applications establish to MongoDB clusters</a> it stands to reason that at a certain point as our application deployments increase, so will our connections.</p>

<p><strong>Can I use a load balancer though?</strong></p>

<p>Due to the need for these additional monitoring connections it has been difficult (impossible?) to place a load balancer between applications and a MongoDB replica set - though adventurous users have developed <a href="https://blog.danman.eu/mongodb-haproxy/">some interesting HAProxy configurations</a> in the past to try and solve this problem. The problem you’d face is that though read requests can be routed to any available server, write requests <em>must</em> target the cluster primary.</p>

<p>For the sake of argument you may ask <em>“what if I had a 100% read workload?”</em>. In that case you <em>could</em> put your hosts behind a load balancer, but you’ll likely run into issues as soon as you try and iterate a cursor (see <a href="https://www.mongodb.com/docs/manual/reference/command/getMore/"><code class="language-plaintext highlighter-rouge">getMore</code></a>). Operations such as <a href="https://www.mongodb.com/docs/manual/reference/command/find/"><code class="language-plaintext highlighter-rouge">find</code></a> or <a href="https://www.mongodb.com/docs/manual/reference/command/aggregate/"><code class="language-plaintext highlighter-rouge">aggregate</code></a> return a cursor (<code class="language-plaintext highlighter-rouge">cursorId</code>) which only exists on the originating server the command targeted. Attempting to execute a <code class="language-plaintext highlighter-rouge">getMore</code> on the wrong server will result in a <code class="language-plaintext highlighter-rouge">CursorNotFound</code> error being returned, which can be <a href="https://alexbevi.com/blog/2021/12/29/troubleshooting-mongodb-cursor-xxxxxx-not-found-errors/">challenging to troubleshoot</a>.</p>

<h3 id="sharding">Sharding</h3>

<p>Fortunately, MongoDB already offers a form of “load balancing” for <a href="https://www.mongodb.com/docs/manual/sharding/#sharded-cluster">sharded clusters</a> in the form of the <a href="https://www.mongodb.com/docs/manual/core/sharded-cluster-query-router/">sharded cluster query router</a> (<code class="language-plaintext highlighter-rouge">mongos</code>).</p>

<p>Assuming the cluster is sharded and if there is more than one <code class="language-plaintext highlighter-rouge">mongos</code> instance in the <a href="https://www.mongodb.com/docs/manual/reference/glossary/#std-term-seed-list">connection seed list</a>, the driver determines which <code class="language-plaintext highlighter-rouge">mongos</code> is the “closest” (i.e. the member with the lowest average network round-trip-time) and calculates the latency window by adding the average round-trip-time of this “closest” <code class="language-plaintext highlighter-rouge">mongos</code> instance and the <code class="language-plaintext highlighter-rouge">localThresholdMS</code>. The driver will load balance randomly across the <code class="language-plaintext highlighter-rouge">mongos</code> instances that fall within the latency window.</p>

<p><strong>Can I use a load balancer though?</strong></p>

<p>Sharding introduces a routing layer between the application and the cluster members, which slightly simplifies how drivers route operations as there is no longer a need to track replica set state. You may think this would make placing a pool of <code class="language-plaintext highlighter-rouge">mongos</code>’ behind a load balancer straightforward, but as Craig Wilson describes in a <a href="http://craiggwilson.com/2013/10/21/load-balanced-mongos/">2013 blog post</a>, similar issues will still arise when trying to iterate cursors. Note that though Craig’s post references the <a href="https://www.mongodb.com/docs/manual/legacy-opcodes/">legacy opcodes</a>, the situation would be the same if using newer drivers that leverage <a href="https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#std-label-wire-op-msg"><code class="language-plaintext highlighter-rouge">OP_MSG</code></a> and <a href="https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#std-label-wire-op-compressed"><code class="language-plaintext highlighter-rouge">OP_COMPRESSED</code></a>.</p>

<p>Note that the <em>Server Selection</em> specification <a href="https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md#cursors">calls out that</a> <em>“Cursor operations […] do not go through the server selection process. Cursor operations must be sent to the original server that received the query […]”</em>. As this state information would not be tracked within the load balancer, issues would arise if a cursor operation were attempted and a balancer returned a different server where the cursor didn’t exist.</p>

<h3 id="operationcount-based-server-selection"><code class="language-plaintext highlighter-rouge">operationCount</code>-based Server Selection</h3>

<p>As it is a form of “load balancing” it’s worth just calling out that in an effort to alleviate runaway connection creation scenarios (“connection storms”) the drivers <a href="https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md#operationcount-based-selection-within-the-latency-window-multi-threaded-or-async">approximate an individual server’s load</a> by tracking the number of concurrent operations that node is processing (<code class="language-plaintext highlighter-rouge">operationCount</code>) and then routing operations to servers with less load. This should reduce the number of new operations routed towards nodes that are busier and thus increase the number routed towards nodes that are servicing operations faster or are simply less busy.</p>

<h2 id="load-balancer-support">Load Balancer Support</h2>

<p>When you see a ticket called <a href="https://jira.mongodb.org/browse/SERVER-58207">“Enable Feature flag for Support for Deploying MongoDB behind a L4 Load Balancer”</a> closed out as fixed for MongoDB
6.0.0-rc0 and 5.3.0-rc3 it’s hard not to get excited - but what does this mean? After doing a bit of digging you’ll find that <code class="language-plaintext highlighter-rouge">mongos</code>’ now support a proxy protocol which is configured via the <a href="https://github.com/mongodb/mongo/blob/r7.0.6/src/mongo/s/mongos_server_parameters.idl#L66-L74"><code class="language-plaintext highlighter-rouge">loadBalancerPort</code></a> startup parameter.</p>

<p>Given that there’s a driver specification, driver implementations (such as for the <a href="https://jira.mongodb.org/browse/NODE-3011">Node.js driver</a> and <a href="https://jira.mongodb.org/browse/RUBY-2515">Ruby driver</a>) and server support it should be possible to configure a sharded cluster to utilize the proxy protocol.</p>

<blockquote class="prompt-danger">
  <p>Before we proceed it’s worth calling out that this is not considered an officially supported configuration. Until MongoDB’s server team promotes this as a valid production configuration it should be considered experimental if used with a self-managed deployment.</p>
</blockquote>

<h3 id="configuration">Configuration</h3>

<p>For our test we’ll be configuring a single-shard sharded cluster with 5 <code class="language-plaintext highlighter-rouge">mongos</code>’ behind an <a href="https://www.haproxy.org/">HAProxy</a> load balancer. Assuming you’re already familiar with <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts">HAProxy and load balancing concepts</a>, we’ll be setting up a <a href="https://www.haproxy.com/documentation/haproxy-configuration-tutorials/load-balancing/tcp/#enable-tcp-mode">TCP proxy</a> to perform <code class="language-plaintext highlighter-rouge">roundrobin</code> balancing.</p>

<h4 id="1-setup-a-local-sharded-cluster">1. Setup a local sharded cluster</h4>

<p>First we need a local sharded cluster, which we’ll provision using <a href="https://github.com/aheckmann/m"><code class="language-plaintext highlighter-rouge">m</code> - the MongoDB version manager</a> and <a href="https://github.com/rueckstiess/mtools"><code class="language-plaintext highlighter-rouge">mtools</code></a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>m 7.0.6-ent
mlaunch init <span class="nt">--replicaset</span> <span class="nt">--nodes</span> 3 <span class="nt">--shards</span> 1 <span class="nt">--csrs</span> <span class="nt">--mongos</span> 5 <span class="nt">--binarypath</span> <span class="si">$(</span>m bin 7.0.6-ent<span class="si">)</span> <span class="nt">--bind_ip_all</span>
mlaunch stop
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This configuration will yield a single <a href="https://www.mongodb.com/docs/manual/core/sharded-cluster-shards/">shard</a> with 3 nodes, a <a href="https://www.mongodb.com/docs/manual/core/sharded-cluster-config-servers/#replica-set-config-servers">config server replica set</a> and 5 <code class="language-plaintext highlighter-rouge">mongos</code>’. Once started, we immediately stop the cluster as some additional (manual) configuration is required.</p>

<h4 id="2-update-the-cluster-configuration-to-enable-proxy-protocol">2. Update the cluster configuration to enable proxy protocol</h4>

<p>Since we need to modify the startup parameters for our <code class="language-plaintext highlighter-rouge">mongos</code>’ we’ll update the configuration file that <code class="language-plaintext highlighter-rouge">mlaunch</code> (part of <code class="language-plaintext highlighter-rouge">mtools</code>) uses.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s/ --port 27017 / --port 27017 --setParameter loadBalancerPort=37017 /g'</span> data/.mlaunch_startup
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s/ --port 27018 / --port 27018 --setParameter loadBalancerPort=37018 /g'</span> data/.mlaunch_startup
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s/ --port 27019 / --port 27019 --setParameter loadBalancerPort=37019 /g'</span> data/.mlaunch_startup
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s/ --port 27020 / --port 27020 --setParameter loadBalancerPort=37020 /g'</span> data/.mlaunch_startup
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s/ --port 27021 / --port 27021 --setParameter loadBalancerPort=37021 /g'</span> data/.mlaunch_startup
mlaunch start
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above commands just append a <a href="https://www.mongodb.com/docs/manual/reference/command/setParameter/"><code class="language-plaintext highlighter-rouge">setParameter</code></a> call as a command line option so we can configure the <code class="language-plaintext highlighter-rouge">loadBalancerPort</code> parameter of each <code class="language-plaintext highlighter-rouge">mongos</code>. Once completed we restart the cluster.</p>

<h4 id="3-configure-haproxy">3. Configure HAproxy</h4>

<p>As we’re using HAproxy for our test we’ll to build out our custom configuration. The example below will write to a <code class="language-plaintext highlighter-rouge">mongodb-lb.conf</code> file, which will then be read by <code class="language-plaintext highlighter-rouge">haproxy</code> to create our load balanced endpoint. I’m not going to go into detail as to what all the options below mean, but if you want to investigate further see <a href="https://www.haproxy.com/documentation/haproxy-configuration-manual/latest/">HAproxy’s configuration manual</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="nb">tee </span>mongodb-lb.conf <span class="o">&gt;</span> /dev/null <span class="o">&lt;&lt;</span><span class="no">EOT</span><span class="sh">
global
  log stdout local0 debug
  maxconn 4096

defaults
  log global
  mode tcp
  timeout connect  5000ms
  timeout client  30000ms
  timeout server  30000ms
  retries 3

default-server on-error fastinter error-limit 3 inter 3000ms fastinter 1000ms downinter 300s fall 3

frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

listen mongos
  bind      *:37000
  option    tcplog
  balance   roundrobin
  server    mongos01 *:37017 check send-proxy-v2
  server    mongos02 *:37018 check send-proxy-v2
  server    mongos03 *:37019 check send-proxy-v2
  server    mongos04 *:37020 check send-proxy-v2
  server    mongos05 *:37021 check send-proxy-v2
</span><span class="no">EOT

</span>haproxy <span class="nt">-f</span> mongodb-lb.conf <span class="o">&gt;</span> haproxy.log 2&gt;&amp;1 &amp;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To make monitoring a little easier you’ll notice we’ve enabled <a href="https://www.haproxy.com/blog/exploring-the-haproxy-stats-page">HAProxy’s stats frontend</a>.</p>

<h4 id="4-test-application-connectivity-through-the-load-balancer">4. Test application connectivity through the load balancer</h4>

<p>Since the <a href="https://www.mongodb.com/docs/mongodb-shell/">MongoDB Shell</a> uses the <a href="https://www.mongodb.com/docs/drivers/node/current/">Node.js driver</a> internally we can use to validate if our load balancer is configured properly. We’ve setup HAProxy to listen on port 37000, so we should be able to connect to that directly:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>mongosh <span class="nt">--quiet</span> <span class="s2">"mongodb://localhost:37000/test"</span>
MongoServerSelectionError: The server is being accessed through a load balancer, but this driver does not have load balancing enabled
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Seems the driver knows we’re trying to connect to a load balancer, but we’re missing an option. This is where the <code class="language-plaintext highlighter-rouge">loadBalanced=true</code> option comes into play. Appending this to our connection string will allow us to run an arbitrary workload successfully:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>mongosh <span class="nt">--quiet</span> <span class="s2">"mongodb://localhost:37000/test?loadBalanced=true"</span> <span class="nt">--eval</span> <span class="s2">"while(true) { result = db.foo.insertOne({ d: new Date() }); print(result); sleep(500); }"</span>
<span class="o">{</span>
  acknowledged: <span class="nb">true</span>,
  insertedId: ObjectId<span class="o">(</span><span class="s1">'65eb13b122c34af3037c094d'</span><span class="o">)</span>
<span class="o">}</span>
<span class="o">{</span>
  acknowledged: <span class="nb">true</span>,
  insertedId: ObjectId<span class="o">(</span><span class="s1">'65eb13b222c34af3037c094e'</span><span class="o">)</span>
<span class="o">}</span>
<span class="o">{</span>
  acknowledged: <span class="nb">true</span>,
  insertedId: ObjectId<span class="o">(</span><span class="s1">'65eb13b222c34af3037c094f'</span><span class="o">)</span>
<span class="o">}</span>
...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Success! It is worth noting though that this configuration works for us locally as we have direct control of the <code class="language-plaintext highlighter-rouge">mongos</code> processes startup parameters.</p>

<blockquote class="prompt-warning">
  <p>If you have a MongoDB Atlas sharded cluster, the <code class="language-plaintext highlighter-rouge">mongos</code>’ cannot manually be placed behind a load balancer as startup parameter configuration access is not available!</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<p>Now that we can successfully connect to our load balanced endpoint it’s worth doing a little chaos testing to see how workloads react. The script I shared previously just loops infinitely inserting documents into a collection - but what happens if we kill one or two <code class="language-plaintext highlighter-rouge">mongos</code> processes?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>mlaunch stop 27017
mlaunch stop 27019
mlaunch list
Detected mongod version: 7.0.6

PROCESS          PORT     STATUS     PID

mongos           27017    down       -
mongos           27018    running    28006
mongos           27019    down       -
mongos           27020    running    28013
mongos           27021    running    28016

config server    27025    running    27979

shard01
    mongod       27022    running    27994
    mongod       27023    running    27998
    mongod       27024    running    27991
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">mlaunch</code> I just stopped two of the query routers and waited for a while. The inserts kept on - inserting - so I guess we can consider that a successful test. Note that this is obviously not extensive and should not be taken as a guarantee of any sort, but if this is a configuration that interests you give it a shot and let me know what you find.</p>

<p><img src="/images/load-balancer-01.png" alt="" /></p>

<p>Don’t forget that you have a web-based stats UI configured that you can refer to 😉.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><category term="networking" /><category term="connections" /><category term="load-balancing" /><summary type="html"><![CDATA[Overview]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>