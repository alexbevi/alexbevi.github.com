<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.alexbevi.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.alexbevi.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-08-26T16:24:41-04:00</updated><id>https://www.alexbevi.com/feed.xml</id><title type="html">ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle><entry><title type="html">Linearize a Recursive Call Stack Using Thread Primitives</title><link href="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/" rel="alternate" type="text/html" title="Linearize a Recursive Call Stack Using Thread Primitives" /><published>2024-08-26T12:57:14-04:00</published><updated>2024-08-26T16:24:02-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/"><![CDATA[<h1 id="linearize-a-recursive-call-stack-using-thread-primitives">Linearize a Recursive Call Stack Using Thread Primitives</h1>

<blockquote class="prompt-tip">
  <p>Written by <a href="https://www.linkedin.com/in/advitimishra/">Adviti Mishra</a>, an intern on the MongoDB Ruby driver team</p>
</blockquote>

<p><a href="https://www.mongodb.com/docs/mongoid/current/">Mongoid</a> is an object document mapper (like an ORM) built on the <a href="https://www.mongodb.com/docs/ruby-driver/current/">MongoDB Ruby driver</a> that Ruby on Rails developers use to interact with their MongoDB data through model instances. When developers choose to <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#cascading-callbacks">cascade callbacks</a>, if their document has a large number of <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#embedded-associations">embedded documents</a>, they might encounter a <code class="language-plaintext highlighter-rouge">SystemStackError</code>. In this article, we walk through how we used <a href="https://docs.ruby-lang.org/en/master/Fiber.html">Fibers</a> — a lightweight thread primitive — in a non-concurrency related context of recursion to address this issue!</p>

<h2 id="background"><strong>Background</strong></h2>

<p>MongoDB is a document database that’s designed for scalability, flexibility, and high availability. It’s a non-relational database that uses JSON-like documents to store data.</p>

<p>Using Mongoid, Ruby on Rails developers working with MongoDB can leverage <a href="https://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a>-like referential associations as well as a directly embeddable variation known as embedded associations. Let’s first explore one type of document: embedded documents.</p>

<h3 id="embedded-documents"><strong>Embedded documents</strong></h3>

<p>Developers can store related data together by <em>embedding</em> these documents in their parent model. This enables them to retrieve the associated data in a single query.</p>

<p>In our example we will use throughout the article, we define a Parent class, a Child class, and a Grandchild class that contain embedded associations. First, we will create a parent document that <em>embeds</em> two children documents with the first child, <em>embedding</em> two grandchildren documents.</p>

<p>The document representation in MongoDB would look something like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813902"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138fe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"grand_children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813900"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813901"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138ff"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>This document was generated as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="nb">require</span> <span class="s1">'bundler/inline'</span>
<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

  <span class="n">gem</span> <span class="s1">'mongoid'</span><span class="p">,</span> <span class="s1">'9.0.0'</span>
<span class="k">end</span>

<span class="no">Mongoid</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">clients</span><span class="p">.</span><span class="nf">default</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">uri: </span><span class="s2">"mongodb://localhost:27017"</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># to indicate around callbacks should be fired for embedded documents</span>
<span class="no">Mongoid</span><span class="p">.</span><span class="nf">around_callbacks_for_embeds</span> <span class="o">=</span> <span class="kp">true</span>

<span class="c1"># Initial model definitions</span>
<span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Parent</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:children</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:grandchildren</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Grandchild</span> <span class="o">&lt;</span> <span class="no">Example</span><span class="p">;</span> <span class="k">end</span>

<span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 2 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, let’s say that every time the parent document is saved, we want to perform some logic on the parent document before, after, and around the save operation. An example of this would be logging the beginning of the operation, calculating and storing the time taken by the save operation, and logging the end of the operation. How exactly can we <em>hook</em> into this stage of the document lifecycle?</p>

<h3 id="callbacks"><strong>Callbacks</strong></h3>

<p><strong>Callbacks</strong>, in the context of a Mongoid application, are hooks into the lifecycle of a document’s persistence context. These hooks enable developers to perform logic before, after, and/or around (immediately before and immediately after) document lifecycle events like validate, create, update, save, and destroy.</p>

<p>Let’s modify our Example base class definition to include hooks into the before, after, and around events of the document’s <em>“save”</em> lifecycle.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>

  <span class="c1"># callbacks for the save operation</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] before callback"</span> <span class="p">}</span>
  <span class="n">around_save</span> <span class="ss">:log_around</span>
  <span class="n">after_save</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] after callback"</span> <span class="p">}</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">log_around</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (begin)"</span>
    <span class="k">yield</span> <span class="c1"># to yield control to the code block performing the save operation</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (end)"</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Mongoid depends on <a href="https://guides.rubyonrails.org/active_record_callbacks.html">ActiveRecord’s callbacks</a> implementation, with the relevant API for executing callbacks being <a href="https://www.rubydoc.info/github/mongoid/mongoid/Mongoid%2FInterceptable:run_callbacks"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#run_callbacks</code></a>. In our example, when <code class="language-plaintext highlighter-rouge">run_callbacks</code> is triggered, it will execute the <code class="language-plaintext highlighter-rouge">before_save</code> and <code class="language-plaintext highlighter-rouge">around_save</code> callbacks around the execution of the save operation, followed by the <code class="language-plaintext highlighter-rouge">after_save</code> callback.</p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> keyword in Ruby used when executing around callbacks is key.</p>

<p>Given that embedded documents are often used to store related data, sometimes, we may want the callbacks of embedded documents to run whenever a persistence operation is performed on the parent document. This phenomenon is known as <strong>cascading callbacks.</strong></p>

<p>💡 <strong>Illustration to build intuition:</strong></p>

<p>To illustrate how the callbacks <em>cascade</em> through the embedded documents, when we run the sample code above, the call to <code class="language-plaintext highlighter-rouge">parent.save</code> would produce the following output:</p>

<p><img src="/images/adviti-01.png" alt="" /></p>

<p>Having gained a better understanding of how callbacks cascade for embedded documents, we will now work on the implementation for the same. The task of running callbacks on embedded documents is abstracted away in a private API called <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#_mongoid_run_child_callbacks_with_around</code></a> and will be the function we will be working with moving forward.</p>

<h2 id="existing-implementation-mongoid-900-and-earlier"><strong>Existing implementation (Mongoid 9.0.0 and earlier)</strong></h2>

<p>Before we start coding, let’s first set some goals for our implementation and enumerate what <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> needs to know:</p>

<ol>
  <li>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</li>
  <li>All cascadable embedded documents need to have their callbacks executed.</li>
</ol>

<p>The implementation must also be elegant, readable, and simple to reason about so that working with it feels good (like <a href="https://www.artima.com/articles/the-philosophy-of-ruby">Matz tells us working with Ruby should</a>).</p>

<p>Next, let’s dive into the parameters <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> expects:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">kind</code>: the kind of callbacks to run (e.g., save, create, validate, etc.)</li>
  <li><code class="language-plaintext highlighter-rouge">children</code>: the list of embedded documents to run the callbacks on</li>
  <li><code class="language-plaintext highlighter-rouge">block</code>: executes the persistence operation the callbacks are being run for; this can either happen directly or after running any other callbacks</li>
</ol>

<p>Equipped with this, we will first analyze the <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187">old recursive implementation</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">child</span><span class="p">,</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>
  <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>
  <span class="k">elsif</span> <span class="n">tail</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="n">tail</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This function handles three cases:</p>

<ol>
  <li>There are zero embedded documents (<code class="language-plaintext highlighter-rouge">child.nil?</code>), and if a code block was provided, it will be run.</li>
  <li>There is one embedded document (<code class="language-plaintext highlighter-rouge">tail.empty?</code>) and its <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L113-L143"><code class="language-plaintext highlighter-rouge">run_callbacks</code></a> function will be invoked.</li>
  <li>There are more than one embedded documents, at which point <code class="language-plaintext highlighter-rouge">run_callbacks</code> will be called recursively.</li>
</ol>

<p>This recursive use case is where we can get into trouble. If we dig into the logic, it appears that <code class="language-plaintext highlighter-rouge">run_callbacks</code> yields to the custom block passed in that invokes <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> but with the parameter for children as the list of remaining documents (stored in <code class="language-plaintext highlighter-rouge">tail</code>).</p>

<p>This seems intuitive as well based on colorized output (see above), where each color corresponds to one invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code>.</p>

<p>To better understand how this recursive implementation can become problematic, let’s adjust the number of <code class="language-plaintext highlighter-rouge">Child</code> embedded documents our sample code will generate:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 750 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">750</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though the increased number of child embedded documents being generated may not seem like much, according to our Ruby runtime, it is… and running this example will now raise a <a href="https://ruby-doc.org/core-2.5.1/SystemStackError.html"><code class="language-plaintext highlighter-rouge">SystemStackError</code></a>.</p>

<pre><code class="language-txt">[...]/mongoid-9.0.0/lib/mongoid/config/options.rb:38:in `block (2 levels) in option': stack level too deep (SystemStackError)
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:177:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:183:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
         ... 8134 levels...
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:109:in `prepare_insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:21:in `insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/savable.rb:27:in `save'
        from test.rb:53:in `&lt;main&gt;'
</code></pre>

<p>There are well-defined base cases in <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks</code>, so there is no way this is a case of:</p>

<pre><code class="language-txt">a case of:
	a case of:
		a case of:
			a case of:
				a case of:
					a case of:
						a case of:
							…
</code></pre>
<p>Infinite recursion!</p>

<p><strong>So, how did the stack space get exhausted?!</strong></p>

<p>Well, in the general case, an invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> creates a stack frame for <code class="language-plaintext highlighter-rouge">run_callbacks</code>. When <code class="language-plaintext highlighter-rouge">run_callbacks</code> eventually yields to the block passed in, this block creates a stack frame for running <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> and so on.</p>

<p>As a result, there is at least one extra stack frame for every invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> which corresponds directly to the number of embedded documents, eventually reaching a depth that results in a <code class="language-plaintext highlighter-rouge">SystemStackError</code> being raised. The number of callbacks that can be added to the stack can vary from system to system, which makes it challenging to optimize the existing approach consistently.</p>

<p>Maybe there’s a better way to approach this …</p>

<h2 id="replacing-recursion-with-fibers-in-mongoid-901"><strong>Replacing recursion with fibers in Mongoid 9.0.1</strong></h2>

<h3 id="so-what-even-are-fibers"><strong>So, what even are fibers?</strong></h3>

<p>Fibers are thread primitives that are used for implementing lightweight cooperative concurrency. These are the two methods we will be using from the Fiber API:</p>

<ol>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-i-resume"><code class="language-plaintext highlighter-rouge">Fiber#resume</code></a> method starts/resumes running the fiber.</li>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-c-yield"><code class="language-plaintext highlighter-rouge">Fiber.yield</code></a> method is called from within the fiber to return control to the caller of the <code class="language-plaintext highlighter-rouge">Fiber#resume</code>. These two methods equip fibers with a feature that we will leverage. We can control the scheduling (unlike threads that are scheduled by the operating system).</li>
</ol>

<p>Fibers are typically used in concurrent contexts. However, we thought of using these two methods to somehow run callbacks based on a <a href="https://jira.mongodb.org/secure/attachment/480870/fiber-callbacks-exploration.rb">proof of concept</a> initially proposed by my mentor, <a href="https://github.com/jamis">Jamis Buck</a>!</p>

<h3 id="approach"><strong>Approach</strong></h3>

<p>To investigate this, I wanted to first answer these high-level questions:</p>

<ol>
  <li><strong>Bottom-up</strong>: How do callbacks work at the level of ActiveSupport in Ruby on Rails through <code class="language-plaintext highlighter-rouge">CallbackSequence</code>, <code class="language-plaintext highlighter-rouge">CallTemplate</code>, <code class="language-plaintext highlighter-rouge">Filters</code>, all the way up to <code class="language-plaintext highlighter-rouge">run_callbacks</code>?</li>
  <li><strong>Top-down</strong>: How does Mongoid identify a persistence operation, obtain a list of the embedded documents that callbacks can be cascaded to, and cascade the right callbacks for all of them using <code class="language-plaintext highlighter-rouge">run_callback</code>?</li>
  <li><strong>Middle-layer</strong>: At what point within the entire flow of callbacks (discovered through one and two) can fibers be used correctly?</li>
</ol>

<p>I spent the first few weeks of my internship understanding callbacks in the context of the holy trinity: Ruby on Rails, Mongoid, and fibers from the Ruby language. However, when my dreams started running on separate fibers that kept yielding to each other, I realized I had to touch some grass. It was when I was touching grass on a hike that I had my eureka moment — ironically inspired by recursion.</p>

<p>In the Programming and Data Structure class I TA’d, one mantra we would emphasize in the recursion unit was: <em>“Take the recursive leap of faith.”</em></p>

<p>The recursive leap of faith means:</p>

<ol>
  <li>Trust that the function you are implementing runs perfectly and returns the right value.</li>
  <li>Solely focus on figuring out how to depend on the function.</li>
</ol>

<p>Extrapolate this philosophy of trust to this project where <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> depends on Ruby on Rails’ ActiveSupport:</p>

<blockquote class="prompt-info">
  <p><strong>What if we trust that Ruby on Rails’ handling of callbacks is incredibly efficient and solely focus on <em>how</em> we depend on Ruby on Rails’ <code class="language-plaintext highlighter-rouge">run_callbacks</code> instead?</strong></p>
</blockquote>

<p>This helped us answer Question 3 above: At what point within the entire flow of callbacks can fibers be used correctly? Within <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> itself!</p>

<p>The fundamental idea underpinning the solution that I discovered is leveraging fibers in a <em>“hand-off”</em> fashion.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">hand_off</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span>
  <span class="c1"># creating fibers for each child in children</span>
  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> does work (begin)"</span>
      <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> finishes work (end)"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># resumes one fiber at a time</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>

  <span class="c1"># execute the block</span>
  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="c1"># resumes one fiber at a time in reverse</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> line runs the fiber for the 0th child. “Fiber for 0 does work (begin)” gets printed. When execution hits the <code class="language-plaintext highlighter-rouge">Fiber.yield</code> statement, control is returned to <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code>. This then runs the fiber for the next child. In this fashion, the work <em>“before”</em> the yield gets executed for all the children.</p>

<p>Now, the actual <em>“work”</em> can take place. Thus, <code class="language-plaintext highlighter-rouge">block&amp;.call</code> runs.</p>

<p>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> line runs the fiber for the last child. <em>“Fiber for 1 does work (end)”</em> gets printed. This then runs the fiber for the second-to-last child. In this fashion, the work <em>“after”</em> the yield gets executed for all the children.</p>

<p>Does this flow seem familiar? It is a linearized version of the bottleneck in the recursive call stack from the implementation in Mongoid 9.0 (and earlier)!</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> mimics running the before callback and the part of the around callback before the yield.</li>
  <li>The <code class="language-plaintext highlighter-rouge">block&amp;.call</code> mimics running the block passed in.</li>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> mimics the <em>“unfolding”</em> of the recursive algorithm by running the part of the around callback after the yield and the after callback.</li>
</ul>

<p>Isn’t this cool? Together, we have linearized the recursive call stack using a thread primitive!</p>

<p>In our case, <code class="language-plaintext highlighter-rouge">run_callbacks</code> does all the work we illustrated in the code block. To effectively hand off control between the fibers, the one tweak we need to make is that the block we pass into <code class="language-plaintext highlighter-rouge">run_callbacks</code> should yield the fiber.</p>

<p>The solution that we arrived at looks like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">children</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>

  <span class="k">return</span> <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span> <span class="k">if</span> <span class="n">children</span><span class="p">.</span><span class="nf">empty?</span>

  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
        <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fiber</span><span class="o">|</span>
    <span class="n">fiber</span><span class="p">.</span><span class="nf">resume</span>
    <span class="k">raise</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Errors</span><span class="o">::</span><span class="no">InvalidAroundCallback</span> <span class="k">unless</span> <span class="n">fiber</span><span class="p">.</span><span class="nf">alive?</span>
  <span class="k">end</span>

  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yay! Let’s now analyze how the two implementations fair for correctness and efficiency:</p>

<blockquote>
  <p><strong>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: Stack frames remember where to resume execution.</li>
    <li><em>Fiber-based implementation</em>: Each fiber resumes execution from the point it yielded.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>All cascadable embedded documents need to have their callbacks executed.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: A stack frame is created for each embedded document.</li>
    <li><em>Fiber-based implementation</em>: A fiber is created for each embedded document within one stack frame.</li>
  </ul>
</blockquote>

<p>As demonstrated previously, the recursive implementation stops working for embedded documents in the hundreds. On the other hand, the fibers implementation works for even 10,000+ embedded documents. Thus, you don’t need to worry about your application working or not working depending on the data you have (although, you should ideally not design your database to have tens of thousands of embedded documents).</p>

<p>The Fiber-based implementation we’ve discussed throughout this post was released in <a href="https://github.com/mongodb/mongoid/releases/tag/v9.0.1">Mongoid 9.0.1</a> if you want to go check it out. If you’re unsure how to get started with Mongoid, there are tutorials for <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-rails7/">Ruby on Rails</a> and <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-sinatra/">Sinatra</a> that can help start you on your journey to building something amazing with MongoDB and Ruby!</p>]]></content><author><name>Adviti Mishra</name></author><category term="Programming" /><category term="ruby" /><summary type="html"><![CDATA[Linearize a Recursive Call Stack Using Thread Primitives]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rendering MongoDB Driver Specifications as a Book</title><link href="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/" rel="alternate" type="text/html" title="Rendering MongoDB Driver Specifications as a Book" /><published>2024-08-26T07:36:01-04:00</published><updated>2024-08-26T08:27:58-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/"><![CDATA[<p>MongoDB’s <a href="https://github.com/mongodb/specifications">Drivers Specifications</a> have always been available on GitHub. Since the content <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/us/">license is extremely permissive</a> there are a number of things we could do to transform that work as long as we provide proper attribution.</p>

<p>Until recently, this content has always been maintained as <a href="https://docutils.sourceforge.io/rst.html">restructuredText</a> documents, however with <a href="https://jira.mongodb.org/browse/DRIVERS-2789">DRIVERS-2789</a> this content has all been converted to <a href="https://daringfireball.net/projects/markdown/">Markdown</a>. MongoDB decided to use this opportunity (via <a href="https://jira.mongodb.org/browse/DRIVERS-2881">DRIVERS-2881</a>) to <a href="https://specifications.readthedocs.io/en/latest/">publish the specifications to ReadTheDocs</a> using <a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html">MkDocs</a>, however I wanted to try taking an alternate approach to see how difficult it would be to automate publication of Markdown content in book format.</p>

<h2 id="configuration">Configuration</h2>

<p>Since the specifications are hosted on GitHub, I began by <a href="https://github.com/alexbevi/specifications">forking the repository to <code class="language-plaintext highlighter-rouge">alexbevi/specifications</code></a>. Instead of <code class="language-plaintext highlighter-rouge">MkDocs</code> I chose <a href="https://rust-lang.github.io/mdBook/"><code class="language-plaintext highlighter-rouge">mdBook</code></a> as the tool for rendering Markdown to HTML as creating a book was as simple as:</p>

<ol>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#booktoml">Defining a <code class="language-plaintext highlighter-rouge">book.toml</code></a> with basic configuration options</li>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#summarymd">Outlining the book structure in a <code class="language-plaintext highlighter-rouge">SUMMARY.md</code></a> file</li>
</ol>

<p>I <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/book.toml">defined my <code class="language-plaintext highlighter-rouge">book.toml</code></a> to indicate all my Markdown files would be in the <code class="language-plaintext highlighter-rouge">source/</code> directory, <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/source/SUMMARY.md">created a <code class="language-plaintext highlighter-rouge">source/SUMMARY.md</code></a> file with links to all the Markdown files I wanted in my book and was basically done.</p>

<p>Testing this out was as easy as running <code class="language-plaintext highlighter-rouge">mdbook serve --open</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>mdbook serve --open
2024-08-26 07:56:39 [INFO] (mdbook::book): Book building has started
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): It seems that there are both "README.md" and index.md under "/Users/alex/Workspace/specifications/source".
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): mdbook converts "README.md" into index.html by default. It may cause
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): unexpected behavior if putting both files under the same directory.
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): To solve the warning, try to rearrange the book structure or disable
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): "index" preprocessor to stop the conversion.
2024-08-26 07:56:39 [INFO] (mdbook::book): Running the html backend
2024-08-26 07:56:43 [INFO] (mdbook::cmd::serve): Serving on: http://localhost:3000
2024-08-26 07:56:43 [INFO] (mdbook): Opening web browser
2024-08-26 07:56:43 [INFO] (warp::server): Server::run; addr=[::1]:3000
2024-08-26 07:56:43 [INFO] (warp::server): listening on http://[::1]:3000
2024-08-26 07:56:43 [INFO] (mdbook::cmd::watch::poller): Watching for changes...
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mdBook</code> will process the <code class="language-plaintext highlighter-rouge">SUMMARY.md</code> file, generate HTML content based on the indexed Markdown files and open a preview in your default browser.</p>

<h2 id="automation">Automation</h2>

<p>Laying out the book and rendering it from Markdown to HTML turned out to be pretty easy, but MongoDB’s engineers continuously refine the specifications so anything we generate would go stale fairly quickly. What if we could leverage <a href="https://docs.github.com/en/actions">GitHub Actions</a> to refresh our fork of the <code class="language-plaintext highlighter-rouge">specifications</code> repository, rebuild our book and continuously publish as <a href="https://pages.github.com/">GitHub Pages</a>?</p>

<p>We’ll be publishing our repository to a GitHub Pages instance (see the <a href="https://docs.github.com/en/pages/quickstart">Quickstart for GitHub Pages</a> if needed), so the first step is to ensure this has been configured. Next we’ll setup workflow that GitHub Actions can use to:</p>

<ol>
  <li>Checkout the upstream repository</li>
  <li>Sync the upstream repository’s <code class="language-plaintext highlighter-rouge">master</code> branch with our fork’s default branch (<code class="language-plaintext highlighter-rouge">mkbook</code> in this case)</li>
  <li>Install <code class="language-plaintext highlighter-rouge">mdbook</code> and build our book based on the latest Markdown files</li>
  <li>Deploy the HTML contents from our build target (<code class="language-plaintext highlighter-rouge">book/</code>) to the branch GitHub pages is configured to use (<code class="language-plaintext highlighter-rouge">gh-pages</code> in this case)</li>
</ol>

<p>If you want to check out the latest version of this it’s at <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/.github/workflows/sync.yml"><code class="language-plaintext highlighter-rouge">.github/workflows/sync.yml</code></a>, but at the time of writing it looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="rouge-code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Scheduled</span><span class="nv"> </span><span class="s">Upstream</span><span class="nv"> </span><span class="s">Sync'</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span>  <span class="s1">'</span><span class="s">0</span><span class="nv"> </span><span class="s">8</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span>

  <span class="na">workflow_dispatch</span><span class="pi">:</span>  <span class="c1"># click the button on Github repo!</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">sync_test_mode</span><span class="pi">:</span> <span class="c1"># Adds a boolean option that appears during manual workflow run for easy test mode config</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Fork</span><span class="nv"> </span><span class="s">Sync</span><span class="nv"> </span><span class="s">Test</span><span class="nv"> </span><span class="s">Mode'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
        <span class="na">default</span><span class="pi">:</span> <span class="kc">false</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">sync_latest_from_upstream</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Sync latest commits from upstream repo</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 1: run a standard checkout action, provided by github</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout target repo</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="c1"># optional: set the branch to checkout,</span>
        <span class="c1"># sync action checks out your 'target_sync_branch' anyway</span>
        <span class="na">ref</span><span class="pi">:</span>  <span class="s">mkbook</span>
        <span class="c1"># REQUIRED if your upstream repo is private (see wiki)</span>
        <span class="c1"># persist-credentials: false</span>

    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 2: run the sync action</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Sync upstream changes</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">sync</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">aormsby/Fork-Sync-With-Upstream-action@v3.4.1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">target_sync_branch</span><span class="pi">:</span> <span class="s">mkbook</span>
        <span class="c1"># REQUIRED 'target_repo_token' exactly like this!</span>
        <span class="na">target_repo_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">upstream_sync_branch</span><span class="pi">:</span> <span class="s">master</span>
        <span class="na">upstream_sync_repo</span><span class="pi">:</span> <span class="s">mongodb/specifications</span>
        <span class="c1"># upstream_repo_access_token: $</span>

        <span class="c1"># Set test_mode true during manual dispatch to run tests instead of the true action!!</span>
        <span class="na">test_mode</span><span class="pi">:</span> <span class="s">$</span>

    <span class="c1"># Step 3: Display a sample message based on the sync output var 'has_new_commits'</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">New commits found</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'true'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "New commits were found to sync."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">No new commits</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'false'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "There were no new commits."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show value of 'has_new_commits'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install latest mdbook</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')</span>
        <span class="s">url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"</span>
        <span class="s">mkdir mdbook</span>
        <span class="s">curl -sSL $url | tar -xz --directory=./mdbook</span>
        <span class="s">echo `pwd`/mdbook &gt;&gt; $GITHUB_PATH</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build Book</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s"># This assumes your book is in the root of your repository.</span>
        <span class="s"># Just add a `cd` here if you need to change to another directory.</span>
        <span class="s">mdbook build</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">JamesIves/github-pages-deploy-action@4.1.7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">branch</span><span class="pi">:</span> <span class="s">gh-pages</span> <span class="c1"># The branch the action should deploy to.</span>
        <span class="na">folder</span><span class="pi">:</span> <span class="s">book</span> <span class="c1"># The folder the action should deploy.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that the above is configured to run on a <a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule"><code class="language-plaintext highlighter-rouge">schedule</code></a>, so GitHub Actions will fire once a day to check if there were any updates in the upstream repository that we may want to sync.</p>

<h2 id="results">Results</h2>

<p>Since I wrote about <a href="/blog/2024/05/17/peeling-the-mongodb-drivers-onion/">“Peeling the MongoDB Drivers Onion”</a> I wanted this to be included in the book as well, so this was included as the <a href="https://github.com/alexbevi/specifications/blob/mkbook/source/README.md"><code class="language-plaintext highlighter-rouge">source/README.md</code></a> file. The rest of the contents of the specification repository were untouched and are just being rendered by <code class="language-plaintext highlighter-rouge">mdBook</code>.</p>

<p>If you want to explore MongoDB’s Driver Specifications, you can now just click on through to <a href="https://alexbevi.com/specifications/">alexbevi.com/specifications</a> (or select “Specifications” from the menu) and explore these to your heart’s content :)</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[MongoDB’s Drivers Specifications have always been available on GitHub. Since the content license is extremely permissive there are a number of things we could do to transform that work as long as we provide proper attribution.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bargon Attack (Coktel Vision) - 1992</title><link href="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/" rel="alternate" type="text/html" title="Bargon Attack (Coktel Vision) - 1992" /><published>2024-08-06T06:29:18-04:00</published><updated>2024-08-07T07:34:45-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/06/bargon-attack</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Bargon_Attack">Bargon Attack</a> is an adventure game, originally released in Spain and France in 1992. The cyberpunk game uses stylized art presented in a 2.5D format.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00001.png" alt="" /></p>

<p>Bargon Attack is one of the less known adventures from Coktel Vision, though it was one of the first that introduced the unique interface that was used in many Coktel games that followed. It was also one of the first of Coktel’s games to use FMV technology in cut-scenes.</p>

<p>The gameplay is a mix of science fiction, cyberpunk and comedy elements. It takes place in the near future when an alien race named Bargon conquered the Earth and enslaved its people. You take a role of the young programmer who decides to put an end to the cruel aliens. You’ll travel through 20 or so locations. Each one consists of 1 to 3 screens, similar to other Coktel games.</p>

<p>Along your travels, you’ll face dangerous creatures and some strange alien technology. There are some occasions when you can die (though the option to replay the level is always available), plus the game also features several arcade sequences.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00002.png" alt="" /></p>

<p>The game starts off with some good ol’ fashion copy protection. I assumed ScummVM would allow me to bypass this, but if you happen to play an original copy in DOSBox or something else, the <a href="https://amiga.abime.net/games/view/bargon-attack#scans">scans</a> for these colour charts aren’t hard to find.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00007.png" alt="" /></p>

<p>Once you get past the copy protection you get into the main game, which is a fairly generic point and click adventure. Moving the cursor around the screen will call out areas you can interact with, and click on those will execute the associated action.</p>

<p>Unlike most adventure games, there are only a couple of verbs available, and they tend to just be to “look” at whatever is highlighted, or to pick it up if that’s an option.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00003.png" alt="" /></p>

<p>Picking up items will change the cursor to represent the item you just picked up, but you typically can’t use it right away so you need to right click to get your original cursor back. This was a bit cumbersome and unintuitive at first, but once you realize that’s how you’re supposed to play this game it wasn’t that big of a deal.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00011.png" alt="" /></p>

<p>The purpose of the game seems to be to follow this hooded guy around that you witnessed killing someone. It turns out that he’s from Bargon (and is a Bargonian?) and through people playing the game Bargon Attack, humans have somehow allowed Bargon … to Attack.</p>

<p>I really didn’t follow the plot at all, but there’s a computer at the end you need to put a disk into that for some reason or another will save the Earth.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00012.png" alt="" /></p>

<p>There aren’t a lot of items you need to pick up and use throughout the game, but the arm unit you get early on is actually sort of an interesting tool. You can pick up various “disks” throughout the game that give the arm unit different abilities, which can help you solve puzzles or give you clues as to what to do next.</p>

<p>The programs these disks contain are “shoot”, which lets you fire a beam at something (usually an enemy). A “mutate” program allows you to transform what you aim at, and “translate” can be used to decipher Bargonian text or speech.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00016.png" alt="" /></p>

<p>You’ll use the arm unit quite a bit as it’s the main way to advance through the game. The other way to advance through the game is with a walkthrough as a lot of the puzzles just aren’t that well designed and it’s very easy to get yourself killed.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00009.png" alt="" />
<em>Get used to this screen - it’s the only one you see when you mess up</em></p>

<p>Every time you die - which will happen a lot - you get the exact same <em>Game Over</em> screen. Thankfully the game allows you to just return to the same screen you just died on to try again, so if you forgot to save for a while you typically won’t lose much progress.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00004.png" alt="" />
<em>Make sure you write this pattern down …</em></p>

<p>It’s really not all that obvious what you’re supposed to be doing at any time during this game. Though you’ll meet a couple characters here and there, there’s no dialogue or interaction to speak of so those characters are no different than any other static asset in the game.</p>

<p>The story will progress via the cutscenes as you advance from section to section, but the story also doesn’t really make all that much sense - though they’re clearly trying to make it seem like there is one.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00010.png" alt="" />
<em>Oh goody, a filler arcade sequence</em></p>

<p>To break up the monotony (I guess) there is an arcade sequence early on … assuming you are able to make your way into the water. There’s absolutely no reason for this sequence to exist other than to kill time, so you need to mash your way through a bunch of crab things before they take away enough of your “health” to trigger another <em>Game Over</em>.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00014.png" alt="" /></p>

<p>Though there is absolutely no background music, and the sound effects are annoying at best - the game’s visuals are extremely well done. There really isn’t much to do on each screen you visit, but they are nice to look at.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00019.png" alt="" /></p>

<p>Since there’s little to no dialogue in the game, plot progression occurs through cutscenes that happen between each game section. You’ll learn that the Earth is destroyed and you have to go to Bargon to put some program in their super computer.</p>

<p>If you do this you save (restore?) the planet - which ends up being your ultimate goal in the game. After a handful of unintuitive puzzles on Bargon you’ll find the computer, make your way up an elevator and put the disk in drive #3 (you do get a clue about this earlier at least).</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00024.png" alt="" /></p>

<p>Yay, the game is over! I’m not a fan of Coktel Vision games, and so far in this review series some of the lowest scores belong to their titles. Bargon Attack is the best of these games so far, but that’s not saying much.</p>

<p>The intro in the version I played was at least voice acted, so that was a nice touch as this game is mostly devoid of sound. There is no background music at any point throughout the game, and the annoying sound effects that you get occasionally don’t really improve the experience.</p>

<p>The game really isn’t fun, the story isn’t compelling and the experience is lackluster at best. I was hoping to find something interesting to support this review, but I couldn’t. If you happen to be a fan of this game though, check out the reviews at <a href="https://advgamer.blogspot.com/search/label/Bargon%20Attack">The Adventurers Guild</a> on the topic as they’re clearly meant for you ;)</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Bargon Attack</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Coktel_Vision">Coktel Vision</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Coktel Vision</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1992</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Gob">Gob</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16676"><em>How Long To Beat?</em></a></td>
      <td>3 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/bargonattack.aspx">Walkthrough</a>, <a href="https://amiga.abime.net/manual/0001-0100/42_manual0.pdf?v=85">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>21%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/bargon/scummvm-bargon-00005.png', thumb: '/images/adventure/bargon/scummvm-bargon-00005.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00006.png', thumb: '/images/adventure/bargon/scummvm-bargon-00006.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00008.png', thumb: '/images/adventure/bargon/scummvm-bargon-00008.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00013.png', thumb: '/images/adventure/bargon/scummvm-bargon-00013.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00015.png', thumb: '/images/adventure/bargon/scummvm-bargon-00015.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00017.png', thumb: '/images/adventure/bargon/scummvm-bargon-00017.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00018.png', thumb: '/images/adventure/bargon/scummvm-bargon-00018.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00020.png', thumb: '/images/adventure/bargon/scummvm-bargon-00020.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00021.png', thumb: '/images/adventure/bargon/scummvm-bargon-00021.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00022.png', thumb: '/images/adventure/bargon/scummvm-bargon-00022.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00023.png', thumb: '/images/adventure/bargon/scummvm-bargon-00023.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/13178/bargon-attack/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Coktel Vision" /><category term="Gob" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Jurassic Park (Sega of America) - 1993</title><link href="https://www.alexbevi.com/blog/2024/07/15/jurassic-park/" rel="alternate" type="text/html" title="Jurassic Park (Sega of America) - 1993" /><published>2024-07-15T17:13:20-04:00</published><updated>2024-07-17T07:34:00-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/15/jurassic-park</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/15/jurassic-park/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Jurassic_Park_(Sega_CD_video_game)">Jurassic Park</a> is a 1994 point-and-click adventure game developed and published by Sega for the Sega CD. The video game is based on the 1993 film of the same name, and includes elements from Michael Crichton’s 1990 novel Jurassic Park, which the film is based upon.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.58.58.png" alt="" /></p>

<p>The story takes place after the events of the movie/book. You are sent back to Jurassic Park to retrieve dinosaur eggs from around the park and put them in an incubator. You only have 12 hours to retrieve one egg from every species of dino in the park. Unfortunately, shortly before arriving at the park, your helicopter crashes!<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.40.13.png" alt="" /></p>

<p>I didn’t have any Sega systems when I was growing up, so having an opportunity to play some of these games on either the Genesis or Sega CD is not something I’m going to pass up. I don’t really know anything about the system, according to the <a href="https://en.wikipedia.org/wiki/Sega_CD#Technical_specifications">technical specs</a> I guess the Sega CD was just an expansion unit for the Genesis, so it’s not going to really improve the look or feel of these games - though it did have a CPU that ran 5 MHz faster than the Genesis 💨.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.56.37.png" alt="" /></p>

<p>Once you hit <code class="language-plaintext highlighter-rouge">START</code> to begin the game, your objective is very succinctly splashed across the screen, you hear the crash and the adventure begins and you get to start trying to figure out the UI and how to interact with the game world.</p>

<p>The game splits the view into 3 “strips”. The top strip shows the currently selected item/action, the direction you’re facing, how much time you have left and your health. I don’t really know what the satellite icon represented and couldn’t find anything in the <a href="https://segaretro.org/images/f/fe/Jurassicpark_mcd_us_manual.pdf">manual</a> about it either.</p>

<p>The middle half of the screen is the game view, which is typically a 360 degree view of the current location. As you move the cursor left or right you can see the game screen scroll and the direction in the top strip will update accordingly.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.48.44.png" alt="" /></p>

<p>Moving the cursor around the screen will give you an idea what you can interact with or where you can go. The cursor helpfully turns into a little hand if you can pick something up, an arrow if you can move in a certain direction, or a magnifying glass so you can inspect the thing you’ve hovered over.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 08.00.17.png" alt="" /></p>

<p>There are quite a few items you can pick up and use, though where you can use things can be a bit unintuitive. As you move around the park there are paths blocked or doors that are inaccessible but the cursor doesn’t always give you a visually appropriate cue that there’s something you need to do - such as use an item.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 07.57.02.png" alt="" />
<em>Keep your eyes peeled for that green <code class="language-plaintext highlighter-rouge">X</code> cursor change</em></p>

<p>If you’ve got the cursor icon selected (and not an item) you may get a green <code class="language-plaintext highlighter-rouge">X</code>to show up as you sweep the cursor across the screen. This is typically an indication that you can use an item on that spot, but it’s up to you to pick the right item for the situation.</p>

<p>In the case of the above screenshot of the raptor’s nest, you need to throw a rock at the boulders to cause them to cave in and scare some of the raptors to run out of the cave - allowing you to sneak in and steal their eggs.</p>

<p>Speaking of rocks, make sure you pick them ALL UP! The game doesn’t tell you how many you have, but you’ll need at least 5-6 and some puzzles involve using 2 at a time.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.33.57.png" alt="" /></p>

<p>The bottom strip of the screen shows your permanent items, such as the night vision goggles or the motion detector. The latter is extremely useful when you’re navigating an area with dinosaurs as it lets you know what direction they might attack you from.</p>

<p>If you’ve picked up any dinosaur eggs it will also let you know. This reminder is important because the goal of the game is to get those eggs back to the incubator. If you hold onto the eggs for too long, the dinosaur inside dies.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 08.10.46.png" alt="" /></p>

<p>Every time you pick up eggs you should high tail it back to the visitor center to load the eggs into the incubator. You only need to collect one sample per dinosaur, so if a few sample die along the way you still have a bit of a buffer.</p>

<p>Pausing the game will also bring up a summary that lets you know how many eggs you’ve collected, along with how many samples have died.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 19.45.23.png" alt="" /></p>

<p>Navigating through this game is pretty straightforward, and though figuring out which items to use where isn’t always intuitive, you can typically just cycle through all your items on a given action area and trial and error your way to a solution.</p>

<p>Picking the wrong item will give audible feedback that you chose wrong, so it’s obvious you need to try again. The one exception I found was putting the gas in the boat.</p>

<p>For this puzzle you need to fill the boat with gas, but unlike <em>every other interaction in this game</em>, you need to hold down the <code class="language-plaintext highlighter-rouge">C</code> button to <em>keep</em> filling the tank until the cursor changes indicating you can now move in that direction.</p>

<p>This threw me off for a while because I would just “use” the item and expect it to work … but apparently you had to “keep using” it in this case.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-12 06.36.04.png" alt="" /></p>

<p>Jurassic Park incorporates an arcade shooter style mechanic as well. You can pick up various weapons throughout the game that you can use on the dinosaurs to get them out of your way, or distract/stun them.</p>

<p>When you select a weapon the cursor changes to a target and your ammo will be displayed at the top of the screen. You have <em>very</em> limited ammo, and you can only replenish your tranquilizer darts <em>once</em>.</p>

<p>These arcade sequences get harder and harder as the game goes on, and you have very limited health. I’m fairly certain you can top your health up as many times as you want at the visitor center, but having to constantly backtrack to do this is a pain in the ass.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-11 20.05.52.png" alt="" /></p>

<p>As you move between areas you’ll sometimes get a brief animation, which acts as a screen transition with some background music.</p>

<p>The sound effects and music definitely add some ambiance, but it’s a bit weird that none of the music from the movie was included. Not sure if this was a technical limitation, an oversight or something else - but having at least one entry from the iconic soundtrack on the title screen or something would have been a welcome addition.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.01.54.png" alt="" /></p>

<p>Right from the beginning the game lets you know you only have 12 hours to complete the task of incubating one of each dinosaur species’ eggs. If you can pull this off you’ll see a helicopter fly by and land, which you’ll have to get to - but first a group of 4 “bad guys” will try to take you out.</p>

<p>This final arcade sequence is <em>really</em> hard - especially if you don’t top up your tranquilizer dart supply. I had plenty of stunner charges, but these do nothing in this scenario so going into this fight with only 15 darts was a guaranteed game over …</p>

<p>I’m not really sure why these guys are trying to prevent me from getting to the helicopter, but for this sequence I was extremely grateful to be playing the game on an emulator. I was using save states pretty heavily here, and ended up using pause/frame-advance for the last enemy just to finish the game with like 1 health bar left.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.03.51.png" alt="" />
<em>Once the credits roll you’ll be greeted by the same “Game Over” screen as if you’d died</em></p>

<p>For an adventure game, Jurassic Park is definitely interesting. It’s sort of a cross between Myst and an arcade-style shooter. The fact that you’re on a timer adds a sense of urgency to the game, but your objectives are clear from the outset so you know what you’re trying to accomplish at all times.</p>

<p>My biggest issue with the game is how unintuitive a lot of the puzzles are. Getting the raptor key by throwing rocks into the water to make the water level rise wasn’t obvious - and once I did finally try throwing a rock in there it turns out I needed at least two rocks, so I had to backtrack (or reload) to make sure I came back to the area with the right items.</p>

<p>The T-Rex fight didn’t make a lot of sense either. The info disc you can watch in-game indicates you should shoot him in the cheek to stun him, so you do that a whole bunch but I don’t really know how you’d come to the conclusion you should use the gas grenades on him twice to get him to raise his head so you can dash under him into the sewers.</p>

<p><img src="/images/adventure/jp/Jurassic Park 2024-07-15 17.10.00.png" alt="" />
<em>Jump to any screen in the game using the handy debug menu</em></p>

<p>While researching this game I stumbled across <a href="https://www.mobygames.com/person/63182/doug-lanford/">Doug Landford</a>’s website, where he shares <a href="https://www.opusgames.com/games/jpark/jp.html">a blog post</a> about his experience working on this game - including how you can trigger the debug menu.</p>

<p>I enjoy learning about the behind the scenes experiences of the teams that build these games, as it can shed some light on how we ended up with the final product. It seems this game used <a href="https://en.wikipedia.org/wiki/QSound">QSound</a> to augment the audio, but this isn’t something I was able to experience (not sure if it’s emulated or not - but I don’t have a stereo setup anyway).</p>

<p>Overall the game isn’t bad, but I can’t imagine there’s much of an audience for this. Maybe if the game had taken advantage of the <a href="https://segaretro.org/Sega_Mouse">Sega mouse</a> it might have made the arcade sequences a bit more fun, but as an “adventure game” I think you can pass it up.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Jurassic Park</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sega_of_America">Sega of America</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sega_of_America">Sega</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>December 17, 1993</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Sega CD</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/4896"><em>How Long To Beat?</em></a></td>
      <td>5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>Sega CD via <a href="http://openemu.org/">OpenEmu</a> &gt; <a href="https://segaretro.org/Genesis_Plus_GX">Genesis Plus GX</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://gamefaqs.gamespot.com/genesis/563328-jurassic-park/faqs/5334">Walkthrough</a>, <a href="https://segaretro.org/images/f/fe/Jurassicpark_mcd_us_manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>36%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.42.56.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.42.56.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.43.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.43.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.45.18.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.45.18.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 19.48.18.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 19.48.18.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 20.08.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 20.08.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-11 20.09.12.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-11 20.09.12.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-12 06.42.43.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-12 06.42.43.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 19.56.55.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 19.56.55.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.01.37.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.01.37.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.17.51.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.17.51.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.25.13.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.25.13.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-14 20.28.07.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-14 20.28.07.png' },{ src: '/images/adventure/jp/Jurassic Park 2024-07-15 17.03.36.png', thumb: '/images/adventure/jp/Jurassic Park 2024-07-15 17.03.36.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/12129/jurassic-park/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sega" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/jp/Jurassic%20Park%202024-07-11%2019.39.35.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/jp/Jurassic%20Park%202024-07-11%2019.39.35.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Call Stack, But Make It Async!</title><link href="https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async/" rel="alternate" type="text/html" title="Call Stack, But Make It Async!" /><published>2024-07-12T11:15:50-04:00</published><updated>2024-07-16T09:21:46-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/12/call-stack-but-make-it-async/"><![CDATA[<blockquote class="prompt-tip">
  <p>Written by Neal Beeken (<a href="https://nbbeeken.github.io/">Blog</a>, <a href="https://github.com/nbbeeken">GitHub</a>) - Canonical URL is at <a href="https://medium.com/@MongoDB/call-stack-but-make-it-async-f912cb895ebd">medium.com</a></p>
</blockquote>

<p>In a recent release of the MongoDB Node.js driver (<a href="https://github.com/mongodb/node-mongodb-native/releases/tag/v6.5.0">v6.5.0</a>), the team completed the effort of getting all our asynchronous operations to report an accurate asynchronous stack trace to assist in pinpointing error origination. Here, I’ll walk you through what this feature of JavaScript is and how to obtain it at the low price of zero cost.</p>

<h2 id="calls-and-how-to-stack-them-">Calls and how to stack them 📚</h2>

<p>First, what is a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack">call stack</a>? A call stack is a hidden data structure that stores information about the active subroutines of a program - active subroutines being functions that have been called but have yet to complete execution and return control to the caller. The main function of the call stack is to keep track of the point to which each active subroutine should return control when it finishes executing.</p>

<p>Let’s go through an example. Take a program that parses a string from its arguments that is an equation like “2+2” and computes the result:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nf">main</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">splitString</span><span class="p">()</span>
      <span class="o">-&gt;</span> <span class="nf">stringLength</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">stringToNumber</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">add</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">printResult</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="k">return</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Most of us are familiar with the above procedural paradigm (whether from JavaScript, C, Java, or Python) where each step in the program is synchronous, so our call stack is a clear ordering of dependent procedures. For example, if <code class="language-plaintext highlighter-rouge">stringLength</code> fails, the call stack would contain <code class="language-plaintext highlighter-rouge">stringLength</code>, <code class="language-plaintext highlighter-rouge">splitString</code>, <code class="language-plaintext highlighter-rouge">parseString</code>, and <code class="language-plaintext highlighter-rouge">main</code> as active procedures that have yet to return to their callers. The error system of our runtime uses this stack trace to generate a helpful error trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:35
    throw new Error('cannot get string length')
          ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:35:11)
    at splitString (file://addNumbers.mjs:17:17)
    at parseString (file://addNumbers.mjs:11:19)
    at main (file://addNumbers.mjs:4:5)
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="the-async-wrench-">The async wrench 🔧</h3>
<p>Everything changes when we shift to an asynchronous programming model, as the introduction of asynchronous work means we no longer have strictly dependent procedures. Essentially, async programming is about setting up tasks and adding handling that will be invoked sometime later when the task is complete.</p>

<p>Let’s add I/O (a read from standard in) into our program to see how this changes our call stack:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nf">main</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="nf">readStdin</span><span class="p">(</span><span class="nx">handleUserInput</span><span class="p">)</span>
<span class="c1">// When the user finishes typing</span>
<span class="nf">handleUserInput</span><span class="p">()</span>
<span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">splitString</span><span class="p">()</span>
    <span class="o">-&gt;</span> <span class="nf">stringLength</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, main’s only job is to ask the runtime to read from stdin and invoke a function of our choice when it is done doing so. This means main is no longer an active procedure; it returns, leaving it up to the runtime to keep the process running until it has input from stdin to hand back to our function <code class="language-plaintext highlighter-rouge">handleUserInput</code>.</p>

<p>Here’s what the stack trace looks like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:42
    throw new Error('cannot get string length')
    ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:42:11)
    at splitString (file://addNumbers.mjs:24:17)
    at parseString (file://addNumbers.mjs:18:19)
    at ReadStream.handleUserInput (file://addNumbers.mjs:11:5)
    at ReadStream.emit (node:events:511:28)
    at addChunk (node:internal/streams/readable:332:12)
    at readableAddChunk (node:internal/streams/readable:305:9)
    at Readable.push (node:internal/streams/readable:242:10)
    at TTY.onStreamRead (node:internal/stream_base_commons:190:23)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>No sign of <code class="language-plaintext highlighter-rouge">main</code>, only <code class="language-plaintext highlighter-rouge">handleUserInput</code>.</p>

<p>This is a common hazard of asynchronous programming: You are always replacing the record of your active procedures as they are all performing task setup that completes and the callbacks they created are later invoked by the runtime.</p>

<h2 id="javascript-">JavaScript 💚</h2>

<p>Asynchronous programming has always been at the heart of JS and is one of the central selling points of using Node.js.</p>

<p>In 2015, the first <a href="https://nodejs.org/en/blog/release/v4.2.0">Long Term Support version of Node.js was released</a>, and with it came a stable standard library that popularized a common pattern for handling asynchronous tasks. All asynchronous tasks would accept a callback as their last argument, with the callback taking at least two arguments: an error and the task’s result. The pattern was that if the first argument was <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthy</a> (an error object), the task failed, and if it was not, then the second argument would contain the result.</p>

<p>Here’s a simplified example of a function that reads a file:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">filename.txt</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">file contents</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The Node.js callback pattern is ubiquitous and familiar, resulting in many popular libraries - such as the <a href="https://www.mongodb.com/docs/drivers/node/current/">MongoDB Node.js driver</a> - adopting it, as well.</p>

<h3 id="no-throw-only-callback-">No throw, only callback 🐕</h3>

<p><img src="/images/js-cupcake.png" alt="" />
<em>credit: <a href="https://cupcakelogic.tumblr.com/post/124392369931/she-is-still-learning">cupcakelogic</a></em></p>

<p>A challenge associated with the callback pattern is the requirement that the implementer keep in mind execution expectations manually. Otherwise, they can end up with a confusing order of operations.</p>

<p>Typically, this is something that should be abstracted to the runtime or language, which can be broken down as follows:</p>

<p><strong>Error handling</strong></p>

<p>Properly implementing the callback pattern means errors are passed as variables to a chain of handlers so they eventually reach the top-level initiator of the async operation. The syntax and keywords <code class="language-plaintext highlighter-rouge">throw</code>/<code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code> can no longer be used for control flow.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">try</span> <span class="p">{</span>
  <span class="nf">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">filename</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ? */</span> <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// So what's the truth?</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Runtime order</strong></p>

<p>Callbacks also demand the developers ensure execution order is consistent. If a file is successfully read and the contents are returned in the callback passed to <code class="language-plaintext highlighter-rouge">readFile</code>, that callback will always run after the code that is on the line following <code class="language-plaintext highlighter-rouge">readFile</code>. However, say <code class="language-plaintext highlighter-rouge">readFile</code> is passed an invalid argument, like a number instead of a string for the path. When it invokes the callback with an invalid argument error, we would still expect that code to run in the same order as the success case:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">filename</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
       <span class="nf">callback</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">invalid argument</span><span class="dl">'</span><span class="p">))</span>
       <span class="k">return</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="c1">// open &amp; read file ...</span>
<span class="p">}</span>

<span class="nf">readFile</span><span class="p">(</span><span class="mh">0xF113</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">cannot read file</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
       <span class="k">return</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">contents:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">starting to read file</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The code above prints:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>cannot read file Error: invalid argument
starting to read file
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Whereas when I change <code class="language-plaintext highlighter-rouge">readFile</code> to be called with a non-existent path:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>starting to read file
cannot read file Error: /notAPath.txt Does Not Exist
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is unexpected! The implementer of <code class="language-plaintext highlighter-rouge">readFile</code> calls the callback synchronously for an invalid type so <code class="language-plaintext highlighter-rouge">readFile</code> does not return until that callback completes. It is fairly easy to write callback-accepting functions that inconsistently order their execution in this way.</p>

<h3 id="promises-">Promises 🤞</h3>

<p>Introducing a more structured approach: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promises</a>. A promise is an object that handles the resolution or rejection of an async operation, mitigating the above issues and allowing for many async operations to be chained together without needing to explicitly pass a finalizer callback through to each API that would indicate when all tasks are done.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">// callbacks</span>
<span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nf">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="nx">client</span>
   <span class="p">.</span><span class="nf">db</span><span class="p">()</span>
   <span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span>
   <span class="p">.</span><span class="nf">findOne</span><span class="p">({},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nf">done</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
     <span class="k">return</span> <span class="nf">done</span><span class="p">();</span>
   <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// promises</span>
<span class="nx">client</span>
 <span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
 <span class="p">.</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">).</span><span class="nf">findOne</span><span class="p">({}))</span>
 <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nb">document</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">));</span>
 <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note how in the promise code there is one error handling case as opposed to the two in the callback case. The ability to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining">chain promises</a> allows us to treat many async operations as one. The <code class="language-plaintext highlighter-rouge">catch</code> handler would be called if either the <code class="language-plaintext highlighter-rouge">connect</code> or the <code class="language-plaintext highlighter-rouge">find</code> methods were to throw an error. This chaining is convenient, but when writing JavaScript today, we do even better by using special syntax for handling promises.</p>

<h3 id="enter-asyncawait-">Enter <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> 🔁</h3>

<p>Mid-2017, JavaScript engines shipped support for <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> syntax, allowing programmers to write asynchronous operations in a familiar procedural format. Using <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> allows the programmer to encode their logical asynchronous dependencies right into the syntax of the language.</p>

<p>Let’s return to our user input example, as we can now “await” the input which keeps <code class="language-plaintext highlighter-rouge">main</code> as the active procedure that began the task to read from standard in.</p>

<blockquote class="prompt-info">
  <p>“For <code class="language-plaintext highlighter-rouge">await</code>, the suspend and resume points coincide and so we not only know where we would continue, but by coincidence, we also know where we came from.”</p>

  <p>source: <a href="https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit#heading=h.e6lcalo0cl47">Zero-cost async stack traces</a></p>
</blockquote>

<p>When the input is available, <code class="language-plaintext highlighter-rouge">readStdin</code> will resolve and we can continue with our parsing.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="nf">main</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="k">await</span> <span class="nf">readStdin</span><span class="p">()</span>
  <span class="o">-&gt;</span> <span class="nf">parseString</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>file://addNumbers.mjs:43
    throw new Error('cannot get string length')
          ^
Error: cannot get string length
    at stringLength (file://addNumbers.mjs:43:11)
    at splitString (file://addNumbers.mjs:25:17)
    at parseString (file://addNumbers.mjs:19:19)
    at main (file://addNumbers.mjs:9:5)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async file://addNumbers.mjs:62:1
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When the JavaScript engine reaches the “await”, <code class="language-plaintext highlighter-rouge">main</code> is suspended. The engine is free to handle other tasks while the read is waiting for our user to type. We can now encode into the syntax of the function that it will suspend until some other task completes, and when it continues, it maintains the context of everything that was in scope when it started.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">try</span> <span class="p">{</span>
 <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nb">document</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">().</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">).</span><span class="nf">findOne</span><span class="p">({});</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote class="prompt-info">
  <p>“The fundamental difference between <code class="language-plaintext highlighter-rouge">await</code> and manually constructed promises is that <code class="language-plaintext highlighter-rouge">await X()</code> <strong>suspends</strong> execution of the current function, while <code class="language-plaintext highlighter-rouge">promise.then(X)</code> will <strong>continue</strong> execution of the current function after adding the <code class="language-plaintext highlighter-rouge">X</code> call to the callback chain. In the context of stack traces, this difference is pretty significant.”</p>

  <p>source: <a href="https://mathiasbynens.be/notes/async-stack-traces">Why await beats Promise#then() · Mathias Bynens</a></p>
</blockquote>

<h2 id="sample-stack-traces">Sample Stack Traces</h2>

<p>Prior to completing the <code class="language-plaintext highlighter-rouge">async</code>/<code class="language-plaintext highlighter-rouge">await</code> conversion down to the internal network layer of the driver, our error stack would begin at the point of converting a server’s error message into a JavaScript, such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>MongoServerError: Failing command via 'failCommand' failpoint
    at Connection.onMessage (./mongodb/lib/cmap/connection.js:231:30)
    at MessageStream.&lt;anonymous&gt; (./mongodb/lib/cmap/connection.js:61:60)
    at MessageStream.emit (node:events:520:28)
    at processIncomingData (./mongodb/lib/cmap/message_stream.js:125:16)
    at MessageStream._write (./mongodb/lib/cmap/message_stream.js:33:9)
    at writeOrBuffer (node:internal/streams/writable:564:12)
    at _write (node:internal/streams/writable:493:10)
    at Writable.write (node:internal/streams/writable:502:10)
    at Socket.ondata (node:internal/streams/readable:1007:22)
    at Socket.emit (node:events:520:28)
                    ^-- Sadness, that's not my code...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, post v6.5.0, the stack trace points directly back to the origination of an operation (we see you <code class="language-plaintext highlighter-rouge">main.js</code>!):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>MongoServerError: Failing command via 'failCommand' failpoint
    at Connection.sendCommand (./mongodb/lib/cmap/connection.js:290:27)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Connection.command (./mongodb/lib/cmap/connection.js:313:26)
    at async Server.command (./mongodb/lib/sdam/server.js:167:29)
    at async FindOperation.execute (./mongodb/lib/operations/find.js:34:16)
    at async tryOperation (./mongodb/lib/operations/execute_operation.js:192:20)
    at async executeOperation (./mongodb/lib/operations/execute_operation.js:69:16)
    at async FindCursor._initialize (./mongodb/lib/cursor/find_cursor.js:51:26)
    at async FindCursor.cursorInit (./mongodb/lib/cursor/abstract_cursor.js:471:27)
    at async FindCursor.fetchBatch (./mongodb/lib/cursor/abstract_cursor.js:503:13)
    at async FindCursor.next (./mongodb/lib/cursor/abstract_cursor.js:228:13)
    at async Collection.findOne (./mongodb/lib/collection.js:274:21)
    at async main (./mongodb/main.js:19:3)
                   ^-- Yay, that's my code!
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<p><strong>Additional Resources</strong></p>

<ul>
  <li><a href="https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit">Zero-cost async stack traces</a></li>
  <li><a href="https://github.com/tc39/proposal-error-stacks">tc39/proposal-error-stacks</a></li>
  <li><a href="https://v8.dev/docs/stack-trace-api">Stack trace API</a></li>
  <li><a href="https://v8.dev/blog/modern-javascript#proper-tail-calls">ES2015, ES2016, and beyond · Tail Calls · V8</a></li>
  <li><a href="https://v8.dev/blog/fast-async">Faster async functions and promises · V8</a></li>
  <li><a href="https://mathiasbynens.be/notes/async-stack-traces">Asynchronous stack traces: why await beats Promise#then() · Mathias Bynens</a></li>
</ul>]]></content><author><name>Neal Beeken</name></author><category term="Programming" /><category term="javascript" /><category term="node" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[Written by Neal Beeken (Blog, GitHub) - Canonical URL is at medium.com]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/nodejs-banner.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/nodejs-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995</title><link href="https://www.alexbevi.com/blog/2024/07/09/discworld/" rel="alternate" type="text/html" title="Discworld (Teeny Weeny Games/Perfect 10 Productions) - 1995" /><published>2024-07-09T07:06:16-04:00</published><updated>2024-07-17T07:34:00-04:00</updated><id>https://www.alexbevi.com/blog/2024/07/09/discworld</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/07/09/discworld/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Discworld_(video_game)">Discworld</a> is a point-and-click adventure game developed by Teeny Weeny Games and Perfect 10 Productions and published by Psygnosis. It is based on <a href="https://en.wikipedia.org/wiki/Terry_Pratchett">Terry Pratchett</a>’s novels of the same name.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00011.png" alt="" /></p>

<p>This adventure game puts the player in the shoes of Rincewind, a wizard whose sole purpose in life is to stay alive. He appears to be very good at it as well, because apparently the universe has decided to continuously challenge him. The game takes place in the humorous fantasy world called the Discworld, as it is actually a flat disc carried on the backs of four gigantic elephants, which themselves stand on the back of an even larger turtle.</p>

<p>The story is loosely based on the <a href="https://en.wikipedia.org/wiki/Guards!_Guards!">novel “Guards! Guards!”</a>. Both in the book and the game, a dragon is summoned by a group of mysterious conspirators and now terrorizes the city state of Ankh-Morpork. Being the most expendable wizard of the Unseen University, Rincewind is given the task to get rid of the beast (only in the game though; in the book, the city’s nightwatch has to deal with the problem).<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00015.png" alt="" /></p>

<p>Discworld is a pretty typical point and click adventure from the mid-90s: the game starts with a brief intro sequence, you’re introduced to the protagonist, you’re given the first (of likely many) fetch quests which you’ll need to complete and you’re on your way.</p>

<p>Over the course of four acts your task is to rid the Discworld of the dragon that the secret brotherhood has summoned. As a wizard of Unseen University, the Archchancellor has decided you’re up to this task so first you’ll need to collect the various elements from around Ankh-Morpork that he needs to build a “dragon detector”.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00005.png" alt="" /></p>

<p>Every time you leave an area of the game you’ll be returned to the map screen, which is how you navigate between the various game locations. There are a few more locations beyond the main map, but the majority of the game takes place here (both in the past, and in the present).</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00010.png" alt="" /></p>

<p>Throughout the course of the game you’ll pick up <em>a lot</em> of items. Luckily for Rincewind you’re always accompanied by your trusty luggage - which is a treasure chest with a lot of legs. I remember vaguely reading these books when I was a kid and the traveling treasure chest standing out to me as a really interesting character, so I was really hoping it would play a big part in this game once it was introduced.</p>

<p>When you find a new item you can pick up you’ll have the option of adding it to the chest or Rincewind’s inventory. The chest has unlimited storage, whereas Rincewind only has 4 “slots” that you can use.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00013.png" alt="" /></p>

<p>Inventory management plays a pretty large role in this game as there are several puzzles that require Rincewind to take items with him to a location the chest can’t access. Typically it’s not obvious what you need to bring with you and the will involve trial and error, backtracking and repetition.</p>

<p>Speaking of backtracking, that’s about 90% of the game. You typically need to talk to everyone you possibly can on every screen to get a sense of what fetch quest they’re going to send you on, then head off to fetch said maguffin.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00007.png" alt="" /></p>

<p>The dialogue system is reminiscent of games of this era such as <a href="/blog/2023/01/23/sam-and-max-hit-the-road/">Sam &amp; Max Hit the Road</a> where a row of icons will be presented that represent various interactions that according to the <a href="https://archive.org/details/discworld-manual/page/n7/mode/2up">manual</a> represent actions/moods such as <code class="language-plaintext highlighter-rouge">GREETING</code>, <code class="language-plaintext highlighter-rouge">QUESTION</code>, <code class="language-plaintext highlighter-rouge">SARCASM</code>and <code class="language-plaintext highlighter-rouge">ANGER</code>.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00009.png" alt="" /></p>

<p>Though the gameplay itself can be a bit tedious, the character interactions and descriptions of the world you’re engaging with are fantastic. <a href="https://en.wikipedia.org/wiki/Monty_Python">Monty Python</a>’s <a href="https://en.wikipedia.org/wiki/Eric_Idle">Eric Idle</a> voices Rincewind, and really brings the character to life as a dry, witty British stereotype.</p>

<p>There is ever-present <a href="https://www.youtube.com/watch?v=_dxSji16tOc&amp;list=PL9434353ADDF48CD6">background music</a> playing throughout the game, but it just sort of fades into the background. I don’t consider this a bad thing for ambient music as it means it’s essentially just doing it’s job.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00019.png" alt="" /></p>

<p>In order for Rincewind to solve the mystery of who stole the Dragon Summoning book, uncover the identities of the members of the brotherhood and retrieve the various gold trinkets the dragon has requested, he’ll have to travel back in time.</p>

<p>This is done through the University’s library (following a long series of fetch quests) that opens a door to L-Space. Once you’ve accessed L-Space a new series of puzzles need to be solved - many of them involving making changes in the past to impact the placement or availability of things in the present.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00020.png" alt="" /></p>

<p>I really liked the mechanic, but found myself getting lost or confused or having to repeatedly go back and forth between the past and preset trying ot suss out exactly what it is I’m trying to do.</p>

<p>Discworld does not hold your hand. The clues can be vague and require you to really think. I don’t believe any knowledge of the books is required to be successful, but I’m sure it couldn’t hurt.</p>

<p>For example, to get the password to the thieve’s hideout you need to turn the drainpipe, hide, then listen to the pipe with a glass. If you don’t use the glass a long sequence plays out that doesn’t make it obvious you <em>didn’t</em> get the password until you try and get into the hideout.</p>

<p>You then need to repeat this trying various items on the drainpipe to see if anything will happen.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00024.png" alt="" /></p>

<p>Trying everything on everything (including every item on every other item) can be a requirement to progression. There are just so many items you’ll find, an the solution to many puzzles requires either a single item or an item combination puzzle to be solved first - and the solutions are typically not obvious.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00023.png" alt="" /></p>

<p>This is definitely not a game for kids. There are allusions to adult themes, the writing is complex, the humour is more nuanced and you really have to pay attention to your surroundings and all dialogue to make any progress.</p>

<p><img src="/images/adventure/dw1/scummvm-dw-cd-00031.png" alt="" /></p>

<p>I seem to remember playing this game as a teenager and just not being able to get into it. I was a big Monty Python fan (who wasn’t in the 90’s) so Eric Idle voicing a character really appealed to me … but I just couldn’t make any progress.</p>

<p>If you’re playing in ScummVM there are a <a href="https://bugs.scummvm.org/query?game=Discworld&amp;status=new&amp;status=pending&amp;order=priority">number of known bugs</a>, though the game is not really affected too badly. I did hit the <a href="https://bugs.scummvm.org/ticket/10659">Act 4 missing guard crash</a>, but that is easily avoidable by just not engaging a clearly missing background character in conversation.</p>

<p>I really love Terry Pratchett’s writing style and have previously read <a href="https://en.wikipedia.org/wiki/The_Colour_of_Magic">The Colour of Magic</a>. Having now played through this game I definitely feel like firing up the eReader and diving back into the world of Ankh-Morpork.</p>

<p>There are better adventure games out there that would likely be more approachable, but the story and writing of Discworld definitely stands out.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Discworld</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Perfect_Entertainment">Teeny Weeny Games/Perfect 10 Productions</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Psygnosis">Psygnosis</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Mac, PlayStation, Sega Saturn</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Tinsel">Tinsel</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/2589"><em>How Long To Beat?</em></a></td>
      <td>11 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/discworld">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>14</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>19</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>59%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/dw1/scummvm-dw-cd-00001.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00001.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00002.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00002.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00003.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00003.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00004.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00004.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00006.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00006.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00008.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00008.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00012.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00012.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00014.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00014.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00016.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00016.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00017.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00017.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00018.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00018.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00021.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00021.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00022.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00022.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00025.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00025.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00026.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00026.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00027.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00027.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00028.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00028.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00029.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00029.png' },{ src: '/images/adventure/dw1/scummvm-dw-cd-00030.png', thumb: '/images/adventure/dw1/scummvm-dw-cd-00030.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/184/discworld/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Tinsel" /><category term="Teeny Weeny Games/Perfect 10 Productions" /><category term="Psygnosis" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/dw1/scummvm-dw-cd-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Altered Destiny (Accolade) - 1990</title><link href="https://www.alexbevi.com/blog/2024/06/14/altered-destiny/" rel="alternate" type="text/html" title="Altered Destiny (Accolade) - 1990" /><published>2024-06-14T06:06:26-04:00</published><updated>2024-06-17T07:08:14-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/14/altered-destiny</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/14/altered-destiny/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Altered_Destiny">Altered Destiny</a> is a graphic adventure game released by Accolade in 1990 for MS-DOS compatible operating systems and in 1991 for Amiga. The game was designed by Michael Berlyn and it uses a text parser interface. It is the second adventure game from Accolade and it uses the same engine as the first one, <a href="https://en.wikipedia.org/wiki/Les_Manley_in:_Search_for_the_King">Les Manley in: Search for the King</a>.</p>

<p><img src="/images/adventure/altered/017.png" alt="" /></p>

<p>One fine day P. J. Barrett, an ordinary human being from the planet Earth, goes to a repair shop to get his TV set fixed. When he comes back for it, he accidentally picks up the wrong one. No big deal? Quite on the contrary. When the unsuspecting Mr. Barrett returns home and turns the TV on, he is sucked into a portal! One moment later, he finds himself on the strange planet of Daltere. Naturally, this planet needs a savior: the evil alien Helmar has stolen an artifact known as the Jewel of Light, thus endangering the entire galaxy. Now our unlikely hero has to overcome various obstacles and save the world.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/altered/034.png" alt="" /></p>

<p>I never owned an Amiga when I was growing up, though my uncle had one as he was a graphic artist and I guess back in the mid 80s to early 90s this was the system to use - and <a href="https://en.wikipedia.org/wiki/Deluxe_Paint">Deluxe Paint</a> was all the rage.</p>

<p>This wasn’t a system I really got to mess around with (it was a “work” computer), but the odd game I was exposed to I remember having impressive graphics and sound.</p>

<p>Since one of my goals for this retrospective journey is to try and experience as many of these games on as many (emulated) systems as possible, I wanted to make sure I play through a few of these titles on the Amiga.</p>

<p><img src="/images/adventure/altered/014.png" alt="" />
<em>Oh goody, copy protection</em></p>

<p>As soon as you insert disk one and boot the game up you’ll be met with a copy protection screen. I tried to find a copy of the manual online, but failed. Even the game’s entry in the <a href="https://www.gamesdatabase.org/game/commodore-amiga/altered-destiny">Games Database</a> didn’t have anything for me, so I chose to resort to “alternate” means of bypassing this barrier.</p>

<p>It turns out what I needed was the <a href="https://www.mocagh.org/miscgame/altereddestiny-codewheel.jpg">code wheel</a> that could be found at the <a href="https://www.mocagh.org/loadpage.php?getgame=altereddestiny">museum of computer adventure game history</a>, but I found this after I’d finished the game already …</p>

<p><img src="/images/adventure/altered/013.png" alt="" />
<em>I’m guessing Accolade won’t mind that I’m emulating a cracked version of the game 30+ years after it came out</em></p>

<p>I ended up playing the <a href="https://demozoo.org/groups/8/">Skid Row</a> cracked release of the game, which will accept any input on the challenge screen and allow you to progress. Though there are obviously good arguments for why software piracy is bad, when looked at through the lens of digital preservation and making historic content accessible to future generations of players I appreciate the work that these groups put in.</p>

<p><img src="/images/adventure/altered/041.png" alt="" /></p>

<p>Altered Destiny uses a similar engine to Sierra’s first iteration of the SCI engine (<a href="http://sciwiki.sierrahelp.com/index.php/Sierra_Creative_Interpreter#SCI0">SCI0</a>) as it support basic character navigation with the mouse, but all other interaction with the game world was done using a text parser.</p>

<p>The most common verb you’ll use is <code class="language-plaintext highlighter-rouge">LOOK</code>, which will typically give you a lot of information about the screen you’re on, including characters (with their names) you can interact with, items you might be able to pick up and other useful details.</p>

<p><img src="/images/adventure/altered/028.png" alt="" /></p>

<p>There are several alien creatures to talk to. Whenever you <code class="language-plaintext highlighter-rouge">LOOK</code> on a screen the game helpfully tells you the name of the alien there, so it’s easy enough to know who to <code class="language-plaintext highlighter-rouge">TALK</code> to. You then need to <code class="language-plaintext highlighter-rouge">ASK ABOUT</code> various topics to learn what to do next or uncover more of the plot.</p>

<p>You’ll want to take notes as these interactions will usually surface the names of other characters you’ll want to seek out, and you’ll want to ask each alien creature about the others that you’ve met or learned about.</p>

<p><img src="/images/adventure/altered/ad000.gif" alt="" /></p>

<p>Similar to Sierra games at the time, path finding for your character was challenging and would typically result in you falling to your death. I found several times that I’d need to resort to using the mouse to click on a target I wanted PJ to walk to as it would <em>usually</em> get me there safely … but occasionally you were better off using the direction keys on the keyboard.</p>

<p>There’s also only one message ever shown when you die, so it’s not interesting to explore the different ways the environment will end your adventure because you see the same thing regardless of what you do.</p>

<p><img src="/images/adventure/altered/036.png" alt="" />
<em>I do not miss the days of multi-disk games</em></p>

<p>You’ll want to save often, but Amiga games required a save disk to be swapped in in order for this to occur. I played this game using <a href="https://dirkwhoffmann.github.io/vAmiga/">vAmiga</a>, so I could just use save states which are exponentially more convenient than having to swap the save disk in, save, then swap the current game disk in.</p>

<p>Disk access times seriously slow down the game play experience. I don’t know if it’s due to just not having enough experience tuning an Amiga emulator, but I can safely say that 70% of my play time was spent just waiting for the disks to finish spinning.</p>

<p>It was also frustrating when I’d swap disks (as requested) too quickly, so I’d have to put the previous disk back in, let it read, wait for the prompt, switch and try again. SO. MUCH. WAITING.</p>

<p><img src="/images/adventure/altered/037.png" alt="" />
<em>This map screen makes the game world feel bigger than it really is</em></p>

<p>The game world in Altered Destiny is actually fairly small, but once you get down from the floating island and reach the cross roads you’ll get a map screen that shows PJ progressing between the various game areas.</p>

<p><img src="/images/adventure/altered/027.png" alt="" /></p>

<p>Examining your inventory items or various things on screen will bring up a more detailed view that provides additional information. This was particularly useful in helping to identify what might be more important to interact with as the game designers were clearly trying to draw your attention to these.</p>

<p>Like Sierra games of that era, it’s extremely easy to miss picking up key items and you can find yourself in unwinnable situations requiring you to restore to much earlier saves or restart entirely.</p>

<p>This happened to me a couple times, which almost lead me to abandon this playthrough simply because I didn’t want to have to endure the disk access and screen loading times I knew came with back tracking.</p>

<p><img src="/images/adventure/altered/025.png" alt="" /></p>

<p>Items you can pick up are typically fairly obvious, and when they’ve been picked up they’re no longer visible on screen. I appreciate this as it makes the game world feel a bit more interactive as your actions are affecting the world around you.</p>

<p>Whenever there are item combination puzzles though some of the sequences of commands you need to enter can be a bit unintuitive - especially if you were a kid playing this game initially.</p>

<p>For example, to catch the bird here you need to <code class="language-plaintext highlighter-rouge">DROP CAGE</code>, then <code class="language-plaintext highlighter-rouge">SET THE TRAP</code>, <code class="language-plaintext highlighter-rouge">BAIT THE CAGE WITH PIGMENT</code> and wait for the bird to take the bait before you <code class="language-plaintext highlighter-rouge">GET CAGE</code>. I’m sure the game designers thought they were setting you up for success with some of the clues leading up to this point, but I found myself reaching for the walkthrough pretty quickly.</p>

<p><img src="/images/adventure/altered/040.png" alt="" /></p>

<p>To mix up the gameplay a bit there’s one random fight sequence where you need to <code class="language-plaintext highlighter-rouge">WIELD SWORD</code> and knock some creature off a floating platform (hopefully you didn’t forget to pick the sword back up after dropping it much, much earlier).</p>

<p>This is an interesting diversion but since you only do it once and there’s really no setup for it it sort of feels forced and unintuitive. You sort of just have to keep mashing right on the directional pad until you knock the creature into the pool of light, then you need to fall off the platform into the pool as well (I can’t remember why anymore).</p>

<p><img src="/images/adventure/altered/044.png" alt="" /></p>

<p>The final battle with Helmar boils down to just picking the right option from a menu. Spoiler: it’s the mirror. When you do this you reflect the beam he shoots back at him, killing him and freeing the world and restoring the jewel of light to its rightful place in the universe (I think that’s what happens at least).</p>

<p><img src="/images/adventure/altered/045.png" alt="" />
<em>Error 19, then crash back to the OS</em></p>

<p>For the first time in this series I didn’t actually finish the game myself and take a “THE END” screenshot … because the game crashed after defeating Helmar. Maybe this is an emulation issue, maybe it’s an issue with the game having been cracked by Skid Row and this being a checksum failure or some other protection measure.</p>

<p><img src="/images/adventure/altered/SCR-20240614-fzkn.png" alt="" />
<em>This is a screenshot from a <a href="https://www.youtube.com/watch?v=JG4cvri6Rcs">longplay on YouTube</a> because my game crashed right at the end</em></p>

<p>I technically finished the game and have zero desire to play it again using the MS-DOS version, so I cheated and swiped the last screenshot from a longplay video.</p>

<p>Altered Destiny has some good graphics and sound, but it’s not really adding anything to the experience that other games released at that time were. The story seems a little forced, the inventory puzzles are sort of frustrating and there’s really not much to do.</p>

<p>It’s entirely possible I would have enjoyed the MS-DOS version more (assuming the load times are greatly improved), but Altered Destiny plays like an over-complicated Space Quest clone without any of the humor.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Altered Destiny</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Accolade_(company)">Accolade</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Accolade</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1990</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16668"><em>How Long To Beat?</em></a></td>
      <td>6.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>Amiga via <a href="https://dirkwhoffmann.github.io/vAmiga/">vAmiga</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/altereddestiny.aspx">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>34%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/altered/016.png', thumb: '/images/adventure/altered/016.png' },{ src: '/images/adventure/altered/018.png', thumb: '/images/adventure/altered/018.png' },{ src: '/images/adventure/altered/019.png', thumb: '/images/adventure/altered/019.png' },{ src: '/images/adventure/altered/020.png', thumb: '/images/adventure/altered/020.png' },{ src: '/images/adventure/altered/021.png', thumb: '/images/adventure/altered/021.png' },{ src: '/images/adventure/altered/022.png', thumb: '/images/adventure/altered/022.png' },{ src: '/images/adventure/altered/023.png', thumb: '/images/adventure/altered/023.png' },{ src: '/images/adventure/altered/024.png', thumb: '/images/adventure/altered/024.png' },{ src: '/images/adventure/altered/026.png', thumb: '/images/adventure/altered/026.png' },{ src: '/images/adventure/altered/029.png', thumb: '/images/adventure/altered/029.png' },{ src: '/images/adventure/altered/030.png', thumb: '/images/adventure/altered/030.png' },{ src: '/images/adventure/altered/031.png', thumb: '/images/adventure/altered/031.png' },{ src: '/images/adventure/altered/032.png', thumb: '/images/adventure/altered/032.png' },{ src: '/images/adventure/altered/033.png', thumb: '/images/adventure/altered/033.png' },{ src: '/images/adventure/altered/035.png', thumb: '/images/adventure/altered/035.png' },{ src: '/images/adventure/altered/038.png', thumb: '/images/adventure/altered/038.png' },{ src: '/images/adventure/altered/039.png', thumb: '/images/adventure/altered/039.png' },{ src: '/images/adventure/altered/042.png', thumb: '/images/adventure/altered/042.png' },{ src: '/images/adventure/altered/043.png', thumb: '/images/adventure/altered/043.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/92/altered-destiny/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Accolade" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/altered/015.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/altered/015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Flight of the Amazon Queen (Interactive Binary Illusions) - 1995</title><link href="https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen/" rel="alternate" type="text/html" title="Flight of the Amazon Queen (Interactive Binary Illusions) - 1995" /><published>2024-06-09T07:45:50-04:00</published><updated>2024-06-11T06:27:47-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/09/flight-of-the-amazon-queen/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Flight_of_the_Amazon_Queen">Flight of the Amazon Queen</a> is a graphical point-and-click adventure game by Interactive Binary Illusions, originally released in 1995 for Amiga and MS-DOS.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00024.png" alt="" /></p>

<p>Joe King is the hero of this point and click adventure. His plane is carrying actress Faye Russell when it crash lands in a remote jungle, and he must battle through 100 screens of adventure and puzzle. The game’s feel is influenced by hammy B-movies, and the characters are quite stereotyped and comic. As standard in point and click adventures, a set of icons at the bottom of the screen allow you to interact with visible characters and items in the main view area.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/queen/scummvm-queen-00029.png" alt="" />
<em>I’m shocked they don’t lean into this pun more often throughout the game</em></p>

<p>I’m a huge fan of LucasArts games, and after reading <a href="https://passfieldgames.blogspot.com/2015/05/making-of-flight-of-amazon-queen-20th.html">“Making of Flight of the Amazon Queen - A 20th Anniversary Retrospective”</a> it seems that so was John Passfield. So many aspects of Flight of the Amazon Queen just smack of LucasArts’ influence, and the end result is a game that could easily live alongside classics such as <a href="/blog/2024/04/30/the-secret-of-monkey-island/">The Secret of Monkey Island</a> or Indiana Jones and the Fate of Atlantis.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00032.png" alt="" /></p>

<p>Ron Gilbert and Tim Schafer’s influence on this game runs extremely deep. The comedic writing style, pixel art design, verb selection and dialog tree layout all feel reminiscent of a LucasArts title, and though they didn’t use the SCUMM engine, they’re custom game engine was titled JASPAR (John And Steve’s Programmable Adventure Resource) - which sort of feels like it belongs in that universe of tools with forced acronyms.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00004.png" alt="" />
<em>Adding that “trademark” next to “comedy breasts” just screams of Monkey Island’s influence</em></p>

<p>Once the game starts you’ll find yourself locked in a hotel room that you need to escape. You’re a pilot for hire, and your next client is a famous movie star, but your rival Anderson wants to steal this job from you. To escape the hotel room you’ll need to use the various verbs represented as icons to <code class="language-plaintext highlighter-rouge">LOOK</code>, <code class="language-plaintext highlighter-rouge">PICK UP</code> and <code class="language-plaintext highlighter-rouge">USE</code> various things.</p>

<p>Most of this game involves inventory combination puzzles and fetch quests, so it’s worth examining everything on the screen to see if it’s something you can pick up, move, open/close or use.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00011.png" alt="" /></p>

<p>This game is incredibly well paced, as long as you look at everything and talk to everyone. The path forward or solution to most puzzles is typically intuitive and when you need to combine items Joe will usually point you in the right direction.</p>

<p>When this gets a little more confusing is later in the game where you have a very large number of items - all of which you’ll need to use at some point (and often in combination).</p>

<p><img src="/images/adventure/queen/scummvm-queen-00016.png" alt="" /></p>

<p>The game likes to plant seeds as to the solution to puzzles through story elements. For example there is a brief sequence early in the game where you find a comic book that your mechanic Sparky is looking for. If you read the comic the hero uses alcohol to power is jetpack when it runs out of fuel so he can escape from the baddies just in the nick of time.</p>

<p>Amazingly enough, near the end of the game you find a jetpack - but it doesn’t have any fuel. Trader bob has bottles of alcohol for sale (but you need to prove you’re of age so you need ID to show him).</p>

<p><img src="/images/adventure/queen/scummvm-queen-00018.png" alt="" /></p>

<p>You’ll meet a number of characters throughout the Amazon that you’ll interact with. Most characters only really have one purpose and it’s typically (a) they’re preventing you from progressing or (b) they hold some inventory item you’ll need.</p>

<p>Each character has a limited number of dialog options, so it’s worth asking everyone about everything as it helps advance the plot and lays out what that character needs from you in fairly straightforward language.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00014.png" alt="" /></p>

<p>Trader Bob is the exception as you’ll need to circle back to him multiple times to get new items. I did appreciate that though there are dozens of useable items in this game, none of them appear to be <a href="https://en.wikipedia.org/wiki/Red_herring">red herrings</a>.</p>

<p>If an item will need to be used more than once, it will typically remain in your inventory in a depleted state to indicate it’s still needed. In my opinion this is better than the puzzle design in other games (notably a number of Sierra titles) where you have to backtrack to get an item again to use it as the solution to another puzzle.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00012.png" alt="" /></p>

<p>Instead of the typical “map screen” you’d get in other games to navigate between game areas, Flight of the Amazon Queen has a pinnacle you walk to that overlooks the forest. From here you pan back and forth and can see the various locations you can travel to.</p>

<p>Technically it’s just a different take on the flat 2D map screen, but it’s also incorporated into the endgame as the location you need to launch from once you have the jetpack. Since you can’t travel back to the forest once you reach the Valley of the Mists it felt like a good way to tie the pinnacle you’ve been using for travel throughout the game into your journey towards the final encounter.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00015.png" alt="" /></p>

<p>The game’s tone is extremely light and a little goofy. Joe King just feels and plays like a caricature of Indiana Jones, and they have a lot of fun with this. Every character you interact with doesn’t take themselves too seriously, and the underlying stories they’re presenting are enjoyable and keep you engaged.</p>

<p>I really like imaginary gorilla that pops up a couple of times blocking your path. Just talking to the gorilla and picking one of the dialog options that results in you questioning whether or not he should even exist will cause him to vanish.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00008.png" alt="" /></p>

<p>As the game progresses you’ll be presented with static cut scenes that further advance the plot. It turns out there’s a mad scientist trying to capture Amazonian women so he can test a dino ray on them that turns them into dinosaurs.</p>

<p>I guess he wants to create an army of dino-humans and conquer the world … and you’re the only one that can stop him.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00037.png" alt="" /></p>

<p>It’s kind of bananas that Joe King - a parody of Indiana Jones - needs to retrieve a crystal skull from the depths of the Amazon in order to activate an ancient robot, and over a decade later <a href="https://en.wikipedia.org/wiki/Indiana_Jones_and_the_Kingdom_of_the_Crystal_Skull">Indiana Jones and the Kingdom of the Crystal Skull</a> did something sort of similar (but with aliens instead of ancient robots).</p>

<p>I know there’s almost no chance these two things are related, but in my mind I’m picturing <a href="https://en.wikipedia.org/wiki/David_Koepp">David Koepp</a> (who wrote the screenplay for that movie) walking by his kid playing FOTAQ in 1995 and thinking “that crystal skull looks neat” … then carrying on with his life.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00038.png" alt="" /></p>

<p>If you play the MSDOS CD version of this game you’ll be treated to some fairly good voice acting. This enhances the game experience quite a bit as though there is some looping music in the background, it’s not really notable other than “being there”.</p>

<p><a href="https://www.mobygames.com/person/68041/bradley-lavelle/">Bradley Lavelle</a> who provides Joe’s voice does a fantastic job and really gives the character some depth. His delivery is a little dry and sarcastic, but suits Joe King perfectly.</p>

<p><img src="/images/adventure/queen/scummvm-queen-00043.png" alt="" /></p>

<p>Once you’ve got the crystal skull, Dr. Frank Ironstein will unlock the Valley of the Mists where all the dinosaurs live and you’ll need to get yourself over there for the final battle. This final sequence is pretty short (compared to the rest of the game) and just sees you defeating Monster Frank (the doctor gets zapped with his own dino ray), restoring the veil of mist to the Valley of the Mists and flying off into the sunset with Princess Azura.</p>

<p><img src="/images/adventure/queen/scummvm-queen-demo-00001.png" alt="" />
<em>There’s a hidden mini-game on the CD version where you interview the game developers about the game you just played!</em></p>

<p>Discovering how much you can enjoy a game is the whole reason for a retrospective series like this, and Flight of the Amazon Queen is one such title. The story is immersive, the puzzles are challenging but intuitive, the graphics are great and the writing is entertaining.</p>

<p>This is definitely a game I’d recommend to anyone that may be interested in experiencing what the genre has to offer. It’s even more impressive knowing that only a handful of people worked on this game originally - and if you have the CD version of the game with the “INTERVIE” directory on it, you can play a minigame where you interview the developers of the game about the game you just played!</p>

<p>Flight of the Amazon Queen was re-released as freeware in 2004, and was incorporated into ScummVM as the fifth engine (they currently have <a href="https://wiki.scummvm.org/index.php?title=Engines">A LOT of game engines</a>). You can you can go <a href="https://scummvm.org/games/#games-queen:queen">download and enjoy</a> the game right now!</p>

<p>Historical game preservation and ScummVM specifically are close to my heart so I want to close out this review with the following excerpt from <a href="https://romchip.org/index.php/romchip-journal/article/view/164">“Beyond the Amiga: In Conversation with John Passfield on Flight of the Amazon Queen”</a> as it shines a light on how this all came to be:</p>
<blockquote class="prompt-tip">
  <p>HS: Can you tell us about the involvement of ScummVM in making the game accessible today?</p>

  <p>JP: I was approached from the ScummVM people and they were interested in making a version of Amazon Queen available through their online library of playable adventure games. I was aware at this point that new generation PCs that were coming out were making it harder to play Amazon Queen. And I thought, well, I own the intellectual property, so I made it freeware with the right that you download for free, but you couldn’t sell it. And I retained copyright ownership of the game and that’s when the ScummVM people come in. They reached out and said we’d love to convert Amazon Queen to the ScummVM engine. And I was that’d be great because then it lives on forever. So, they reached out and said can we do it? I said that would be great and a month later it’s available on ScummVM.</p>

  <p>HS: ScummVM does not rely on the emulation of hardware. The ScummVM team uses a different process to make games playable on contemporary computing environments. Can you explain how they do this?</p>

  <p>JP: I actually reached out to ScummVM on their Discord asking them how they went about it. What they explained is ScummVM is basically a framework for graphical programs which work with 2-D, and now 3-D, particularly with OpenGL. So, they provide middleware code which is called the OSystem. Then every game engine is ported to this middleware replacing or hardware dependent things like sound, graphical output, file reading, keyboard mouse input, times, et cetera, with a call to the OSystem. First off, they did this for the LucasArts Scumm engine. For my game they created the “Queen” engine. The Queen engine uses their middleware to interpret the game files for Amazon Queen. It’s completely different pieces of code having nothing in common with Scumm or any of the other four engines they had adapted at the time. Amazon Queen was the fifth engine they made compatible. They said because Amazon Queen had very little assembly, it was mostly C code, they said it was very easy to port over. And I think they’re obviously very smart people. So that’s how it came about and that is how it works. As mentioned, I believe they’ve got support now for the LucasArts games which have 3-D graphics.</p>

  <p>I just love what they’re doing because it just gives that capacity to keep the game playable. It outputs at C++ so it works for everything. When Liron, who did the re-release of Amazon Queen for iOS in 2009, approached me to ask if he could port it into iOS he used the ScummVM Queen engine version and built on top of that engine extra stuff for the iOS version. The way that arrangement worked is that I granted him a licence to sell for iOS and he gave me a royalty. He has also put it on to the PC now. ScummVM just keeps these games accessible, which is great.</p>
</blockquote>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Flight of the Amazon Queen</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Interactive_Binary_Illusions">Interactive Binary Illusions</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Renegade_Software">Renegade Software</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Amiga, DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Queen">JASPAR</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/3594"><em>How Long To Beat?</em></a></td>
      <td>8 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS CD via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/flightoftheamazonqueen.aspx">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>16</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>21</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>13</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>84%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/queen/scummvm-queen-00001.png', thumb: '/images/adventure/queen/scummvm-queen-00001.png' },{ src: '/images/adventure/queen/scummvm-queen-00000.png', thumb: '/images/adventure/queen/scummvm-queen-00000.png' },{ src: '/images/adventure/queen/scummvm-queen-00003.png', thumb: '/images/adventure/queen/scummvm-queen-00003.png' },{ src: '/images/adventure/queen/scummvm-queen-00005.png', thumb: '/images/adventure/queen/scummvm-queen-00005.png' },{ src: '/images/adventure/queen/scummvm-queen-00006.png', thumb: '/images/adventure/queen/scummvm-queen-00006.png' },{ src: '/images/adventure/queen/scummvm-queen-00007.png', thumb: '/images/adventure/queen/scummvm-queen-00007.png' },{ src: '/images/adventure/queen/scummvm-queen-00009.png', thumb: '/images/adventure/queen/scummvm-queen-00009.png' },{ src: '/images/adventure/queen/scummvm-queen-00010.png', thumb: '/images/adventure/queen/scummvm-queen-00010.png' },{ src: '/images/adventure/queen/scummvm-queen-00013.png', thumb: '/images/adventure/queen/scummvm-queen-00013.png' },{ src: '/images/adventure/queen/scummvm-queen-00016.png', thumb: '/images/adventure/queen/scummvm-queen-00016.png' },{ src: '/images/adventure/queen/scummvm-queen-00017.png', thumb: '/images/adventure/queen/scummvm-queen-00017.png' },{ src: '/images/adventure/queen/scummvm-queen-00019.png', thumb: '/images/adventure/queen/scummvm-queen-00019.png' },{ src: '/images/adventure/queen/scummvm-queen-00020.png', thumb: '/images/adventure/queen/scummvm-queen-00020.png' },{ src: '/images/adventure/queen/scummvm-queen-00021.png', thumb: '/images/adventure/queen/scummvm-queen-00021.png' },{ src: '/images/adventure/queen/scummvm-queen-00022.png', thumb: '/images/adventure/queen/scummvm-queen-00022.png' },{ src: '/images/adventure/queen/scummvm-queen-00023.png', thumb: '/images/adventure/queen/scummvm-queen-00023.png' },{ src: '/images/adventure/queen/scummvm-queen-00025.png', thumb: '/images/adventure/queen/scummvm-queen-00025.png' },{ src: '/images/adventure/queen/scummvm-queen-00026.png', thumb: '/images/adventure/queen/scummvm-queen-00026.png' },{ src: '/images/adventure/queen/scummvm-queen-00027.png', thumb: '/images/adventure/queen/scummvm-queen-00027.png' },{ src: '/images/adventure/queen/scummvm-queen-00028.png', thumb: '/images/adventure/queen/scummvm-queen-00028.png' },{ src: '/images/adventure/queen/scummvm-queen-00030.png', thumb: '/images/adventure/queen/scummvm-queen-00030.png' },{ src: '/images/adventure/queen/scummvm-queen-00031.png', thumb: '/images/adventure/queen/scummvm-queen-00031.png' },{ src: '/images/adventure/queen/scummvm-queen-00033.png', thumb: '/images/adventure/queen/scummvm-queen-00033.png' },{ src: '/images/adventure/queen/scummvm-queen-00034.png', thumb: '/images/adventure/queen/scummvm-queen-00034.png' },{ src: '/images/adventure/queen/scummvm-queen-00035.png', thumb: '/images/adventure/queen/scummvm-queen-00035.png' },{ src: '/images/adventure/queen/scummvm-queen-00036.png', thumb: '/images/adventure/queen/scummvm-queen-00036.png' },{ src: '/images/adventure/queen/scummvm-queen-00039.png', thumb: '/images/adventure/queen/scummvm-queen-00039.png' },{ src: '/images/adventure/queen/scummvm-queen-00040.png', thumb: '/images/adventure/queen/scummvm-queen-00040.png' },{ src: '/images/adventure/queen/scummvm-queen-00041.png', thumb: '/images/adventure/queen/scummvm-queen-00041.png' },{ src: '/images/adventure/queen/scummvm-queen-00042.png', thumb: '/images/adventure/queen/scummvm-queen-00042.png' },{ src: '/images/adventure/queen/scummvm-queen-demo-00000.png', thumb: '/images/adventure/queen/scummvm-queen-demo-00000.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/352/flight-of-the-amazon-queen/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Interactive Binary Illusions" /><category term="Renegade Software" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/queen/scummvm-queen-00002.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/queen/scummvm-queen-00002.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line) - 1991</title><link href="https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/" rel="alternate" type="text/html" title="Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line) - 1991" /><published>2024-06-02T21:01:46-04:00</published><updated>2024-06-11T06:07:45-04:00</updated><id>https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Space_Quest_IV">Space Quest IV: Roger Wilco and the Time Rippers</a> is a 1991 graphic adventure game by Sierra On-Line, and the fourth entry in the Space Quest series. The game was released originally on floppy disks on March 4, 1991, and later released on CD-ROM in December 1992 with full speech support; an Atari ST version was announced via Sierra Online’s magazine, Sierra News Magazine, but was later canceled. The game sees players assume the role of Roger Wilco, who is thrust into a new adventure across time and space where he must thwart the plans of an old foe that is seeking revenge against him.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00000.png" alt="" /></p>

<p>Roger Wilco is relaxing at his favorite pub somewhere in time and space when heavily armed soldiers enter the room. Carrying a parting message from Roger’s old nemesis, Sludge Vohaul, they plan to get rid of the janitorial hero, execution style. That is, until a man with an over-sized hair dryer helps Roger escape through a time rip into the future. Now Roger Wilco has woken up on his home planet, some time in a meta-fictional Space Quest XII. It is a grim, dystopian future: the series has gone to ruin without its hero, and Vohaul rules supreme. Roger must find a way to avoid Vohaul’s henchmen, fulfill his destiny, and learn about a few surprises that await him in his own future.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00004.png" alt="" /></p>

<p>Unlike <a href="/blog/2024/02/16/space-quest-iii/">Space Quest III</a> before it, Space Quest IV has discarded the text parser in favour of a true point-and-click interface. This time around you interact with the game world using the (likely far more familiar) verb-based icons to decide how Roger interacts with the game world.</p>

<p>A couple of of these options such as <code class="language-plaintext highlighter-rouge">SMELL</code> and <code class="language-plaintext highlighter-rouge">TASTE</code> really aren’t needed, though selecting them and clicking around allows for the game to spit out some pretty funny feedback about things you really shouldn’t be doing with your surroundings.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00001.png" alt="" /></p>

<p>The Space Quest series has never tried to take itself seriously, and this entry is no exception. The writing and the art style tend to be goofy, and there are a lot of “in jokes” for fans of this series as well as other Sierra Online games.</p>

<p>After the intro cutscene you’re dropped into the future, which the game’s menu bar tells you is <em>Space Quest XII - Vohaul’s Revenge II</em>. As you jump through time you’ll know “when” you are as the game you’ve landed in will be displayed here.</p>

<p>Once you find your way into the sewers a Star Wars parody plays out that informs you that some time in the past someone found an old Leisure Suit Larry game and uploaded it ot the Xenon super computer. This unleashed a virus (that I think contained Sludge Vohaul’s mind or something) that results in humanity being enslaved.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00017.png" alt="" /></p>

<p>Vohaul is sending androids after you called “Sequel Police”, who use time pods to jump through time. You eventually steal one of these, which requires you to enter a 6 digit time code to jump between games … but where do you find these codes?</p>

<p>This wasn’t immediately obvious to me, but in retrospect it sort of makes sense. When you first steal the time pod in SQXII the code onscreen is the return code for SQXII. I just got in and mashed some random codes and hit enter and the game sent me off to the next time period.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00006.png" alt="" />
<em>I wonder if these assets were reused from a Leisure Suite Larry game 🧐</em></p>

<p>You’ll wind up in <em>Space Quest X - Latex Babes of Estros</em>, which is apparently a parody of Infocom’s <a href="https://en.wikipedia.org/wiki/Leather_Goddesses_of_Phobos">Leather Goddesses of Phobos</a> (what are the odds anyone playing this game today would make that connection).</p>

<p>This sequence is pretty short and straightforward and ends with you getting captured by a group of Amazonian women, saving them from a giant sea slug … then the lot of you heading out to the Galaxy Galleria mall to go on a shopping spree.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00008.png" alt="" /></p>

<p>There are some throwbacks to previous games here, including a Monolith Burger location that you can get a job at putting burgers together. You’ll need to do this as you won’t have enough money (buckazoids) to buy the dress and wig you need to pass as one of the Amazons (who’s debit card you happened to pick up).</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00010.png" alt="" /></p>

<p>The arcade sequence is pretty simple as you just add condiments to a burger on an assembly line. If you don’t screw up, you get 1 buckazoid per burger, but if you send 3 burgers to the finish line incorrectly you’ll be fired.</p>

<p>This is not hard - but it’s tedious. The assembly line gradually speeds up so it gets more challenging, but you can adjust the game speed to slow this down as needed.</p>

<p>I appreciate that the game gives you the option before you even begin to just take the money and skip the arcade sequence entirely - while still getting the money you need to progress.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00009.png" alt="" /></p>

<p>As a bit of a meta joke about the game, the puzzle design and the relative difficulty of Sierra games, one of the things you’ll need to buy at the mall is a Space Quest IV hint book. This is actually required to finish the game as there are two codes you’ll need that are only found in the hint book!</p>

<p>Honestly I thought this was pretty clever, and though only a couple of the hints are relevant, the other entries in the book that you reveal (with a magic pen) are typically pretty funny.</p>

<p>If you were a PC gamer in the early 90’s, you may have had one of Sierra’s hint books, so the fact that one of these existed in-game as well as <a href="https://www.sierragamers.com/wp-content/uploads/2019/12/Space_Quest_4_Hint_Book.pdf">being available as a printed hint book</a> was <em>super meta</em>. It’s also funny how the printed hint book contains a clue as to how you need to use the in-game hint book to find partial coordinates for the time pod.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00015.png" alt="" /></p>

<p>Eventually the Sequel Police will find you in SQX, and you’ll steal their time pod and use the code you pieced together from the gum wrapper and the hint book to jump all the way back to Space Quest I (check out <a href="/blog/2021/08/09/space-quest-the-sarien-encounter/">my review of that game</a> if you’re curious).</p>

<p>Once again, make sure you write down the coordinates in the time pod as that’s what you’ll need to return to SQX later!</p>

<p>The SQ1 sequence is real short, but the bikers you meet (who are in black and white) make fun of you for being rendered in all that fancy 256 color glory.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00018.png" alt="" /></p>

<p>You’ll bounce around time periods a couple more times collecting items you’ll need for the final showdown with Vohaul. Like most Sierra games you’ll find yourself picking up anything that isn’t nailed down to try and solve the various in-game puzzles.</p>

<p>Unlike many Sierra games though, there really aren’t that many items to find in this game. If you forget to pick up the bunny, bottle and the slime at the very beginning of the game I’m pretty sure you’ll find yourself in an unwinnable situation, but otherwise you should be able to jump between time periods if you forgot anything.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00021.png" alt="" /></p>

<p>There are plenty of ways for Roger to get himself killed, but unlike the last couple games in the series I didn’t really find there to be all that much variety in the messaging you get prior to a game over.</p>

<p>This doesn’t mean there aren’t <a href="https://www.youtube.com/watch?v=Raa1ZMOLJ3s">some great death sequences</a>, but the majority of the death dialog windows are just a variation of Roger lying on his stomach.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00003.png" alt="" /></p>

<p>To be fair, we all remember the zombie screeching at us and then Roger dying, so it’s not like these were “bad”. My issue was more with the lack of variety compared to previous games.</p>

<p>Honestly I like spending a little extra time per screen to see what interactions result in my untimely demise, but I just didn’t really find the results all that entertaining this time around.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00023.png" alt="" /></p>

<p>The endgame sequence involves hacking into the main computer in Vohaul’s lair (which you use the in-game hint book to do), then deleting some subroutines (like the guard robots). If you happen to delete the SQIV “program”, the game will actually exit.</p>

<p>I thought this was pretty clever, though if you aren’t prepared for it and haven’t saved … well I guess that’s on you 🤣. There’s also a Leisure Suit Larry 4 icon there, which is yet another in joke for Sierra fans as that game never existed (read <a href="https://allowe.com/games/larry/inside-stories/wheres-lsl4.html">Al Lowe’s true story of why the series jumped from LSL3 to LSL5</a>).</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00024.png" alt="" /></p>

<p>The game end’s with you facing off against Sludge Vohaul, who has taken over your son’s body. Oh yeah, you have a son apparently because - you know - time travel and stuff.</p>

<p>This sequence is pretty simple as you just sort of move around and throw each other to the ground, and eventually Vohaul will throw a disk that you need to retrieve an put into the super computer so you can download your son’s consciousness and upload it back to his body to finish the game.</p>

<p><img src="/images/adventure/sq4/scummvm-sq4-cd-00027.png" alt="" /></p>

<p>As much as I love the Space Quest series, this entry is probably one of my least favourites. Visually it’s impressive, and the writing and voice acting is excellent - but the time travel elements are actually kind of frustrating.</p>

<p>First of all, I couldn’t read the keyboard in the time pod. I found myself using a screenshot that I blew up to like 400% to try and figure out which key corresponded to which symbol to try and enter the time codes. Since you have to backtrack a few times, you need to go through this rigamarole a few times as well and it just seemed excessive as a result.</p>

<p>Next, I didn’t really find the story to be all that interesting. I like time travel and sci-fi stories, but this felt underdeveloped and focusing a bit more on jokes for Sierra fans than plot progression.</p>

<p>Overall it’s not all that bad, but it’s also not really all that memorable.</p>

<p><a href="https://www.youtube.com/@OneShortEye">OneShortEye</a>’s recent video about <a href="https://www.youtube.com/watch?v=db51SipYewo">How Speedrunners Broke Space Quest IV (again)</a> reignited my interest in this game, which ultimately resulted in this playthrough. If you’re into speed running I’d highly recommend his videos as he covers a lot of adventure games. As an aside, my site made a cameo appearance in his <a href="https://youtu.be/dSYnfLwGDRI?si=q0mHmSb9_OtgnUiG&amp;t=377">3 Obscure Easter Eggs in Sanitarium</a>, so might as well plug my <a href="/blog/2021/12/22/sanitarium/">Sanitarium review</a> 😅.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Space Quest IV: Roger Wilco and the Time Rippers</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>March 4, 1991</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows, Macintosh, Amiga, NEC PC-9801</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/8866"><em>How Long To Beat?</em></a></td>
      <td>4.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuredoor.net/walkthroughs/space-quest-iv-roger-wilco-time-rippers-walkthrough/">Walkthrough</a>, <a href="https://www.mocagh.org/sierra/sq4-manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>15</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>53%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/sq4/scummvm-sq4-cd-00005.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00005.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00007.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00007.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00011.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00011.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00012.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00012.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00013.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00013.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00014.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00014.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00016.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00016.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00019.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00019.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00020.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00020.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00022.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00022.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00025.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00025.png' },{ src: '/images/adventure/sq4/scummvm-sq4-cd-00026.png', thumb: '/images/adventure/sq4/scummvm-sq4-cd-00026.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/143/space-quest-iv-roger-wilco-and-the-time-rippers/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/sq4/scummvm-sq4-cd-00002.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/sq4/scummvm-sq4-cd-00002.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Normality (Gremlin Interactive) - 1996</title><link href="https://www.alexbevi.com/blog/2024/05/27/normality/" rel="alternate" type="text/html" title="Normality (Gremlin Interactive) - 1996" /><published>2024-05-27T09:15:52-04:00</published><updated>2024-05-29T07:02:18-04:00</updated><id>https://www.alexbevi.com/blog/2024/05/27/normality</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/05/27/normality/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Normality_(video_game)">Normality</a> is a 3D graphic adventure, released in June 1996 by Gremlin Interactive. All cut-scenes in the game are pre-rendered. The game’s engine was later used in the game <a href="https://www.mobygames.com/game/1418/realms-of-the-haunting/">Realms of the Haunting</a>.</p>

<p><img src="/images/adventure/normality/norm_030.png" alt="" /></p>

<p>Kent Knutson is a teenager who lives in the city of Neutropolis. The city is controlled by a totalitarian regime, which prohibits people to express any emotions that would deviate from the prescribed norm - such as joy and happiness. Kent is arrested by the Norms, the police force of Neutropolis, and put in prison for whistling a merry tune. In prison, he received an anonymous note that tells him that there is a resistance group somewhere in the city, which seeks to overthrow the dictator of Neutropolis. The question is - how can Kent find that resistance group?.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/normality/norm_001.png" alt="" /></p>

<p>What sets this game apart from other adventure games of the era is that you’re navigating a 3D world with a first person perspective. This is what you’d expect from Doom or Duke Nukem 3D, but not a point and click title.</p>

<p><img src="/images/adventure/normality/norm_000.gif" alt="" /></p>

<p>For the first time in this series I’m in including an animated GIF just to show this off. As you navigate the game world you move around with the arrow keys and can pan up and down to see above or below you.</p>

<p>The game design incorporates these mechanics pretty frequently as you’ll occasionally find yourself unable to progress because the item you need is behind something, or it’s above you in a narrow space and you need to look up and reposition yourself to interact with something.</p>

<p><img src="/images/adventure/normality/norm_028.png" alt="" />
<em>You need to navigate to the back of the room and look down while moving around the crate to see this mallet</em></p>

<p>Though the game world is presented in 3D, as you move around you also have a cursor you pan over the screen that will highlight things you can interact with. Clicking on an action area will bring up a “voodoo doll” that is basically a visual representation fo the verbs you can use to interact with the thing you’ve highlighted.</p>

<p><img src="/images/adventure/normality/norm_005.png" alt="" /></p>

<p>This is not a unique mechanic and appears in a lot of adventure games at this time (such as <a href="/blog/2023/03/10/full-throttle/">Full Throttle</a>). Once you bring up the voodoo doll (that’s what they call it in the <a href="https://www.starehry.eu/download/adventure/docs/Normality-Manual.pdf">manual</a>), moving the mouse cursor over the various verbs will animate them slightly so you know what you’re about to select.</p>

<p>The options are limited to the usual suspects of <code class="language-plaintext highlighter-rouge">LOOK</code>, <code class="language-plaintext highlighter-rouge">USE</code>, <code class="language-plaintext highlighter-rouge">OPEN</code>, <code class="language-plaintext highlighter-rouge">TALK</code> and <code class="language-plaintext highlighter-rouge">GET</code>.</p>

<p><img src="/images/adventure/normality/norm_014.png" alt="" /></p>

<p>The story progresses through various interactions with NPCs, which involves navigating basic dialog trees. There’s really nothing innovative here, though the US release of the game has Kent voiced by <a href="https://en.wikipedia.org/wiki/Corey_Feldman">Corey Feldman</a> which adds a nice nostalgic flair to the experience.</p>

<p><img src="/images/adventure/normality/norm_013.png" alt="" /></p>

<p>Aside from character interactions, the story also progresses through various pre-rendered cutscenes. These all have a very “90s” feel to them and though dated by today’s standards definitely don’t feel out of place in this game world.</p>

<p>These animated sequences occur pretty often, so the pace of the game is pretty consistently maintained. You’ll find yourself moving around each game scene, hovering the cursor over everything to see what you’re able to interact with, trying all available verbs to see what works then frequently being rewarded with an animation if you picked correctly.</p>

<p><img src="/images/adventure/normality/norm_004.png" alt="" /></p>

<p>A large portion of this game involves fetch quests and item combination puzzles. Maybe this is just an artifact of when this game came out, but I had a lot of trouble making progress without resorting to a walkthrough as a number of puzzles were a bit obtuse.</p>

<p>This could just be due to me being too impatient, but I found myself just randomly clicking each item on every other item more than once to try and make some progress when I’d get stuck.</p>

<p>I’m assuming the developers may have expected players to get stuck as the manual has hints for most of the game’s main areas!</p>

<p><img src="/images/adventure/normality/norm_007.png" alt="" /></p>

<p>You have access to a map (press <code class="language-plaintext highlighter-rouge">M</code> to access it) which opens up various game locations as you progress. If you don’t know about this then once you get out of the apartment you’re imprisoned in initially you won’t be able to progress with the game (yes, I got stuck like that at first).</p>

<p>Typically you’re just jumping between the various locations picking up items you may need to solve puzzles.</p>

<p><img src="/images/adventure/normality/norm_010.png" alt="" /></p>

<p>There aren’t all that many characters to interact with, but they will typically help move you in the right direction by giving plot detail or objectives.</p>

<p>As you progress, the game’s goofy soundtrack is playing in the background which enhances the mood appropriately. This whole game just sort of feels like you’re playing through an episode of a Saturday morning cartoon of that era - which isn’t a bad thing.</p>

<p><img src="/images/adventure/normality/norm_031.png" alt="" /></p>

<p>After solving a bunch of weird puzzles you’ll eventually find yourself underneath the stadium, which is a huge maze. This section can be a bit frustrating as you’ll first need to figure out how to get batteries for the night vision goggles - which involves stumbling around the maze in the dark for a while.</p>

<p>This final sequence just didn’t make a lot of sense, but it is weird and confusing in a way that is fitting to this title. You’ll end up finding Saul’s brain, which you need to bring up on stage in the stadium so that it can somehow change Paul’s thinking and free Neutropolis from his evil reign … or something like that.</p>

<p><img src="/images/adventure/normality/norm_033.png" alt="" /></p>

<p>I honestly had a lot of fun with this game, though it can be frustrating at times. I really appreciated a different approach to this genre through a 3D game world, and the story was definitely swinging for the fences in trying to present a unique experience.</p>

<p>There’s a great writeup by <a href="https://www.filfre.net/2023/01/normality/">The Digital Antiquarian</a> that goes into a lot more detail about this game that I’d highly recommend if you find this interesting.</p>

<p>Since I haven’t covered another title like this yet, and it presented a new take on the genre I think this one is worth checking out.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Normality</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Gremlin_Interactive">Gremlin Interactive</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Interplay_Entertainment">Interplay</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>June 1996</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/6672"><em>How Long To Beat?</em></a></td>
      <td>6 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://dosbox-x.com/">DOSBox-X</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="http://www.thecomputershow.com/computershow/walkthroughs/normalitywalk.htm#intro">Walkthrough 1</a>, <a href="https://gamefaqs.gamespot.com/pc/198211-normality/faqs/1680">Walkthrough 2</a>, <a href="https://www.starehry.eu/download/adventure/docs/Normality-Manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>15</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>14</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>11</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>64%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/normality/norm_000.raw1.png', thumb: '/images/adventure/normality/norm_000.raw1.png' },{ src: '/images/adventure/normality/norm_001.raw1.png', thumb: '/images/adventure/normality/norm_001.raw1.png' },{ src: '/images/adventure/normality/norm_002.png', thumb: '/images/adventure/normality/norm_002.png' },{ src: '/images/adventure/normality/norm_003.png', thumb: '/images/adventure/normality/norm_003.png' },{ src: '/images/adventure/normality/norm_006.png', thumb: '/images/adventure/normality/norm_006.png' },{ src: '/images/adventure/normality/norm_008.png', thumb: '/images/adventure/normality/norm_008.png' },{ src: '/images/adventure/normality/norm_009.png', thumb: '/images/adventure/normality/norm_009.png' },{ src: '/images/adventure/normality/norm_011.png', thumb: '/images/adventure/normality/norm_011.png' },{ src: '/images/adventure/normality/norm_012.png', thumb: '/images/adventure/normality/norm_012.png' },{ src: '/images/adventure/normality/norm_015.png', thumb: '/images/adventure/normality/norm_015.png' },{ src: '/images/adventure/normality/norm_016.png', thumb: '/images/adventure/normality/norm_016.png' },{ src: '/images/adventure/normality/norm_017.png', thumb: '/images/adventure/normality/norm_017.png' },{ src: '/images/adventure/normality/norm_018.png', thumb: '/images/adventure/normality/norm_018.png' },{ src: '/images/adventure/normality/norm_019.png', thumb: '/images/adventure/normality/norm_019.png' },{ src: '/images/adventure/normality/norm_020.png', thumb: '/images/adventure/normality/norm_020.png' },{ src: '/images/adventure/normality/norm_021.png', thumb: '/images/adventure/normality/norm_021.png' },{ src: '/images/adventure/normality/norm_022.png', thumb: '/images/adventure/normality/norm_022.png' },{ src: '/images/adventure/normality/norm_023.png', thumb: '/images/adventure/normality/norm_023.png' },{ src: '/images/adventure/normality/norm_024.png', thumb: '/images/adventure/normality/norm_024.png' },{ src: '/images/adventure/normality/norm_025.png', thumb: '/images/adventure/normality/norm_025.png' },{ src: '/images/adventure/normality/norm_026.png', thumb: '/images/adventure/normality/norm_026.png' },{ src: '/images/adventure/normality/norm_027.png', thumb: '/images/adventure/normality/norm_027.png' },{ src: '/images/adventure/normality/norm_029.png', thumb: '/images/adventure/normality/norm_029.png' },{ src: '/images/adventure/normality/norm_032.png', thumb: '/images/adventure/normality/norm_032.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/1999/normality/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Gremlin Interactive" /><category term="Interplay" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/normality/norm_000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/normality/norm_000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>