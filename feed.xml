<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://www.alexbevi.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.alexbevi.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-10-16T06:26:57-04:00</updated><id>https://www.alexbevi.com/feed.xml</id><title type="html">ALEX BEVILACQUA</title><subtitle>Programming, MongoDB, Ruby and anything else I find interesting. Sometimes dabble in RPG/JRPG/Adventure game reviews.</subtitle><entry><title type="html">Space Quest 6: The Spinal Frontier (Sierra On-Line) - 1995</title><link href="https://www.alexbevi.com/blog/2024/10/08/space-quest-6-the-spinal-frontier/" rel="alternate" type="text/html" title="Space Quest 6: The Spinal Frontier (Sierra On-Line) - 1995" /><published>2024-10-08T08:18:09-04:00</published><updated>2024-10-16T06:25:48-04:00</updated><id>https://www.alexbevi.com/blog/2024/10/08/space-quest-6-the-spinal-frontier</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/10/08/space-quest-6-the-spinal-frontier/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Space_Quest_6">Space Quest 6: Roger Wilco in the Spinal Frontier</a> is a point-and-click adventure game developed and published by Sierra On-Line in 1995. It is the sixth and final game in the Space Quest series, though (spoiler) the game ends on a cliffhanger that will ultimately never be resolved.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00005.png" alt="" /></p>

<p>Roger Wilco, the brave interstellar janitor who has already saved the universe from many great dangers, is now in a very embarrassing position. His commanders show no respect for his courageous actions in the previous game. Instead, he is being accused of all kinds of violations against the galactic law, is deprived of all the honors he got in the previous game, and as a token of mercy, is allowed to return to his old job - cleaning closets… But those unfortunate events are just the beginning of much bigger troubles Roger will get into. Once again, the future of galaxy depends on him!<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00022.png" alt="" /></p>

<p>This final entry in the series runs on the later SCI32 engine Rev 2.100.002 (aka <a href="http://sciwiki.sierrahelp.com/index.php/Sierra_SCI_Release_List#SCI2.1_.28middle.29">SCI2.1 (middle)</a>), which allowed it to use SVGA graphics with 256 colors at 640×480 resolution. Unlike other SCI games, it did not have the interface in a pull down bar at the top of the screen, but instead used a “verb bar” window along the bottom of the screen, similar to LucasArts’ SCUMM engine. The graphics style was also more cartoonish than in previous games, as well as incorporating an ample amount of 3-D rendered images.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00021.png" alt="" />
<em>I don’t love the visual style of the human characters…</em></p>

<p>I appreciated the updated visual style of the backgrounds and the UI, but honestly the closeup shots of any humanoid character just looked … off. Though there was clearly a lot of work put into the character design, I miss the pixel art of <a href="/blog/2024/09/10/space-quest-v/">Space Quest V</a>.</p>

<p>An increased colour palette and next-gen SCI game engine sort of left everything looking “flat” in my opinion.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00020.png" alt="" /></p>

<p>The cutscenes have not aged well, and are reminiscent of basically all 3-D rendered scenes of the early to mid 90s. I can’t really fault Sierra for this as this is just an artifact of the games of that era.</p>

<p>Most cutscenes felt more like filler than substance, and were just there to eat up some time. They could occasionally become repetitive and tedious if they were triggered every time you needed to backtrack (like with the “riding the tapeworm” sequence near the end).</p>

<p><img src="/images/adventure/sq6/scummvm00054.2.bmp" alt="" />
<em>Roger is really trying to push both buttons at once - and is - but it doesn’t look like it in ScummVM</em></p>

<p>While playing through the game I thought I hit some weird visual bug, but apparently it’s well known and only present in ScummVM (<a href="https://bugs.scummvm.org/ticket/9749">#9749 - SCI: SQ6: Shuttle Bay Entrance bug</a>). ScummVM’s developers have included many, many improvements to SCI engine games (including <a href="https://github.com/scummvm/scummvm/blob/master/engines/sci/engine/script_patches.cpp#L25289-L25318">script patches for SQ6</a>), however apparently the issue here is a little different.</p>

<p>Sierra actually <a href="https://patents.google.com/patent/US5287446A">patented</a> their <a href="http://sciwiki.sierrahelp.com/index.php/ToDo/Pathfinding/Patent">pathfinding algorithm</a>, so the ScummVM engineers had to do their own version of it instead. This can result in some visual anomalies like in the screenshot above.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00008.png" alt="" /></p>

<p>As with most Sierra adventure games, you run around picking stuff up in hopes of using it later to solve some puzzle. The inventory puzzles in this game weren’t all that challenging, and it was actually pretty clever how the fish kept ending up in your possession as you progressed.</p>

<p>I assumed this was being set up as <a href="https://en.wikipedia.org/wiki/Red_herring">“red herring”</a> gag, but this fish would actually end up being the solution to the final puzzle in the game (spoiler), so several times when you were about to leave an area permanently, a character threw it to you so you’d have it again.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00012.png" alt="" /></p>

<p>Overall, the voice acting is not great. I couldn’t bring myself to disable speech altogether though because <a href="https://en.wikipedia.org/wiki/Gary_Owens">Gary Owens</a> as the narrator just crushes it. If it weren’t for his dry, sarcastic delivery throughout the game I’d likely knock several more points off the <em>Sound</em> score.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00024.png" alt="" />
<em>By far, this is my favourite scene in the game</em></p>

<p>Whereas the previous game was a parody of Star Trek, Space Quest 6 is a mishmash of various science fiction properties that were popular at the time the game came out. Almost every name and location is a parody or pun - which if you’re in on the joke adds to the experience. I’m not sure how accessible the writing of the game is to a modern audience as a result.</p>

<p>The overarching plot involves Roger initially being targeted for “Project Immortality”, but instead his colleague Stellar Santiago is taken (after she saves Roger’s life). He then needs to rescue her by first finding her, then being shrunk down to enter her digestive system and destroy some nanobots.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00029.png" alt="" /></p>

<p>I really didn’t find the story to be all that interesting and it was mostly forgettable. The puzzles aren’t overly difficult, and typically just involve fetch quests and backtracking. The game’s locations aren’t that expansive, so searching everywhere doesn’t take all that long, and though there’s a bit of <a href="https://en.wiktionary.org/wiki/pixel_hunting">pixel-hunting</a> on certain screens, key items are typically out in the open.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00017.png" alt="" /></p>

<p>Unfortunately, I didn’t find nearly as many interesting ways to die as I would have in previous games, and the message you’re prompted with is fairly generic. This was part of the fun of the Space Quest series, and I found after about an hour of playing the game I didn’t bother messing around to see how I might die as it just wasn’t proving to be all that entertaining.</p>

<p>For new gamers it’s appreciated that you get a “Try Again” option, which just rewinds back to right before you made a mistake and doesn’t force you to rely on an earlier save. It’s fairly obvious most of the time though what the “right” choice is, so you likely won’t die too often.</p>

<p><img src="/images/adventure/sq6/scummvm-sq6-00033.png" alt="" /></p>

<p>Space Quest 6 ends on a cliffhanger, but since there was never a sequel made this is effectively where the series concludes. The game doesn’t have the same feel as the previous 5 entries in the series, and this is likely due to it not actually being made by the “Two Guys from Andromeda”, but instead <a href="https://en.wikipedia.org/wiki/Josh_Mandel_(video_game_designer)">Josh Mandel</a>.</p>

<p>Mandel designed the game, but left near the end of production and Scott Murphy (on of the “Two Guys”) came in to finish it off. This is likely why some of the gameplay feels uneven, which is confirmed in a 2006 interview with Josh Mandel:</p>

<blockquote>
  <p><em>“One of the inventory items cut was a comic book CD in Nigel’s room that was fully readable and had all the hints to the Datacorder puzzle. From a writing and design standpoint, it was fully finished, and I know that Barry Smith had started the artwork. I don’t understand why it was cut. But the comic book content was something I’d worked on for months, and it was something that I was uncharacteristically proud of … I think it would’ve been one of the greatest parody sequences in the SQ series. So not only was I very upset not to see it in the game, but the fact that they had to put the Datacorder hints in the manual, leading player to think it was meant to be copy protection, disturbed me greatly.”</em></p>
</blockquote>

<p><img src="/images/adventure/sq6/scummvm-sq6-00011.png" alt="" />
<em>I guess this wasn’t meant to be copy protection</em></p>

<p>The Datacorder puzzle did feel like copy protection, so I feel Josh’s frustration and am genuinely curious as to what the comic book CD experience would have been like. I guess we’ll never know, just like we’ll never know what Stellar Santiago meant when she said we were “going to like the next mission” …</p>

<p>Space Quest 6 isn’t great, but it’s good enough to play through at least once. If you’re only going to play one game in the series though, I’d recommend either <a href="/blog/2024/02/16/space-quest-iii/">Space Quest III</a> or <a href="/blog/2024/09/10/space-quest-v/">Space Quest V</a>.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Space Quest 6: The Spinal Frontier</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Sierra On-Line</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>July 11, 1995</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows, Macintosh</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/8862">How Long To Beat?</a></td>
      <td>5.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.wiw.org/~jess/sq6.html">Walkthrough</a>, <a href="https://spacequest.net/sq6/manual/">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Graphics (10)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Sound (10)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Plot / Progression (25)</strong></td>
      <td>15</td>
    </tr>
    <tr>
      <td><strong>Characters / Development (15)</strong></td>
      <td>8</td>
    </tr>
    <tr>
      <td><strong>Gameplay / Experience (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Replayability (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td><strong>Impact / Impression (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Bonus / Surprise (5)</strong></td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>52%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/sq6/scummvm-sq6-00001.png', thumb: '/images/adventure/sq6/scummvm-sq6-00001.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00002.png', thumb: '/images/adventure/sq6/scummvm-sq6-00002.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00003.png', thumb: '/images/adventure/sq6/scummvm-sq6-00003.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00004.png', thumb: '/images/adventure/sq6/scummvm-sq6-00004.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00006.png', thumb: '/images/adventure/sq6/scummvm-sq6-00006.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00007.png', thumb: '/images/adventure/sq6/scummvm-sq6-00007.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00009.png', thumb: '/images/adventure/sq6/scummvm-sq6-00009.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00010.png', thumb: '/images/adventure/sq6/scummvm-sq6-00010.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00013.png', thumb: '/images/adventure/sq6/scummvm-sq6-00013.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00014.png', thumb: '/images/adventure/sq6/scummvm-sq6-00014.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00015.png', thumb: '/images/adventure/sq6/scummvm-sq6-00015.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00016.png', thumb: '/images/adventure/sq6/scummvm-sq6-00016.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00018.png', thumb: '/images/adventure/sq6/scummvm-sq6-00018.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00019.png', thumb: '/images/adventure/sq6/scummvm-sq6-00019.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00023.png', thumb: '/images/adventure/sq6/scummvm-sq6-00023.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00025.png', thumb: '/images/adventure/sq6/scummvm-sq6-00025.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00026.png', thumb: '/images/adventure/sq6/scummvm-sq6-00026.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00027.png', thumb: '/images/adventure/sq6/scummvm-sq6-00027.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00028.png', thumb: '/images/adventure/sq6/scummvm-sq6-00028.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00030.png', thumb: '/images/adventure/sq6/scummvm-sq6-00030.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00031.png', thumb: '/images/adventure/sq6/scummvm-sq6-00031.png' },{ src: '/images/adventure/sq6/scummvm-sq6-00032.png', thumb: '/images/adventure/sq6/scummvm-sq6-00032.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/145/space-quest-6-roger-wilco-in-the-spinal-frontier/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="adventure" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/sq6/scummvm-sq6-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/sq6/scummvm-sq6-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Under a Killing Moon (Access Software) - 1994</title><link href="https://www.alexbevi.com/blog/2024/09/20/under-a-killing-moon/" rel="alternate" type="text/html" title="Under a Killing Moon (Access Software) - 1994" /><published>2024-09-20T06:03:15-04:00</published><updated>2024-09-30T20:25:01-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/20/under-a-killing-moon</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/20/under-a-killing-moon/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Under_a_Killing_Moon">Under a Killing Moon</a> is a 1994 point-and-click adventure interactive movie video game. It is the third installment in the Tex Murphy series of adventure games produced by Access Software.</p>

<p><img src="/images/adventure/moon/tex3_050.png" alt="" /></p>

<p>It is December of the year 2042. The world is still recovering from the disastrous consequences of the World War III. Radioactivity has turned many humans into mutants, and the gap between those and the “norms” (non-affected humans) is growing wider. Certain places in the world have retained the feel and the charm of the old times - among those is the Old San Francisco. There, the private investigator Tex Murphy is trying to deal with unemployment, upcoming poverty, and his melancholic mood following his divorce. After solving a simple robbery case, Tex attracts the attention of a mysterious woman who calls herself Countess Renier, and is hired by her to find a missing statuette. Things gradually begin to go wrong in this investigation, and Tex finds himself involved in a confrontation with a powerful and dangerous secret cult.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/moon/tex3_004.png" alt="" /></p>

<p><em>Under a Killing Moon</em> is the sequel to Access Software’s previous title <em>Martian Memorandum</em>. Though I haven’t played through this one yet, I have previously covered <a href="/blog/2023/01/19/mean-streets/">Mean Streets</a> and <a href="/blog/2023/04/20/countdown/">Countdown</a> - the first being a Tex Murphy adventure.</p>

<p>I’m a fan of old detective movies and the <a href="https://en.wikipedia.org/wiki/Film_noir">film noir</a> genre in general, so the introductory cut scene really hooked me right away and drew me into the dystopian future that was this game’s world.</p>

<p><img src="/images/adventure/moon/tex3_006.png" alt="" /></p>

<p>Right from the beginning you feel like you’re in a movie, which if you’ve watched the documentary <a href="https://www.youtube.com/watch?v=tooF40ktbdM">“The Making of Tex Murphy”</a> reinforces this further as the game developers really wanted to make movies.</p>

<p>According to <a href="https://www.filfre.net/2020/07/under-a-killing-moon/">The Digital Antiquarian’s <em>Under a Killing Moon</em></a> article, Tex Murphy first appeared in <a href="https://en.wikipedia.org/wiki/Plan_10_from_Outer_Space">Plan 10 from Outer Space</a> before eventually being repurposed as the protagonist in various Access Software titles:</p>

<blockquote>
  <p>Vandegrift had recently returned to Bountiful to take a job as Access’s art director, and was more than up for Jones’s plan. The two had dreams of showing at Sundance as they wrote a script that combined <a href="https://en.wikipedia.org/wiki/The_Maltese_Falcon_(1941_film)">The Maltese Falcon</a> with <a href="https://en.wikipedia.org/wiki/Close_Encounters_of_the_Third_Kind">Close Encounters of the Third Kind</a>. Jones took the starring role of a private detective born in the wrong time, who channeled not only Humphrey Bogart but also Roy Rogers, what with his penchant for yodeling cowboy tunes. The detective-cum-cowboy’s name was Tex Murphy.</p>
</blockquote>

<p><img src="/images/adventure/moon/tex3_000.png" alt="" /></p>

<p>Before diving into <em>Under a Killing Moon</em>, you first need to install and configure it. There’s something really nostalgic about the design of these DOS era configuration screens that try to make it as easy as possible to configure your sound card.</p>

<p>I’m pretty sure I never had more than one device ever (at a time) so my digital sound and music devices were always the same, but in this modern age of emulation, might as well splurge and setup a faux-MT 32 for all the music this game has to offer.</p>

<p><img src="/images/adventure/moon/tex3_029.png" alt="" /></p>

<p>You play as Tex Murphy, who’s a down on his luck private investigator looking for his next job. The game opens with a cinematic cutscene, then drops you into Tex’s office, which you can fully explore in 3D.</p>

<p>The game comes with 2 navigation modes - interactive and exploration. When you’re in exploration mode, you can move around the environment as if you’re playing DOOM. Tex can look all around using the mouse to control your field of vision, but you can also “stand” and “crouch” to see above and below things.</p>

<p><img src="/images/adventure/moon/tex3_048.png" alt="" /></p>

<p>A pretty big part of the game’s puzzle design revolves around this mechanic of panning and tilting the camera to see over and into things. If there’s ever a trash can in a room, it’s worth having a look into as there’s usually something in there you’ll need to <code class="language-plaintext highlighter-rouge">GET</code>.</p>

<p><img src="/images/adventure/moon/tex3_049.png" alt="" /></p>

<p>What you’ll often find in these trash cans are pieces of notes you’ll need to reassemble. This can be extremely time consuming to complete, but the game does at least give you instructions each time that lets you know what the goal of the puzzle is, and how to manipulate the pieces.</p>

<p>Each note reassembly puzzle is slightly different, so I appreciate that it didn’t just feel like busy work, but it’s obvious the designers were proud of this mechanic and wanted to reuse it as often as possible.</p>

<p><img src="/images/adventure/moon/tex3_035.png" alt="" /></p>

<p>There’s more to collect in this game than just ripped up notes you need to put back together, and these are all stored in your inventory. Each item can be either examined, used or combined - and it’s worth trying all 3 of these options with literally everything you pick up.</p>

<p>Examining items is a requirement as many times the item you initially picked up isn’t actually the thing you want. Examining it shows a 3D view of the item as it’s rotated, and you may discover a compartment with a key, or you’ll open it up and take something out - discarding the initial item in the process.</p>

<p>Though there are several item combination puzzles, the end result is typically pretty obvious, so the various items you need to collect and combine to form the final item are also pretty obvious.</p>

<p><img src="/images/adventure/moon/tex3_056.png" alt="" /></p>

<p>To navigate around the world of <em>Under a Killing Moon</em>, you have access to a quick travel map. New locations are added based on conversations with characters or by examining certain inventory items.</p>

<p>Many locations aren’t actually “explorable”, but simply contain a single character you can talk to. This can make the game world look a lot bigger than it is.</p>

<p>Since it’s REALLY easy to miss picking up key items in this game, the map is actually extremely useful. For locations (like Chandler Ave.) where there are several places you can visit, you can actually go directly to a key location right away by selecting it from the map.</p>

<p><img src="/images/adventure/moon/tex3_030.png" alt="" /></p>

<p>The story progresses through interactions with a couple dozen characters you’ll meet throughout your adventure. Instead of the typical dialogue tree adventure games present you with, <em>Under a Killing Moon</em> relies on a 3 options system used to set the tone of the question you want to ask.</p>

<p>Typically the option you select won’t matter, and the conversation will proceed “on rails”, but if you’re not careful with certain people you’ll miss key details if you pick the wrong options - or even get yourself killed!</p>

<p><img src="/images/adventure/moon/tex3_031.png" alt="" /></p>

<p>Dying in this game brings you back to the big detective in the sky, who will let you know it’s not your time yet and give you another chance.</p>

<p>You may also get a clue as to how you should have proceeded. Since this section is voiced by <a href="https://en.wikipedia.org/wiki/James_Earl_Jones">James Earl Jones</a>, it’s at least a bit enjoyable hearing him reassure you that it’s not your time and you should get back out there and try again.</p>

<p>Hopefully you remembered to save your game recently, as restore a previous save is the only option here - other than restarting from the beginning.</p>

<p><img src="/images/adventure/moon/tex3_059.png" alt="" /></p>

<p>Though saving early and often is pretty standard fare for an adventure game, it’s worth calling out <em>Under a Killing Moon</em>’s storage system.</p>

<p>When you start the game, you create a player, which is what you’ll be storing your games under. You can have multiple players with their own series of saves, which I guess if you’re sharing your computer with a sibling would be useful to keep your save games separated.</p>

<p>Each save automatically captures the current location, and you can even enter arbitrary notes about the save, which can also be handy.</p>

<p><img src="/images/adventure/moon/tex3_055.png" alt="" /></p>

<p>The story unfolds over 7 days, with each day starting with a title card. Once you solve the case of the robbery from the pawn shop and realize you may want to get back into sleuthing, you’ll need to get your fax machine fixed so you can maybe get some new cases.</p>

<p>One of the locations you gain access to early on is an electronics store, which seems to always have exactly one item for sale - and that item always ends up being the thing you currently need (how convenient).</p>

<p><img src="/images/adventure/moon/tex3_008.png" alt="" /></p>

<p>To get into the electronics store though, you’ll need some means to buy things - like a credit card. In your office you’ll find a stack of mail by the front door, which includes an application for a credit card.</p>

<p>Opening the drawers in your office will reveal a pen and an envelope, and combining those three items will create a “ready-to-mail application”, which you then just need to drop into a mailbox.</p>

<p>This is how a lot of these item combination puzzles work. There aren’t really all that many items on any day that you have access to, and it’s fairly obvious how they need to be used.</p>

<p><img src="/images/adventure/moon/tex3_043.png" alt="" /></p>

<p>Whenever you go to the electronics shop, if there’s an item for sale, you’re going to need it - and it’s only a credit card swipe away. I’m pretty sure there’s no limit on the card, but you only need to use it a handful of times in this one store in the game where you have the power to buy anything.</p>

<p>Navigating the dialogue options properly with the electronics store owner is required on one of the later days, as you’ll need him to spill some info about the security system he just installed at the Knickerbocker hotel.</p>

<p>If you don’t pick the right options, he’ll end the conversation early. Since there are only 3 options available for each conversation you have, it’s worth testing all variations with all characters just in case.</p>

<p><img src="/images/adventure/moon/tex3_028.png" alt="" /></p>

<p>During conversations with characters, you can also ask about various keywords. Not all characters will know about a all keywords, but this is how you advance your investigation.</p>

<p>You’ll also learn new keywords as you progress, and will need to backtrack to ask all characters about these to see if they can shed any light on the topic.</p>

<p><em>Under a Killing Moon</em> does a great job of making this game world feel large and expansive, but there actually aren’t that many locations to visit or characters to interact with.</p>

<p>The balance they strike though of forcing you to backtrack without making it feel tedious is impressive.</p>

<p><img src="/images/adventure/moon/tex3_022.png" alt="" /></p>

<p>Some characters you interact with are mutants, and may be disfigured. I know that earlier games go into more detail about what happened in the world for this to happen, but here they don’t really explore this very much.</p>

<p>For <a href="https://texmurphy.fandom.com/wiki/Under_a_Killing_Moon">some additional context</a>:</p>

<blockquote>
  <p>Some people have developed a natural resistance against radioactivity, and thus are normal or “Norms” – everybody else are Mutants in some form. Tensions between the two groups have risen dramatically since the end of the war, and Norms and Mutants usually do not get along. […] The Law and Order Party has long since dissolved and disbanded but it still lives on in the more extremist and openly anti - mutant group The Crusade for Genetic Purity which now espouses a return to pre-WWIII society with Norms having full control of society without mutants.</p>
</blockquote>

<p>You can ask characters about the crusade, but most won’t really give you much information.</p>

<p>I actually really love the backstory of this game and wish they’d leaned into world building a bit more, but I guess the expectation was you’d played through the previous games in the the series and were up to speed already.</p>

<p><img src="/images/adventure/moon/tex3_052.png" alt="" /></p>

<p>As the game progresses you get wrapped up in a plot to eradicate all mutants (and I think humans considered “impure”) by raining down a virus from an orbiting space station known as the Moon Child.</p>

<p>Your mission then becomes to save Eva (who you learn infiltrated the CAPRICORN corporation’s cult and was sharing info via videos) from the Moon Child, blow up the station and return to Earth.</p>

<p><img src="/images/adventure/moon/tex3_066.png" alt="" /></p>

<p>For a game considered the “largest video game ever” (at 4 CDs), <em>Under a Killing Moon</em> is fairly straightforward to complete.</p>

<p>This being an FMV game from the early 90s means you’re going to be treated to some questionable voice and character acting, but overall it’s not too bad.</p>

<p>James Earl Jones’ narrative does a great job of setting the tone of the game, and the brief sequences with <a href="https://en.wikipedia.org/wiki/Margot_Kidder">Margot Kidder</a> are enjoyable.</p>

<p>Navigating the game world’s 3D environment from a first person perspective made the exploration portions of the game very engaging, and since most scenes weren’t that big it didn’t feel like things were purposely hidden in weird places just to screw with you.</p>

<p>You really feel like you’re part of the story as it progresses, and the characters (typically) don’t feel two dimensional. The puzzles aren’t overly complicated, and though they can be a bit repetitive, don’t become tedious.</p>

<p>I had a lot of fun playing through <em>Under a Killing Moon</em>, and look forward to one day revisiting this world and its characters in <a href="https://en.wikipedia.org/wiki/The_Pandora_Directive">The Pandora Directive</a>, but given the rate at which I play through these games … that might take me a while.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Under a Killing Moon</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Access_Software">Access Software</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Access Software</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1994</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS, Windows</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/19399">How Long To Beat?</a></td>
      <td>8.5 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://dosbox-x.com/">DOSBox-X</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://adventuregamers.com/walkthrough/full/tex-murphy-under-a-killing-moon">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Graphics (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Sound (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Plot / Progression (25)</strong></td>
      <td>21</td>
    </tr>
    <tr>
      <td><strong>Characters / Development (15)</strong></td>
      <td>12</td>
    </tr>
    <tr>
      <td><strong>Gameplay / Experience (15)</strong></td>
      <td>11</td>
    </tr>
    <tr>
      <td><strong>Replayability (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Impact / Impression (10)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Bonus / Surprise (5)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>71%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/moon/tex3_002.png', thumb: '/images/adventure/moon/tex3_002.png' },{ src: '/images/adventure/moon/tex3_003.png', thumb: '/images/adventure/moon/tex3_003.png' },{ src: '/images/adventure/moon/tex3_005.png', thumb: '/images/adventure/moon/tex3_005.png' },{ src: '/images/adventure/moon/tex3_007.png', thumb: '/images/adventure/moon/tex3_007.png' },{ src: '/images/adventure/moon/tex3_009.png', thumb: '/images/adventure/moon/tex3_009.png' },{ src: '/images/adventure/moon/tex3_010.png', thumb: '/images/adventure/moon/tex3_010.png' },{ src: '/images/adventure/moon/tex3_011.png', thumb: '/images/adventure/moon/tex3_011.png' },{ src: '/images/adventure/moon/tex3_012.png', thumb: '/images/adventure/moon/tex3_012.png' },{ src: '/images/adventure/moon/tex3_013.png', thumb: '/images/adventure/moon/tex3_013.png' },{ src: '/images/adventure/moon/tex3_014.png', thumb: '/images/adventure/moon/tex3_014.png' },{ src: '/images/adventure/moon/tex3_015.png', thumb: '/images/adventure/moon/tex3_015.png' },{ src: '/images/adventure/moon/tex3_016.png', thumb: '/images/adventure/moon/tex3_016.png' },{ src: '/images/adventure/moon/tex3_017.png', thumb: '/images/adventure/moon/tex3_017.png' },{ src: '/images/adventure/moon/tex3_018.png', thumb: '/images/adventure/moon/tex3_018.png' },{ src: '/images/adventure/moon/tex3_019.png', thumb: '/images/adventure/moon/tex3_019.png' },{ src: '/images/adventure/moon/tex3_020.png', thumb: '/images/adventure/moon/tex3_020.png' },{ src: '/images/adventure/moon/tex3_021.png', thumb: '/images/adventure/moon/tex3_021.png' },{ src: '/images/adventure/moon/tex3_023.png', thumb: '/images/adventure/moon/tex3_023.png' },{ src: '/images/adventure/moon/tex3_024.png', thumb: '/images/adventure/moon/tex3_024.png' },{ src: '/images/adventure/moon/tex3_025.png', thumb: '/images/adventure/moon/tex3_025.png' },{ src: '/images/adventure/moon/tex3_026.png', thumb: '/images/adventure/moon/tex3_026.png' },{ src: '/images/adventure/moon/tex3_027.png', thumb: '/images/adventure/moon/tex3_027.png' },{ src: '/images/adventure/moon/tex3_032.png', thumb: '/images/adventure/moon/tex3_032.png' },{ src: '/images/adventure/moon/tex3_033.png', thumb: '/images/adventure/moon/tex3_033.png' },{ src: '/images/adventure/moon/tex3_034.png', thumb: '/images/adventure/moon/tex3_034.png' },{ src: '/images/adventure/moon/tex3_036.png', thumb: '/images/adventure/moon/tex3_036.png' },{ src: '/images/adventure/moon/tex3_037.png', thumb: '/images/adventure/moon/tex3_037.png' },{ src: '/images/adventure/moon/tex3_038.png', thumb: '/images/adventure/moon/tex3_038.png' },{ src: '/images/adventure/moon/tex3_039.png', thumb: '/images/adventure/moon/tex3_039.png' },{ src: '/images/adventure/moon/tex3_040.png', thumb: '/images/adventure/moon/tex3_040.png' },{ src: '/images/adventure/moon/tex3_041.png', thumb: '/images/adventure/moon/tex3_041.png' },{ src: '/images/adventure/moon/tex3_042.png', thumb: '/images/adventure/moon/tex3_042.png' },{ src: '/images/adventure/moon/tex3_044.png', thumb: '/images/adventure/moon/tex3_044.png' },{ src: '/images/adventure/moon/tex3_045.png', thumb: '/images/adventure/moon/tex3_045.png' },{ src: '/images/adventure/moon/tex3_046.png', thumb: '/images/adventure/moon/tex3_046.png' },{ src: '/images/adventure/moon/tex3_047.png', thumb: '/images/adventure/moon/tex3_047.png' },{ src: '/images/adventure/moon/tex3_051.png', thumb: '/images/adventure/moon/tex3_051.png' },{ src: '/images/adventure/moon/tex3_053.png', thumb: '/images/adventure/moon/tex3_053.png' },{ src: '/images/adventure/moon/tex3_054.png', thumb: '/images/adventure/moon/tex3_054.png' },{ src: '/images/adventure/moon/tex3_057.png', thumb: '/images/adventure/moon/tex3_057.png' },{ src: '/images/adventure/moon/tex3_058.png', thumb: '/images/adventure/moon/tex3_058.png' },{ src: '/images/adventure/moon/tex3_060.png', thumb: '/images/adventure/moon/tex3_060.png' },{ src: '/images/adventure/moon/tex3_062.png', thumb: '/images/adventure/moon/tex3_062.png' },{ src: '/images/adventure/moon/tex3_063.png', thumb: '/images/adventure/moon/tex3_063.png' },{ src: '/images/adventure/moon/tex3_064.png', thumb: '/images/adventure/moon/tex3_064.png' },{ src: '/images/adventure/moon/tex3_065.png', thumb: '/images/adventure/moon/tex3_065.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/850/under-a-killing-moon/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="adventure" /><category term="Access Software" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/moon/tex3_001.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/moon/tex3_001.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Scoop (Telarium) - 1986</title><link href="https://www.alexbevi.com/blog/2024/09/13/the-scoop/" rel="alternate" type="text/html" title="The Scoop (Telarium) - 1986" /><published>2024-09-13T06:42:44-04:00</published><updated>2024-09-14T15:06:48-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/13/the-scoop</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/13/the-scoop/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/The_Scoop_(video_game)">The Scoop</a> is a mystery adventure game published by Telarium, a subsidiary of Spinnaker Software, in 1986 for Apple II and rereleased by Spinnaker Software in 1989 for DOS. The plot is based on the collaborative detective novel of the same name, written in 1931 by Agatha Christie, Dorothy L. Sayers, E. C. Bentley, Anthony Berkeley, Freeman Wills Crofts, and Clemence Dane.</p>

<p><img src="/images/adventure/scoop/scoop_028.png" alt="" /></p>

<p>Though I read some Agatha Christie books many years ago, nothing really stuck with me other than vaguely remembering the plot of <a href="https://en.wikipedia.org/wiki/Murder_on_the_Orient_Express">Murder on the Orient Express</a>. As such, I had no idea what type of game <em>The Scoop</em> was going to be, nor did I have any familiarity with what (or who) the “London Detection Club” was.</p>

<blockquote>
  <p>You’re a reporter for the <em>Daily Courier</em>, and you’re investigating the murder of Geraldine Tracey. If you can solve the mystery in time, you’ll scoop the  <em>Morning Star</em> and win the game. But to get your scoop, it’s not enough merely to figure out who you think committed the murder. Instead, you must be present when the murderer is confronted by the authorities–even if you have to arrange the confrontation yourself!</p>
</blockquote>

<p>I started off by giving the <a href="https://www.mocagh.org/spinnaker/scoop-manual.pdf">game manual</a> a quick read, and the introductory blurb does definitely set the stage for the game. You pick you character’s gender, enter the name you’d like to be referred to as and get dropped in front of the Daily Courier.</p>

<p><img src="/images/adventure/scoop/scoop_001.png" alt="" /></p>

<p>In case you didn’t read the manual, your editor let’s you know what you need to do once you enter the office and select <code class="language-plaintext highlighter-rouge">SPEAK</code> from the verb list.</p>

<p>As with many adventure games of this era, you interact with the game world using various verbs. The DOS port, which was released 3 years after the Apple II version, improves the interface slightly by greying out verbs that aren’t currently accessible on a given screen.</p>

<p><img src="/images/adventure/scoop/scoop_008.png" alt="" /></p>

<p>The goal of this game is to solve the murder by Saturday, which gives you 5 days of in-game time to do so. Everything you do causes time to pass, and various events will only occur at certain times of the day, on certain days or after certain actions.</p>

<p>If you think there is an action about to occur but you need to kill some time, there’s even a <code class="language-plaintext highlighter-rouge">WAIT</code> verb you can use.</p>

<p><img src="/images/adventure/scoop/scoop_002.png" alt="" /></p>

<p>To try and progress the story and identify the murderer you’ll need to <code class="language-plaintext highlighter-rouge">TRAVEL</code> about the city taking taxis, trains and the bus. At each location there can be many shops, businesses or residences that you’ll find people in that you can question.</p>

<p>You’ll want to ask everyone <em>What’s on your mind?</em>, and take note, as this is how you’ll learn about the other characters and locations you’ll need to visit and speak to. You can’t ask about people or visit locations until they’ve been mentioned in conversation, so it’s pretty important to speak to everyone.</p>

<p>Here as well though, timing is everything and you’ll need to keep track of the time. Characters won’t always answer questions at certain times, and they have schedules to keep so they might leave mid conversation if they’re supposed to be somewhere.</p>

<p><img src="/images/adventure/scoop/scoop_003.png" alt="" /></p>

<p>When two or more people are in a room, you can <code class="language-plaintext highlighter-rouge">OBSERVE</code> their interactions to learn a bit about their relationship or gather additional clues. Unfortunately you won’t always know ahead of time if multiple people will be in a room, or even if they will eventually converge somewhere.</p>

<p>This game is all trial and error, and it’s pretty easy to make it all the way to Saturday without having gathered enough evidence or made enough progress to finish the game.</p>

<p>If this happens, you either reload an earlier save and keep grinding, or start over and try and be more efficient with you time management.</p>

<p><img src="/images/adventure/scoop/scoop_012.png" alt="" />
<em>Searching before midnight reveals nothing</em></p>

<p>Other than talking to everyone you meet, you’ll also need to <code class="language-plaintext highlighter-rouge">SEARCH</code> every screen to see if there are any clues you can <code class="language-plaintext highlighter-rouge">TAKE</code>. As with character interactions, searching a location can produce different results at different times of day or on different days.</p>

<p>For example, you can collect the daily paper from the <em>Morning Star</em>’s presses, but only if it’s after midnight.</p>

<p><img src="/images/adventure/scoop/scoop_013.png" alt="" />
<em>After midnight and the day’s paper is available and can be taken</em></p>

<p>You’re trying to scoop another reporter - which is why the title of the game is <em>The Scoop</em>. This is why it’s important to get the daily paper as it can give you clues as to how your rival’s investigation is going, as well as surface locations to visit when you <code class="language-plaintext highlighter-rouge">EXAMINE</code> the paper.</p>

<p>This is a bit tedious as any time you find something via a search, you need to take it and examine it. There’s also an <code class="language-plaintext highlighter-rouge">INVENTORY</code> you can scroll through, but it doesn’t really serve much of a purpose as the examine verb will also give you the same list.</p>

<p><img src="/images/adventure/scoop/scoop_018.png" alt="" /></p>

<p>Many times throughout the game you’ll want to search a room, but can’t as there’s someone in the room and they’d catch you. If you wait long enough though, they’ll eventually leave, but this can cost you a lot of time.</p>

<p><img src="/images/adventure/scoop/scoop_000.gif" alt="" />
<em><strong>Animated</strong>: wait, then wait, then wait some more and maybe something will happen</em></p>

<p>If you exit a location and wait long enough for the occupant to leave, you may see them jump into a cab. In these situations, you can also hail a cab and try to follow them, but this won’t always work. I didn’t actually use this during my playthrough, but it’s an interesting mechanic.</p>

<p>Taking note of people’s schedules like this is important, especially if you have to restart because you ran out of time. Knowing character schedules can help you plan your interrogations and investigation more efficiently to avoid having to wast time unnecessarily.</p>

<p><img src="/images/adventure/scoop/scoop_021.png" alt="" /></p>

<p>As your searches turn up clues, you’ll be able to show them to characters you’re interviewing to potentially surface further insights. Every interaction you have with a character takes up about 2 minutes of in-game time, so hammer everyone with questions can sometimes trigger their departure, which can leave you having asked the wrong questions or shown the wrong items and unable to progress.</p>

<p><img src="/images/adventure/scoop/scoop_025.png" alt="" />
<em>I’m pretty sure I needed that note as evidence</em></p>

<p>Showing the wrong item to the wrong person can also result in you losing that item. When this happens you’ll likely have to restore or restart as this may have been a key item.</p>

<p><img src="/images/adventure/scoop/scoop_027.png" alt="" /></p>

<p>Since your goal is to get Inspector Smart to confront the murderer while you are present, you’ll need to make sure you get him clues and information as you uncover them. Assuming all goes well you’ll be able to get this all sorted out before noon on Saturday.</p>

<p>If you aren’t able to have the Inspector confront the murderer, your editor lets you know you’ve failed, the paper goes bankrupt and you’re all unemployed.</p>

<p><img src="/images/adventure/scoop/scoop_031.png" alt="" />
<em>You solved the case. Good for you!</em></p>

<p>Assuming you are able to solve the case though and get Inspector Smart to the right place at the right time, your editor is proud of you and the game is over.</p>

<p>Honestly, <em>The Scoop</em> isn’t that bad. There’s some generic sound effects here and there, but no music anywhere so it’s a fairly quiet adventure. There are A LOT of characters and locations to visit and engage with in a short period of time, and it’s very likely you’ll fail and have to restart a few times before you’re able to identify the murderer.</p>

<p>Overall it’s a fairly short game, though it can feel a lot bigger than it is with all the backtracking and repetition that’s required. The time-based mechanic is interesting, but it can be frustrating when you’re just blindly <code class="language-plaintext highlighter-rouge">WAIT</code>ing on screens to see if a character might appear or a <code class="language-plaintext highlighter-rouge">SEARCH</code> might produce a different result.</p>

<p>I still enjoy these menu-driven games, but I get that they’re not for everyone. I did enjoy the story, and the characters felt realized and meaningful to the plot - even if there were too many of them.</p>

<p>Though I wouldn’t play this again or really recommend it to anyone, I did have some fun playing through it.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>The Scoop</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Telarium">Telarium</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Telarium, <a href="https://en.wikipedia.org/wiki/Spinnaker_Software">Spinnaker Software</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1986</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>Apple II, DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td>How Long To Beat?</td>
      <td>2 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://dosbox-x.com/">DOSBox-X</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://gamefaqs.gamespot.com/pc/565143-the-scoop/faqs/54081">Walkthrough</a>, <a href="https://www.mocagh.org/spinnaker/scoop-manual.pdf">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Graphics (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Sound (10)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td><strong>Plot / Progression (25)</strong></td>
      <td>16</td>
    </tr>
    <tr>
      <td><strong>Characters / Development (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Gameplay / Experience (15)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Replayability (10)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Impact / Impression (10)</strong></td>
      <td>3</td>
    </tr>
    <tr>
      <td><strong>Bonus / Surprise (5)</strong></td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>43%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/scoop/scoop_004.png', thumb: '/images/adventure/scoop/scoop_004.png' },{ src: '/images/adventure/scoop/scoop_005.png', thumb: '/images/adventure/scoop/scoop_005.png' },{ src: '/images/adventure/scoop/scoop_006.png', thumb: '/images/adventure/scoop/scoop_006.png' },{ src: '/images/adventure/scoop/scoop_007.png', thumb: '/images/adventure/scoop/scoop_007.png' },{ src: '/images/adventure/scoop/scoop_009.png', thumb: '/images/adventure/scoop/scoop_009.png' },{ src: '/images/adventure/scoop/scoop_010.png', thumb: '/images/adventure/scoop/scoop_010.png' },{ src: '/images/adventure/scoop/scoop_011.png', thumb: '/images/adventure/scoop/scoop_011.png' },{ src: '/images/adventure/scoop/scoop_014.png', thumb: '/images/adventure/scoop/scoop_014.png' },{ src: '/images/adventure/scoop/scoop_015.png', thumb: '/images/adventure/scoop/scoop_015.png' },{ src: '/images/adventure/scoop/scoop_016.png', thumb: '/images/adventure/scoop/scoop_016.png' },{ src: '/images/adventure/scoop/scoop_017.png', thumb: '/images/adventure/scoop/scoop_017.png' },{ src: '/images/adventure/scoop/scoop_019.png', thumb: '/images/adventure/scoop/scoop_019.png' },{ src: '/images/adventure/scoop/scoop_020.png', thumb: '/images/adventure/scoop/scoop_020.png' },{ src: '/images/adventure/scoop/scoop_022.png', thumb: '/images/adventure/scoop/scoop_022.png' },{ src: '/images/adventure/scoop/scoop_023.png', thumb: '/images/adventure/scoop/scoop_023.png' },{ src: '/images/adventure/scoop/scoop_024.png', thumb: '/images/adventure/scoop/scoop_024.png' },{ src: '/images/adventure/scoop/scoop_026.png', thumb: '/images/adventure/scoop/scoop_026.png' },{ src: '/images/adventure/scoop/scoop_029.png', thumb: '/images/adventure/scoop/scoop_029.png' },{ src: '/images/adventure/scoop/scoop_030.png', thumb: '/images/adventure/scoop/scoop_030.png' },]});inlineGallery.openGallery();</script>]]></content><author><name></name></author><category term="adventure" /><category term="Telarium" /><category term="Spinnaker Software" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/scoop/scoop_000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/scoop/scoop_000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why Cloudflare Workers Don’t Work With MongoDB</title><link href="https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb/" rel="alternate" type="text/html" title="Why Cloudflare Workers Don’t Work With MongoDB" /><published>2024-09-11T13:09:40-04:00</published><updated>2024-09-12T12:48:42-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/11/why-cloudflare-workers-dont-work-with-mongodb/"><![CDATA[<p><a href="https://workers.cloudflare.com/">Cloudflare Workers</a> is a great platform for deploying serverless JavaScript code, but has historically never supported raw sockets. In May of 2023 they <a href="https://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/">announced support for a <code class="language-plaintext highlighter-rouge">connect()</code> API</a> which allows <a href="https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/">TCP Sockets</a> to be created within Workers, but is not a direct replacement for Node.js’ <a href="https://nodejs.org/api/net.html#class-netsocket"><code class="language-plaintext highlighter-rouge">net.Socket</code></a> API.</p>

<p>Many NPM packages - including MongoDB’s <a href="https://www.mongodb.com/docs/drivers/node/current/">Node.js driver</a> - rely on <code class="language-plaintext highlighter-rouge">net.Socket</code> or <a href="https://nodejs.org/api/tls.html#class-tlstlssocket"><code class="language-plaintext highlighter-rouge">tls.TLSSocket</code></a> to connect to and communicate with remote systems. Using these libraries directly from Cloudflare Workers <a href="https://www.mongodb.com/community/forums/t/cloudflare-workers-integration-is-now-possible/226708/11?u=alexbevi">has not been possible</a> as a result of these missing APIs.</p>

<p>Cloudflare recently announced that <a href="https://blog.cloudflare.com/more-npm-packages-on-cloudflare-workers-combining-polyfills-and-native-code/">more NPM packages would be supported on Cloudflare Workers</a>, but for libraries that need <code class="language-plaintext highlighter-rouge">net.Socket</code> or <code class="language-plaintext highlighter-rouge">tls.TLSocket</code> access, will they work in a Cloudflare Workers environment?</p>

<blockquote>
  <p>Packages that could not be imported with <code class="language-plaintext highlighter-rouge">nodejs_compat</code>, even as a dependency of another package, will now load. This includes popular packages such as […] <strong><code class="language-plaintext highlighter-rouge">mongodb</code></strong>, […] and many more.</p>
</blockquote>

<p>Based on the blog post the Node.js driver should load, but can it be used?</p>

<blockquote class="prompt-tip">
  <p>Note that the fact that Workers can load, but not use the <code class="language-plaintext highlighter-rouge">mongodb</code> package was reported to Cloudflare at <a href="https://github.com/cloudflare/workers-sdk/issues/6684">https://github.com/cloudflare/workers-sdk/issues/6684</a></p>

  <p>The Cloudflare blog post has since been updated to remove <code class="language-plaintext highlighter-rouge">mongod</code> from the list of useable packages to avoid further confusion.</p>
</blockquote>

<h2 id="sample-application">Sample Application</h2>

<p>To test the latest iteration of Cloudflare Workers <a href="https://developers.cloudflare.com/workers/configuration/compatibility-dates/#setting-compatibility-flags">compatibility flags</a> we’ll be working with the following configuration:</p>

<p><strong><code class="language-plaintext highlighter-rouge">src/worker.ts</code></strong></p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">BSON</span><span class="p">,</span> <span class="nx">MongoClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongodb</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Env</span> <span class="p">{</span>
  <span class="nl">MONGODB_URI</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">client</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">requestCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="k">async</span> <span class="nf">fetch</span><span class="p">(</span><span class="na">request</span><span class="p">:</span> <span class="nx">Request</span><span class="p">,</span> <span class="na">env</span><span class="p">:</span> <span class="nx">Env</span><span class="p">,</span> <span class="na">_ctx</span><span class="p">:</span> <span class="nx">ExecutionContext</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span> <span class="nx">requestCount</span> <span class="p">}));</span>
    <span class="nx">requestCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">client</span> <span class="o">??=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URI</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">maxPoolSize</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">minPoolSize</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="na">serverSelectionTimeoutMS</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">if </span><span class="p">((</span><span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">countDocuments</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">drop</span><span class="p">().</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="kc">null</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">BSON</span><span class="p">.</span><span class="nx">EJSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}),</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">  </span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">relaxed</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
  <span class="p">},</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">package.json</code></strong></p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mongodb-cloudflare-example"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"wrangler dev"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@cloudflare/workers-types"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.20240603.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ts-node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^10.9.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.0.4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"wrangler"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.59.0"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"mongodb"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.8.1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wrangler.toml</code></strong></p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="py">name</span> <span class="p">=</span> <span class="s">"mongodb-cloudflare-example"</span>
<span class="py">main</span> <span class="p">=</span> <span class="s">"src/worker.ts"</span>
<span class="py">compatibility_flags</span> <span class="p">=</span> <span class="p">[</span><span class="s">"nodejs_compat_v2"</span><span class="p">]</span>

<span class="nn">[vars]</span>
<span class="py">MONGODB_URI</span> <span class="p">=</span> <span class="s">"mongodb+srv://..."</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To test the code above you would need to do the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install
</span>npm run start
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="evaluation">Evaluation</h2>

<p>The default connection string format when <a href="https://www.mongodb.com/docs/atlas/connect-to-database-deployment/#connect-to-your-cloud-cluster">connecting to your Atlas cluster</a> is <code class="language-plaintext highlighter-rouge">mongodb+srv</code>, which is what we included initially in the <code class="language-plaintext highlighter-rouge">wrangler.toml</code> file.</p>

<p>The first time we run our test code however we’re unable to resolve the <a href="https://www.mongodb.com/docs/manual/reference/connection-string/#srv-connection-format">SRV connection format</a> as it appears that <a href="https://nodejs.org/api/dns.html#dnsresolvetxthostname-callback"><code class="language-plaintext highlighter-rouge">dns.resolveTxt</code></a> is not implemented:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] Error: [unenv] dns.resolveTxt is not implemented yet!
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Since Atlas allows you to also connect using the <a href="https://www.mongodb.com/docs/manual/reference/connection-string/#standard-connection-string-format">standard connection string format</a>, let’s update the <code class="language-plaintext highlighter-rouge">MONGODB_URI</code> in the <code class="language-plaintext highlighter-rouge">wrangler.toml</code> to instead be <code class="language-plaintext highlighter-rouge">mongodb://...</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] MongoServerSelectionError: socket.once is not a function
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Based on the above it appears <a href="https://nodejs.org/api/events.html#eventsonceemitter-name-options"><code class="language-plaintext highlighter-rouge">events.once</code></a> is missing, which Node.js’ <code class="language-plaintext highlighter-rouge">net</code> module exposes from an <code class="language-plaintext highlighter-rouge">EventEmitter</code> import. I don’t think we’d be able to polyfill all this if that were considered the path forward 😓.</p>

<p>What about trying to configure <code class="language-plaintext highlighter-rouge">wrangler</code> to connect to a local MongoDB instance (ex: <code class="language-plaintext highlighter-rouge">mongodb://localhost:27017</code>)? Well in that case it will still fail, but at least it will fail differently:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>⎔ Starting local server...
{"requestCount":0}
[wrangler:err] MongoServerSelectionError: [unenv] net.createConnection is not implemented yet!
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="alternatives">Alternatives?</h2>

<p>If you happen upon the article called <a href="https://www.mongodb.com/developer/products/atlas/cloudflare-worker-rest-api/">“Create a REST API with Cloudflare Workers and MongoDB Atlas”</a> you may be thinking there’s an alternate solution to be explored. MongoDB offered a REST-based interface to your data in Atlas via the <a href="https://www.mongodb.com/docs/atlas/app-services/data-api/">Atlas Data API</a>, however this product was recently deprecated and will be sunset.</p>

<p>A custom REST-based API would be a solution to working with your MongoDB data from within Cloudflare Workers, so until the runtime is updated to better support Node.js’ socket APIs, see the <a href="https://www.mongodb.com/docs/atlas/app-services/data-api/data-api-deprecation">Data API deprecation</a> page for some ideas.</p>

<p><a href="https://docs.neurelo.com/guides/mongodb-atlas-migrate-rest-data-apis-to-neurelo">Neurelo seems like a good option</a> for getting a REST-based API off the ground with little effort.</p>

<h2 id="summary">Summary</h2>

<p>Though <a href="https://developers.cloudflare.com/workers/wrangler/configuration/#module-aliasing">module aliasing</a> and polyfills might be an option for some functionality, it really seems like Cloudflare Workers just aren’t meant to work with Node.js’ socket APIs. As a result, libraries such as MongoDB’s Node.js driver simply won’t be able to connect to anything.</p>

<p>Some work <a href="https://jira.mongodb.org/browse/NODE-4785">was proposed</a> by MongoDB’s team to allow a custom transport layer to be provided, however this would still require Cloudflare Workers to support Node.js’ <a href="https://nodejs.org/api/tls.html">TLS</a> API as <a href="https://www.mongodb.com/docs/atlas/reference/faq/security/#can-i-disable-tls-on-my-deployment-">TLS cannot, for good reasons, be disabled for Atlas deployments</a>.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><category term="node" /><category term="nodejs" /><category term="javascript" /><category term="typescript" /><summary type="html"><![CDATA[Cloudflare Workers is a great platform for deploying serverless JavaScript code, but has historically never supported raw sockets. In May of 2023 they announced support for a connect() API which allows TCP Sockets to be created within Workers, but is not a direct replacement for Node.js’ net.Socket API.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-cloudflare.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-cloudflare.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Space Quest V: Roger Wilco – The Next Mutation (Dynamix) - 1993</title><link href="https://www.alexbevi.com/blog/2024/09/10/space-quest-v/" rel="alternate" type="text/html" title="Space Quest V: Roger Wilco – The Next Mutation (Dynamix) - 1993" /><published>2024-09-10T06:20:32-04:00</published><updated>2024-09-10T09:15:59-04:00</updated><id>https://www.alexbevi.com/blog/2024/09/10/space-quest-v</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/09/10/space-quest-v/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<blockquote class="prompt-tip">
  <p>This is the first game that I’m reviewing since I <a href="/blog/2024/08/22/overhauling-my-scoring-criteria/">overhauled my scoring criteria</a> in August of 2024</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Space_Quest_V">Space Quest V: Roger Wilco – The Next Mutation</a> is a graphic adventure game, created by Dynamix, and released by Sierra On-Line for MS-DOS on February 5, 1993. The game is the fifth entry in the Space Quest series, and the first game to be only designed by Mark Crowe. The story, set within a spoof of the Star Trek franchise, focuses on players taking control of Roger Wilco, who achieves his dreams of becoming a star captain but winds up involved in saving the galaxy from a deadly threat posed by a man-made virus.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00012.png" alt="" /></p>

<p>After traveling back and forth through time in the previous game, Roger Wilco is back in the Starfleet Academy, serving as both a cadet and a janitor. Cheating his way through the Starfleet Aptitude Test, Roger is finally given the rank of captain, his own ship (a garbage scow) and a mission: to explore strange new worlds (which no man in his right mind would explore), to seek out new life and new civilizations (which grew out of the massive amounts of trash Roger will collect on his way), to boldly go where no man has gone before. Step by step Roger will have to unveil a galaxy-wide biohazardous material dumping scheme, solve the mystery of the disappearance of a fellow Starfleet captain and his ship, and confront an agent of an old nemesis.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00024.png" alt="" /></p>

<p>As I work my way through the games I’ve listed on this journey, Space Quest V was one I was more excited to replay as it has a lot of nostalgic value. I can still remember leafing through the <a href="https://www.spacequest.net/sq5/manual/sq5manual.pdf">Galactic Inquirer</a> that came with the game. At that time I would still occasionally go out grocery shopping with my parents and would see the tabloids at the check outs with headlines like <a href="https://www.ranker.com/list/funny-tabloid-headlines/nathandavidson">“Half-Man Half-Dog Baffles Doctors”</a>, so the format here was immediately appealing.</p>

<p>Not really sure how well this stands up nowadays though…</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00001.png" alt="" /></p>

<p>The manual gives you a couple pointers on how to get started on your adventure, including getting to your classroom and cheating on the StarCon Aptitude Test. Once you sit down and start taking the test, there is a robot monitoring everyone to make sure no one’s cheating - so clearly the goal here is to cheat.</p>

<p>Roger can peer over to see the answers of the students to either side of him. If he gets caught, he’ll be ejected from the academy (into space) and it’s game over. If you copy from the wrong student you’ll get the wrong answers, so make sure you pick the smart kid to cheat off of (hint: the one with the big brain).</p>

<p>When you select the right student you’ll hear the tone play that indicates your score has gone up. This is a sure fire way to confirm you’ve done something correctly that will advance the plot or direction of the game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00009.png" alt="" /></p>

<p>The game is a mashup of all your favourite sci-fi properties such as Star Trek, Star Wars and Alien. Early on you’ll meet a critter on the shape that looks a lot like a <a href="https://avp.fandom.com/wiki/Facehugger">facehugger</a> from Alien. Instead of it killing you right away though, Roger thinks he looks cute, names him Spike and keeps him as a pet.</p>

<p>Many story sequences are presented in this comic book panel style and it’s clear a lot of effort went into the artwork for this game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00002.png" alt="" /></p>

<p>For game from 1993 you’re getting some of the best VGA graphics sprite-based artists could crank out. The character models are extremely expressive, the background artwork is detailed and there’s plenty of sight gags and hidden details to discover on each screen that immerses you in the experience.</p>

<p>Space Quest games never take themselves too seriously, and Space Quest V is no exception. I really enjoy clicking the <code class="language-plaintext highlighter-rouge">LOOK</code> action on as much as I can on each screen as the feedback you get tends to be witty or funny.</p>

<p>When Roger does something stupid, the sound effect they chose was Homer Simpson’s “DOH!”, which just feels weirdly appropriate for this game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00030.png" alt="" /></p>

<p>There is no voice acting, and many scenes don’t have background music - just some looping background noise. When on the deck of your garbage scow the sound effects are what you’d expect to hear on the deck of the starship Enterprise.</p>

<p>When you do get music in a scene it tends to help build tension or reinforce that something significant is about to happen, but it is used sparingly which can make some scenes feel a bit empty.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00025.png" alt="" /></p>

<p>If you’ve played any of the Space Quest games you know that Roger Wilco is a bit of a tool, and sort of bumbles his way into situations he doesn’t belong in. For this installment in the series, he accidentally gets a perfect score on his StarCon Aptitude test and gets assigned to a starship as a captain.</p>

<p>This starship is actually a garbage scow - which is appropriate seeing as you’re a janitor. You’ll have to fly to various locations to pick up garbage in space as you wait for instructions or story elements to unfold that direct you to your next location.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00008.png" alt="" /></p>

<p>Initially you have 3 crew members, and you issue commands through various menus you can access from your control panel (click a coloured button to bring these up, or speak the crew members directly using the <code class="language-plaintext highlighter-rouge">COMMAND</code> icon).</p>

<p>This is a bit more involved than previous games, but it ends up being fairly straightforward. You’ll need the Galactic Inquirer for the star codes to various planets (this is the copy protection), and the commands you issue are usually the same:</p>

<ul>
  <li>lay in a course</li>
  <li>go to light speed</li>
  <li>wait to arrive</li>
  <li>go to regular speed</li>
  <li>orbit planet</li>
  <li>activate RSS</li>
</ul>

<p>This will suck up the space trash and allow you to proceed with the story.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00036.png" alt="" /></p>

<p>Like all good Sierra games of this era, there are many ways to get yourself killed. The Space Quest series always tends to have the best game over screens, so it’s worth experimenting a bit to see how Roger’s untimely end can be met in various scenarios.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00014.png" alt="" /></p>

<p>Also, like many Sierra games at the time, Space Quest V contains an unrelated mini-game that acts as filler. Instead of having to play poker like in <a href="/blog/2022/03/15/police-quest-1/">Police Quest: In Pursuit of the Death Angel</a>, or that stupid card game in <a href="/blog/2024/03/20/codename-iceman/">Codename: ICEMAN (Sierra On-Line)</a> … this time you play something like <a href="https://en.wikipedia.org/wiki/Battleship_(game)">Battleship</a>.</p>

<p>Seeing as you can <a href="https://en.wiktionary.org/wiki/savescum">savescum</a> your way to victory pretty easily, there’s not much challenge here. It is a decent distraction and can be fun for a few minutes, so I appreciate the fact that it was included.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00033.png" alt="" /></p>

<p>There is some variety to the gameplay, and at one point you are teleported down to a planet at the same time as a fly and end up having your genes spliced with the insect. Playing as a fly, you have to solve a couple of puzzles to get your body back while also advancing the story.</p>

<p>Being a fly allows you to crawl through a security card reader to gain access to a building that you’d typically need a card for. By crawling through the beams and observing which ones activate locking mechanisms, you’ll later be able to punch a card to recreate the access card.</p>

<p>I remember really finding this puzzle clever when I originally played this game as it wasn’t overly complicated, and knowing I had a business card and a hole punch in my inventory it sort of made sense what I was going to have to do.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00028.png" alt="" /></p>

<p>Not all the puzzles are fun though. When Cliffy (your chief engineer) gets himself ejected from the ship and you need to go rescue him it typically takes a few tries to navigate the awkward controls before you run out of fuel or oxygen.</p>

<p>Since I play these games on max speed, turning this down about 50% actually made the sequence a lot easier to complete.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00022.png" alt="" /></p>

<p>As I’m writing this review and going back over my screenshots, it seems arcade sequences are actually more prominent that I remembered. This is potentially the result of Dynamix developing the game - not Sierra.</p>

<p>An interesting piece of trivia is that Dynamix originally developed the demo for Space Quest V using their <a href="https://wiki.scummvm.org/index.php/DGDS">DGDS game engine</a>, but for the final game Sierra’s <a href="https://wiki.scummvm.org/index.php/SCI">SCI engine</a> was used.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00037.png" alt="" /></p>

<p>The only real gripe I had with the game was the maze at the very end. I just really dislike mazes - unless I’m playing a CRPG that is.</p>

<p>Navigating this maze is just a pain in the ass, but thankfully it’s fairly short and you can burn through the entire sequence in about 10 minutes. If you happen to pop out under the elevator incorrectly and try to climb you will be crushed to death and get to enjoy one of the many death screens this game has to offer … so that’s something I guess.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00044.png" alt="" /></p>

<p>Unlike most (all?) Sierra games, Space Quest V includes product placement in the form of the Sprint logo being displayed after every video call you make. I didn’t find this to be overly intrusive, but it was kind of odd for an adventure game.</p>

<p><img src="/images/adventure/sq5/scummvm-sq5-00043.png" alt="" /></p>

<p>The nostalgia factor on this game is pretty high for me, which is definitely reflected in the higher <em>Replayability</em> and <em>Bonus / Surprise</em> categories. I love the characters and the unapologetic parody at every turn - even if the plot is kind of thin.</p>

<p>I actually tried the <a href="https://archive.org/details/SpaceQuestVTheNextMutationDemo">demo</a> in DOSBox just to see what the difference was, and surprisingly it looked almost identical to the final version of the game.</p>

<p>I had a lot of fun replaying Space Quest V and would highly recommend this title to anyone getting into the genre. It’s pretty accessible, easy to get into and full of great writing - and puns - lots and lots of puns.</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Space Quest V: Roger Wilco – The Next Mutation</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Dynamix">Dynamix</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Sierra_Entertainment">Sierra On-Line</a></td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>February 5, 1993</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=SCI">SCI</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/8867"><em>How Long To Beat?</em></a></td>
      <td>6 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://wiw.org/~jess/sq5.html">Walkthrough</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Graphics (10)</strong></td>
      <td>6</td>
    </tr>
    <tr>
      <td><strong>Sound (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Plot / Progression (25)</strong></td>
      <td>17</td>
    </tr>
    <tr>
      <td><strong>Characters / Development (15)</strong></td>
      <td>10</td>
    </tr>
    <tr>
      <td><strong>Gameplay / Experience (15)</strong></td>
      <td>9</td>
    </tr>
    <tr>
      <td><strong>Replayability (10)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Impact / Impression (10)</strong></td>
      <td>7</td>
    </tr>
    <tr>
      <td><strong>Bonus / Surprise (5)</strong></td>
      <td>2</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>61%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/sq5/scummvm-sq5-00003.png', thumb: '/images/adventure/sq5/scummvm-sq5-00003.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00004.png', thumb: '/images/adventure/sq5/scummvm-sq5-00004.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00005.png', thumb: '/images/adventure/sq5/scummvm-sq5-00005.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00006.png', thumb: '/images/adventure/sq5/scummvm-sq5-00006.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00007.png', thumb: '/images/adventure/sq5/scummvm-sq5-00007.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00010.png', thumb: '/images/adventure/sq5/scummvm-sq5-00010.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00011.png', thumb: '/images/adventure/sq5/scummvm-sq5-00011.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00013.png', thumb: '/images/adventure/sq5/scummvm-sq5-00013.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00015.png', thumb: '/images/adventure/sq5/scummvm-sq5-00015.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00016.png', thumb: '/images/adventure/sq5/scummvm-sq5-00016.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00017.png', thumb: '/images/adventure/sq5/scummvm-sq5-00017.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00018.png', thumb: '/images/adventure/sq5/scummvm-sq5-00018.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00019.png', thumb: '/images/adventure/sq5/scummvm-sq5-00019.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00020.png', thumb: '/images/adventure/sq5/scummvm-sq5-00020.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00021.png', thumb: '/images/adventure/sq5/scummvm-sq5-00021.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00023.png', thumb: '/images/adventure/sq5/scummvm-sq5-00023.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00026.png', thumb: '/images/adventure/sq5/scummvm-sq5-00026.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00027.png', thumb: '/images/adventure/sq5/scummvm-sq5-00027.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00029.png', thumb: '/images/adventure/sq5/scummvm-sq5-00029.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00031.png', thumb: '/images/adventure/sq5/scummvm-sq5-00031.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00032.png', thumb: '/images/adventure/sq5/scummvm-sq5-00032.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00034.png', thumb: '/images/adventure/sq5/scummvm-sq5-00034.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00035.png', thumb: '/images/adventure/sq5/scummvm-sq5-00035.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00038.png', thumb: '/images/adventure/sq5/scummvm-sq5-00038.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00039.png', thumb: '/images/adventure/sq5/scummvm-sq5-00039.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00040.png', thumb: '/images/adventure/sq5/scummvm-sq5-00040.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00041.png', thumb: '/images/adventure/sq5/scummvm-sq5-00041.png' },{ src: '/images/adventure/sq5/scummvm-sq5-00042.png', thumb: '/images/adventure/sq5/scummvm-sq5-00042.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/144/space-quest-v-the-next-mutation/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Dynamix" /><category term="Sierra On-Line" /><category term="SCI" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/sq5/scummvm-sq5-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/sq5/scummvm-sq5-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Risk of data corruption when using Node v22.7.0 and the MongoDB Node.js driver</title><link href="https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver/" rel="alternate" type="text/html" title="Risk of data corruption when using Node v22.7.0 and the MongoDB Node.js driver" /><published>2024-08-29T07:18:44-04:00</published><updated>2024-09-12T05:35:46-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/29/risk-of-data-corruption-when-using-node-v22-dot-7-0-and-the-mongodb-node-dot-js-driver/"><![CDATA[<blockquote class="prompt-warning">
  <p>MongoDB issued the alert titled <a href="https://www.mongodb.com/resources/products/alerts/potential-data-integrity-issues-sep-2024">“Node.js v22.7.0 runtime defect can lead to data encoding issues”</a> on September 10, 2024
If you need detection or remediation scripts, you can find them there.</p>
</blockquote>

<p>Within days of the <a href="https://nodejs.org/en/blog/release/v22.7.0">Node v22.7.0 release</a>, users were already reporting that UTF-8 <a href="https://github.com/nodejs/node/issues/54543">encodings were broken</a>. The issue results from the introduction of an incorrect optimization for <code class="language-plaintext highlighter-rouge">buffer.write</code> which can result in strings being encoded using ISO-8859-1 rather than UTF-8.</p>

<p>Though the use of the fast API for <code class="language-plaintext highlighter-rouge">buffer.write</code> <a href="https://github.com/nodejs/node/pull/54565">will be disabled</a> with Node v22.8.0, developers using MongoDB’s Node.js driver could experience data corruption with Node v22.7.0.</p>

<h2 id="mitigating-the-issue">Mitigating the Issue</h2>

<p>To avoid the possibility of data corruption due to this bug it is recommended that Node v22.7.0 <strong>is not used at all.</strong></p>

<p>MongoDB recommends only using Node runtime versions <a href="https://www.mongodb.com/docs/drivers/node/current/compatibility/#language-compatibility">documented as compatible</a> in production environments. At the time of writing, Node v22.x is not considered a compatible runtime for use with the MongoDB Node.js driver.</p>

<h2 id="how-it-occurs">How it Occurs</h2>

<p>To illustrate how this can occur, consider the following reproduction:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">MongoClient</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">mongodb</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb://...</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bébé</span><span class="dl">'</span><span class="p">;</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Running Node </span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">versions</span><span class="p">.</span><span class="nx">node</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">coll</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">).</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">drop</span><span class="p">();</span>

    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while </span><span class="p">(</span><span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="p">)</span> <span class="p">{</span> <span class="nx">i</span><span class="o">++</span> <span class="p">}</span>

    <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="nx">value</span> <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">coll</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Found doc </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">doc</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nf">run</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When run using a previous version of Node, the <code class="language-plaintext highlighter-rouge">Buffer</code> length is consistently evaluated for 20K iterations, a document is inserted into a MongoDB collection then successfully retrieved.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Running Node 22.6.0
Found doc {"_id":1,"message":"bébé"}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When the same reproduction is run using Node v22.7.0 however, invalid UTF-8 string data can be produced, which would then be inserted into the MongoDB collection, resulting in subsequent retrieval attempts failing.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre>Running Node 22.7.0
BSONError: Invalid UTF-8 string in BSON document
    at parseUtf8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:148:19)
    at Object.toUTF8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:273:21)
    ... 6 lines matching cause stack trace ...
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Collection.findOne (/Users/alex/temp/test-node/node_modules/mongodb/lib/collection.js:274:21) {
  [cause]: TypeError: The encoded data was not valid for encoding utf-8
      at TextDecoder.decode (node:internal/encoding:443:16)
      at parseUtf8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:145:37)
      at Object.toUTF8 (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:273:21)
      at deserializeObject (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:2952:31)
      at internalDeserialize (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:2863:12)
      at Object.deserialize (/Users/alex/temp/test-node/node_modules/bson/lib/bson.cjs:4335:12)
      at OnDemandDocument.toObject (/Users/alex/temp/test-node/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js:208:28)
      at CursorResponse.shift (/Users/alex/temp/test-node/node_modules/mongodb/lib/cmap/wire_protocol/responses.js:207:35)
      at FindCursor.next (/Users/alex/temp/test-node/node_modules/mongodb/lib/cursor/abstract_cursor.js:222:41)
      at process.processTicksAndRejections (node:internal/process/task_queues:105:5) {
    code: 'ERR_ENCODING_INVALID_ENCODED_DATA'
  }
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though MongoDB’s Node.js driver supports <a href="https://www.mongodb.com/docs/drivers/node/current/fundamentals/bson/utf8-validation/">UTF-8 validation</a>, that feature applies to <em>decoding</em> BSON strings that are being received from the MongoDB server. As the bug in Node v22.7.0 occurs when <em>encoding</em> strings as UTF-8, the invalid data can still be serialized to BSON and written to the database.</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><category term="javascript" /><category term="node" /><summary type="html"><![CDATA[MongoDB issued the alert titled “Node.js v22.7.0 runtime defect can lead to data encoding issues” on September 10, 2024 If you need detection or remediation scripts, you can find them there.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-node.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-node.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linearize a Recursive Call Stack Using Thread Primitives</title><link href="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/" rel="alternate" type="text/html" title="Linearize a Recursive Call Stack Using Thread Primitives" /><published>2024-08-26T12:57:14-04:00</published><updated>2024-08-26T16:24:02-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/linearize-a-recursive-call-stack-using-thread-primitives/"><![CDATA[<h1 id="linearize-a-recursive-call-stack-using-thread-primitives">Linearize a Recursive Call Stack Using Thread Primitives</h1>

<blockquote class="prompt-tip">
  <p>Written by <a href="https://www.linkedin.com/in/advitimishra/">Adviti Mishra</a>, an intern on the MongoDB Ruby driver team</p>
</blockquote>

<p><a href="https://www.mongodb.com/docs/mongoid/current/">Mongoid</a> is an object document mapper (like an ORM) built on the <a href="https://www.mongodb.com/docs/ruby-driver/current/">MongoDB Ruby driver</a> that Ruby on Rails developers use to interact with their MongoDB data through model instances. When developers choose to <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#cascading-callbacks">cascade callbacks</a>, if their document has a large number of <a href="https://www.mongodb.com/docs/mongoid/current/reference/associations/#embedded-associations">embedded documents</a>, they might encounter a <code class="language-plaintext highlighter-rouge">SystemStackError</code>. In this article, we walk through how we used <a href="https://docs.ruby-lang.org/en/master/Fiber.html">Fibers</a> — a lightweight thread primitive — in a non-concurrency related context of recursion to address this issue!</p>

<h2 id="background"><strong>Background</strong></h2>

<p>MongoDB is a document database that’s designed for scalability, flexibility, and high availability. It’s a non-relational database that uses JSON-like documents to store data.</p>

<p>Using Mongoid, Ruby on Rails developers working with MongoDB can leverage <a href="https://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a>-like referential associations as well as a directly embeddable variation known as embedded associations. Let’s first explore one type of document: embedded documents.</p>

<h3 id="embedded-documents"><strong>Embedded documents</strong></h3>

<p>Developers can store related data together by <em>embedding</em> these documents in their parent model. This enables them to retrieve the associated data in a single query.</p>

<p>In our example we will use throughout the article, we define a Parent class, a Child class, and a Grandchild class that contain embedded associations. First, we will create a parent document that <em>embeds</em> two children documents with the first child, <em>embedding</em> two grandchildren documents.</p>

<p>The document representation in MongoDB would look something like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813902"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138fe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"grand_children"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813900"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf6813901"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"66a926dcca8ca12bf68138ff"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"who_am_i"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>This document was generated as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="nb">require</span> <span class="s1">'bundler/inline'</span>
<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

  <span class="n">gem</span> <span class="s1">'mongoid'</span><span class="p">,</span> <span class="s1">'9.0.0'</span>
<span class="k">end</span>

<span class="no">Mongoid</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">clients</span><span class="p">.</span><span class="nf">default</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">uri: </span><span class="s2">"mongodb://localhost:27017"</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># to indicate around callbacks should be fired for embedded documents</span>
<span class="no">Mongoid</span><span class="p">.</span><span class="nf">around_callbacks_for_embeds</span> <span class="o">=</span> <span class="kp">true</span>

<span class="c1"># Initial model definitions</span>
<span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Parent</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:children</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Example</span>
  <span class="n">embeds_many</span> <span class="ss">:grandchildren</span><span class="p">,</span> <span class="ss">cascade_callbacks: </span><span class="kp">true</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Grandchild</span> <span class="o">&lt;</span> <span class="no">Example</span><span class="p">;</span> <span class="k">end</span>

<span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 2 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, let’s say that every time the parent document is saved, we want to perform some logic on the parent document before, after, and around the save operation. An example of this would be logging the beginning of the operation, calculating and storing the time taken by the save operation, and logging the end of the operation. How exactly can we <em>hook</em> into this stage of the document lifecycle?</p>

<h3 id="callbacks"><strong>Callbacks</strong></h3>

<p><strong>Callbacks</strong>, in the context of a Mongoid application, are hooks into the lifecycle of a document’s persistence context. These hooks enable developers to perform logic before, after, and/or around (immediately before and immediately after) document lifecycle events like validate, create, update, save, and destroy.</p>

<p>Let’s modify our Example base class definition to include hooks into the before, after, and around events of the document’s <em>“save”</em> lifecycle.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Example</span>
  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>

  <span class="n">field</span> <span class="ss">:who_am_i</span><span class="p">,</span> <span class="ss">type: </span><span class="no">Integer</span>

  <span class="c1"># callbacks for the save operation</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] before callback"</span> <span class="p">}</span>
  <span class="n">around_save</span> <span class="ss">:log_around</span>
  <span class="n">after_save</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] after callback"</span> <span class="p">}</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">log_around</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (begin)"</span>
    <span class="k">yield</span> <span class="c1"># to yield control to the code block performing the save operation</span>
    <span class="nb">puts</span> <span class="s2">"[</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2">] around callback (end)"</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Mongoid depends on <a href="https://guides.rubyonrails.org/active_record_callbacks.html">ActiveRecord’s callbacks</a> implementation, with the relevant API for executing callbacks being <a href="https://www.rubydoc.info/github/mongoid/mongoid/Mongoid%2FInterceptable:run_callbacks"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#run_callbacks</code></a>. In our example, when <code class="language-plaintext highlighter-rouge">run_callbacks</code> is triggered, it will execute the <code class="language-plaintext highlighter-rouge">before_save</code> and <code class="language-plaintext highlighter-rouge">around_save</code> callbacks around the execution of the save operation, followed by the <code class="language-plaintext highlighter-rouge">after_save</code> callback.</p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> keyword in Ruby used when executing around callbacks is key.</p>

<p>Given that embedded documents are often used to store related data, sometimes, we may want the callbacks of embedded documents to run whenever a persistence operation is performed on the parent document. This phenomenon is known as <strong>cascading callbacks.</strong></p>

<p>💡 <strong>Illustration to build intuition:</strong></p>

<p>To illustrate how the callbacks <em>cascade</em> through the embedded documents, when we run the sample code above, the call to <code class="language-plaintext highlighter-rouge">parent.save</code> would produce the following output:</p>

<p><img src="/images/adviti-01.png" alt="" /></p>

<p>Having gained a better understanding of how callbacks cascade for embedded documents, we will now work on the implementation for the same. The task of running callbacks on embedded documents is abstracted away in a private API called <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187"><code class="language-plaintext highlighter-rouge">Mongoid::Interceptable#_mongoid_run_child_callbacks_with_around</code></a> and will be the function we will be working with moving forward.</p>

<h2 id="existing-implementation-mongoid-900-and-earlier"><strong>Existing implementation (Mongoid 9.0.0 and earlier)</strong></h2>

<p>Before we start coding, let’s first set some goals for our implementation and enumerate what <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> needs to know:</p>

<ol>
  <li>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</li>
  <li>All cascadable embedded documents need to have their callbacks executed.</li>
</ol>

<p>The implementation must also be elegant, readable, and simple to reason about so that working with it feels good (like <a href="https://www.artima.com/articles/the-philosophy-of-ruby">Matz tells us working with Ruby should</a>).</p>

<p>Next, let’s dive into the parameters <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> expects:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">kind</code>: the kind of callbacks to run (e.g., save, create, validate, etc.)</li>
  <li><code class="language-plaintext highlighter-rouge">children</code>: the list of embedded documents to run the callbacks on</li>
  <li><code class="language-plaintext highlighter-rouge">block</code>: executes the persistence operation the callbacks are being run for; this can either happen directly or after running any other callbacks</li>
</ol>

<p>Equipped with this, we will first analyze the <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L161-L187">old recursive implementation</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">child</span><span class="p">,</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>
  <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>
  <span class="k">elsif</span> <span class="n">tail</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="n">tail</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This function handles three cases:</p>

<ol>
  <li>There are zero embedded documents (<code class="language-plaintext highlighter-rouge">child.nil?</code>), and if a code block was provided, it will be run.</li>
  <li>There is one embedded document (<code class="language-plaintext highlighter-rouge">tail.empty?</code>) and its <a href="https://github.com/mongodb/mongoid/blob/v9.0.0/lib/mongoid/interceptable.rb#L113-L143"><code class="language-plaintext highlighter-rouge">run_callbacks</code></a> function will be invoked.</li>
  <li>There are more than one embedded documents, at which point <code class="language-plaintext highlighter-rouge">run_callbacks</code> will be called recursively.</li>
</ol>

<p>This recursive use case is where we can get into trouble. If we dig into the logic, it appears that <code class="language-plaintext highlighter-rouge">run_callbacks</code> yields to the custom block passed in that invokes <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> but with the parameter for children as the list of remaining documents (stored in <code class="language-plaintext highlighter-rouge">tail</code>).</p>

<p>This seems intuitive as well based on colorized output (see above), where each color corresponds to one invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code>.</p>

<p>To better understand how this recursive implementation can become problematic, let’s adjust the number of <code class="language-plaintext highlighter-rouge">Child</code> embedded documents our sample code will generate:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">parent</span> <span class="o">=</span> <span class="no">Parent</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># Build and embed 750 child documents</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span> <span class="o">=</span> <span class="mi">750</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Child</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Build and embed 2 Grandchild documents for the first child</span>
<span class="n">parent</span><span class="p">.</span><span class="nf">children</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">grandchildren</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="nf">times</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Grandchild</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">who_am_i: </span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">parent</span><span class="p">.</span><span class="nf">save</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Though the increased number of child embedded documents being generated may not seem like much, according to our Ruby runtime, it is… and running this example will now raise a <a href="https://ruby-doc.org/core-2.5.1/SystemStackError.html"><code class="language-plaintext highlighter-rouge">SystemStackError</code></a>.</p>

<pre><code class="language-txt">[...]/mongoid-9.0.0/lib/mongoid/config/options.rb:38:in `block (2 levels) in option': stack level too deep (SystemStackError)
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:177:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:183:in `_mongoid_run_child_callbacks_with_around'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:184:in `block in _mongoid_run_child_callbacks_with_around'
        from [...]/activesupport-7.1.3.4/lib/active_support/callbacks.rb:101:in `run_callbacks'
        from [...]/mongoid-9.0.0/lib/mongoid/interceptable.rb:139:in `run_callbacks'
         ... 8134 levels...
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:109:in `prepare_insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/creatable.rb:21:in `insert'
        from [...]/mongoid-9.0.0/lib/mongoid/persistable/savable.rb:27:in `save'
        from test.rb:53:in `&lt;main&gt;'
</code></pre>

<p>There are well-defined base cases in <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks</code>, so there is no way this is a case of:</p>

<pre><code class="language-txt">a case of:
	a case of:
		a case of:
			a case of:
				a case of:
					a case of:
						a case of:
							…
</code></pre>
<p>Infinite recursion!</p>

<p><strong>So, how did the stack space get exhausted?!</strong></p>

<p>Well, in the general case, an invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> creates a stack frame for <code class="language-plaintext highlighter-rouge">run_callbacks</code>. When <code class="language-plaintext highlighter-rouge">run_callbacks</code> eventually yields to the block passed in, this block creates a stack frame for running <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> and so on.</p>

<p>As a result, there is at least one extra stack frame for every invocation of <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> which corresponds directly to the number of embedded documents, eventually reaching a depth that results in a <code class="language-plaintext highlighter-rouge">SystemStackError</code> being raised. The number of callbacks that can be added to the stack can vary from system to system, which makes it challenging to optimize the existing approach consistently.</p>

<p>Maybe there’s a better way to approach this …</p>

<h2 id="replacing-recursion-with-fibers-in-mongoid-901"><strong>Replacing recursion with fibers in Mongoid 9.0.1</strong></h2>

<h3 id="so-what-even-are-fibers"><strong>So, what even are fibers?</strong></h3>

<p>Fibers are thread primitives that are used for implementing lightweight cooperative concurrency. These are the two methods we will be using from the Fiber API:</p>

<ol>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-i-resume"><code class="language-plaintext highlighter-rouge">Fiber#resume</code></a> method starts/resumes running the fiber.</li>
  <li>The <a href="https://docs.ruby-lang.org/en/master/Fiber.html#method-c-yield"><code class="language-plaintext highlighter-rouge">Fiber.yield</code></a> method is called from within the fiber to return control to the caller of the <code class="language-plaintext highlighter-rouge">Fiber#resume</code>. These two methods equip fibers with a feature that we will leverage. We can control the scheduling (unlike threads that are scheduled by the operating system).</li>
</ol>

<p>Fibers are typically used in concurrent contexts. However, we thought of using these two methods to somehow run callbacks based on a <a href="https://jira.mongodb.org/secure/attachment/480870/fiber-callbacks-exploration.rb">proof of concept</a> initially proposed by my mentor, <a href="https://github.com/jamis">Jamis Buck</a>!</p>

<h3 id="approach"><strong>Approach</strong></h3>

<p>To investigate this, I wanted to first answer these high-level questions:</p>

<ol>
  <li><strong>Bottom-up</strong>: How do callbacks work at the level of ActiveSupport in Ruby on Rails through <code class="language-plaintext highlighter-rouge">CallbackSequence</code>, <code class="language-plaintext highlighter-rouge">CallTemplate</code>, <code class="language-plaintext highlighter-rouge">Filters</code>, all the way up to <code class="language-plaintext highlighter-rouge">run_callbacks</code>?</li>
  <li><strong>Top-down</strong>: How does Mongoid identify a persistence operation, obtain a list of the embedded documents that callbacks can be cascaded to, and cascade the right callbacks for all of them using <code class="language-plaintext highlighter-rouge">run_callback</code>?</li>
  <li><strong>Middle-layer</strong>: At what point within the entire flow of callbacks (discovered through one and two) can fibers be used correctly?</li>
</ol>

<p>I spent the first few weeks of my internship understanding callbacks in the context of the holy trinity: Ruby on Rails, Mongoid, and fibers from the Ruby language. However, when my dreams started running on separate fibers that kept yielding to each other, I realized I had to touch some grass. It was when I was touching grass on a hike that I had my eureka moment — ironically inspired by recursion.</p>

<p>In the Programming and Data Structure class I TA’d, one mantra we would emphasize in the recursion unit was: <em>“Take the recursive leap of faith.”</em></p>

<p>The recursive leap of faith means:</p>

<ol>
  <li>Trust that the function you are implementing runs perfectly and returns the right value.</li>
  <li>Solely focus on figuring out how to depend on the function.</li>
</ol>

<p>Extrapolate this philosophy of trust to this project where <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> depends on Ruby on Rails’ ActiveSupport:</p>

<blockquote class="prompt-info">
  <p><strong>What if we trust that Ruby on Rails’ handling of callbacks is incredibly efficient and solely focus on <em>how</em> we depend on Ruby on Rails’ <code class="language-plaintext highlighter-rouge">run_callbacks</code> instead?</strong></p>
</blockquote>

<p>This helped us answer Question 3 above: At what point within the entire flow of callbacks can fibers be used correctly? Within <code class="language-plaintext highlighter-rouge">_mongoid_run_child_callbacks_with_around</code> itself!</p>

<p>The fundamental idea underpinning the solution that I discovered is leveraging fibers in a <em>“hand-off”</em> fashion.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">hand_off</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span>
  <span class="c1"># creating fibers for each child in children</span>
  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> does work (begin)"</span>
      <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="nb">puts</span> <span class="s2">"Fiber for </span><span class="si">#{</span><span class="n">child</span><span class="p">.</span><span class="nf">who_am_i</span><span class="si">}</span><span class="s2"> finishes work (end)"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># resumes one fiber at a time</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>

  <span class="c1"># execute the block</span>
  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="c1"># resumes one fiber at a time in reverse</span>
  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> line runs the fiber for the 0th child. “Fiber for 0 does work (begin)” gets printed. When execution hits the <code class="language-plaintext highlighter-rouge">Fiber.yield</code> statement, control is returned to <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code>. This then runs the fiber for the next child. In this fashion, the work <em>“before”</em> the yield gets executed for all the children.</p>

<p>Now, the actual <em>“work”</em> can take place. Thus, <code class="language-plaintext highlighter-rouge">block&amp;.call</code> runs.</p>

<p>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> line runs the fiber for the last child. <em>“Fiber for 1 does work (end)”</em> gets printed. This then runs the fiber for the second-to-last child. In this fashion, the work <em>“after”</em> the yield gets executed for all the children.</p>

<p>Does this flow seem familiar? It is a linearized version of the bottleneck in the recursive call stack from the implementation in Mongoid 9.0 (and earlier)!</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.each(&amp;:resume)</code> mimics running the before callback and the part of the around callback before the yield.</li>
  <li>The <code class="language-plaintext highlighter-rouge">block&amp;.call</code> mimics running the block passed in.</li>
  <li>The <code class="language-plaintext highlighter-rouge">fibers.reverse.each(&amp;:resume)</code> mimics the <em>“unfolding”</em> of the recursive algorithm by running the part of the around callback after the yield and the after callback.</li>
</ul>

<p>Isn’t this cool? Together, we have linearized the recursive call stack using a thread primitive!</p>

<p>In our case, <code class="language-plaintext highlighter-rouge">run_callbacks</code> does all the work we illustrated in the code block. To effectively hand off control between the fibers, the one tweak we need to make is that the block we pass into <code class="language-plaintext highlighter-rouge">run_callbacks</code> should yield the fiber.</p>

<p>The solution that we arrived at looks like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">_mongoid_run_child_callbacks_with_around</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="ss">children: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">children</span> <span class="o">=</span> <span class="p">(</span><span class="n">children</span> <span class="o">||</span> <span class="n">cascadable_children</span><span class="p">(</span><span class="n">kind</span><span class="p">))</span>
  <span class="n">with_children</span> <span class="o">=</span> <span class="o">!</span><span class="no">Mongoid</span><span class="o">::</span><span class="no">Config</span><span class="p">.</span><span class="nf">prevent_multiple_calls_of_embedded_callbacks</span>

  <span class="k">return</span> <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span> <span class="k">if</span> <span class="n">children</span><span class="p">.</span><span class="nf">empty?</span>

  <span class="n">fibers</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="n">child</span><span class="p">.</span><span class="nf">run_callbacks</span><span class="p">(</span><span class="n">child_callback_type</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">child</span><span class="p">),</span> <span class="ss">with_children: </span><span class="n">with_children</span><span class="p">)</span> <span class="k">do</span>
        <span class="no">Fiber</span><span class="p">.</span><span class="nf">yield</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fiber</span><span class="o">|</span>
    <span class="n">fiber</span><span class="p">.</span><span class="nf">resume</span>
    <span class="k">raise</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Errors</span><span class="o">::</span><span class="no">InvalidAroundCallback</span> <span class="k">unless</span> <span class="n">fiber</span><span class="p">.</span><span class="nf">alive?</span>
  <span class="k">end</span>

  <span class="n">block</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span>

  <span class="n">fibers</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:resume</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yay! Let’s now analyze how the two implementations fair for correctness and efficiency:</p>

<blockquote>
  <p><strong>If an around callback is defined, execution needs to pause at yield and resume after the yielded logic is done executing.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: Stack frames remember where to resume execution.</li>
    <li><em>Fiber-based implementation</em>: Each fiber resumes execution from the point it yielded.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>All cascadable embedded documents need to have their callbacks executed.</strong></p>
  <ul>
    <li><em>Recursive implementation</em>: A stack frame is created for each embedded document.</li>
    <li><em>Fiber-based implementation</em>: A fiber is created for each embedded document within one stack frame.</li>
  </ul>
</blockquote>

<p>As demonstrated previously, the recursive implementation stops working for embedded documents in the hundreds. On the other hand, the fibers implementation works for even 10,000+ embedded documents. Thus, you don’t need to worry about your application working or not working depending on the data you have (although, you should ideally not design your database to have tens of thousands of embedded documents).</p>

<p>The Fiber-based implementation we’ve discussed throughout this post was released in <a href="https://github.com/mongodb/mongoid/releases/tag/v9.0.1">Mongoid 9.0.1</a> if you want to go check it out. If you’re unsure how to get started with Mongoid, there are tutorials for <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-rails7/">Ruby on Rails</a> and <a href="https://www.mongodb.com/docs/mongoid/current/tutorials/getting-started-sinatra/">Sinatra</a> that can help start you on your journey to building something amazing with MongoDB and Ruby!</p>]]></content><author><name>Adviti Mishra</name></author><category term="Programming" /><category term="ruby" /><summary type="html"><![CDATA[Linearize a Recursive Call Stack Using Thread Primitives]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/ruby-banner-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rendering MongoDB Driver Specifications as a Book</title><link href="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/" rel="alternate" type="text/html" title="Rendering MongoDB Driver Specifications as a Book" /><published>2024-08-26T07:36:01-04:00</published><updated>2024-08-26T08:27:58-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/26/rendering-mongodb-driver-specifications-as-a-book/"><![CDATA[<p>MongoDB’s <a href="https://github.com/mongodb/specifications">Drivers Specifications</a> have always been available on GitHub. Since the content <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/us/">license is extremely permissive</a> there are a number of things we could do to transform that work as long as we provide proper attribution.</p>

<p>Until recently, this content has always been maintained as <a href="https://docutils.sourceforge.io/rst.html">restructuredText</a> documents, however with <a href="https://jira.mongodb.org/browse/DRIVERS-2789">DRIVERS-2789</a> this content has all been converted to <a href="https://daringfireball.net/projects/markdown/">Markdown</a>. MongoDB decided to use this opportunity (via <a href="https://jira.mongodb.org/browse/DRIVERS-2881">DRIVERS-2881</a>) to <a href="https://specifications.readthedocs.io/en/latest/">publish the specifications to ReadTheDocs</a> using <a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html">MkDocs</a>, however I wanted to try taking an alternate approach to see how difficult it would be to automate publication of Markdown content in book format.</p>

<h2 id="configuration">Configuration</h2>

<p>Since the specifications are hosted on GitHub, I began by <a href="https://github.com/alexbevi/specifications">forking the repository to <code class="language-plaintext highlighter-rouge">alexbevi/specifications</code></a>. Instead of <code class="language-plaintext highlighter-rouge">MkDocs</code> I chose <a href="https://rust-lang.github.io/mdBook/"><code class="language-plaintext highlighter-rouge">mdBook</code></a> as the tool for rendering Markdown to HTML as creating a book was as simple as:</p>

<ol>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#booktoml">Defining a <code class="language-plaintext highlighter-rouge">book.toml</code></a> with basic configuration options</li>
  <li><a href="https://rust-lang.github.io/mdBook/guide/creating.html#summarymd">Outlining the book structure in a <code class="language-plaintext highlighter-rouge">SUMMARY.md</code></a> file</li>
</ol>

<p>I <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/book.toml">defined my <code class="language-plaintext highlighter-rouge">book.toml</code></a> to indicate all my Markdown files would be in the <code class="language-plaintext highlighter-rouge">source/</code> directory, <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/source/SUMMARY.md">created a <code class="language-plaintext highlighter-rouge">source/SUMMARY.md</code></a> file with links to all the Markdown files I wanted in my book and was basically done.</p>

<p>Testing this out was as easy as running <code class="language-plaintext highlighter-rouge">mdbook serve --open</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>mdbook serve --open
2024-08-26 07:56:39 [INFO] (mdbook::book): Book building has started
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): It seems that there are both "README.md" and index.md under "/Users/alex/Workspace/specifications/source".
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): mdbook converts "README.md" into index.html by default. It may cause
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): unexpected behavior if putting both files under the same directory.
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): To solve the warning, try to rearrange the book structure or disable
2024-08-26 07:56:39 [WARN] (mdbook::preprocess::index): "index" preprocessor to stop the conversion.
2024-08-26 07:56:39 [INFO] (mdbook::book): Running the html backend
2024-08-26 07:56:43 [INFO] (mdbook::cmd::serve): Serving on: http://localhost:3000
2024-08-26 07:56:43 [INFO] (mdbook): Opening web browser
2024-08-26 07:56:43 [INFO] (warp::server): Server::run; addr=[::1]:3000
2024-08-26 07:56:43 [INFO] (warp::server): listening on http://[::1]:3000
2024-08-26 07:56:43 [INFO] (mdbook::cmd::watch::poller): Watching for changes...
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mdBook</code> will process the <code class="language-plaintext highlighter-rouge">SUMMARY.md</code> file, generate HTML content based on the indexed Markdown files and open a preview in your default browser.</p>

<h2 id="automation">Automation</h2>

<p>Laying out the book and rendering it from Markdown to HTML turned out to be pretty easy, but MongoDB’s engineers continuously refine the specifications so anything we generate would go stale fairly quickly. What if we could leverage <a href="https://docs.github.com/en/actions">GitHub Actions</a> to refresh our fork of the <code class="language-plaintext highlighter-rouge">specifications</code> repository, rebuild our book and continuously publish as <a href="https://pages.github.com/">GitHub Pages</a>?</p>

<p>We’ll be publishing our repository to a GitHub Pages instance (see the <a href="https://docs.github.com/en/pages/quickstart">Quickstart for GitHub Pages</a> if needed), so the first step is to ensure this has been configured. Next we’ll setup workflow that GitHub Actions can use to:</p>

<ol>
  <li>Checkout the upstream repository</li>
  <li>Sync the upstream repository’s <code class="language-plaintext highlighter-rouge">master</code> branch with our fork’s default branch (<code class="language-plaintext highlighter-rouge">mkbook</code> in this case)</li>
  <li>Install <code class="language-plaintext highlighter-rouge">mdbook</code> and build our book based on the latest Markdown files</li>
  <li>Deploy the HTML contents from our build target (<code class="language-plaintext highlighter-rouge">book/</code>) to the branch GitHub pages is configured to use (<code class="language-plaintext highlighter-rouge">gh-pages</code> in this case)</li>
</ol>

<p>If you want to check out the latest version of this it’s at <a href="https://raw.githubusercontent.com/alexbevi/specifications/mkbook/.github/workflows/sync.yml"><code class="language-plaintext highlighter-rouge">.github/workflows/sync.yml</code></a>, but at the time of writing it looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="rouge-code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Scheduled</span><span class="nv"> </span><span class="s">Upstream</span><span class="nv"> </span><span class="s">Sync'</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span>  <span class="s1">'</span><span class="s">0</span><span class="nv"> </span><span class="s">8</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span>

  <span class="na">workflow_dispatch</span><span class="pi">:</span>  <span class="c1"># click the button on Github repo!</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">sync_test_mode</span><span class="pi">:</span> <span class="c1"># Adds a boolean option that appears during manual workflow run for easy test mode config</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Fork</span><span class="nv"> </span><span class="s">Sync</span><span class="nv"> </span><span class="s">Test</span><span class="nv"> </span><span class="s">Mode'</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">boolean</span>
        <span class="na">default</span><span class="pi">:</span> <span class="kc">false</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">sync_latest_from_upstream</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Sync latest commits from upstream repo</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 1: run a standard checkout action, provided by github</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout target repo</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="c1"># optional: set the branch to checkout,</span>
        <span class="c1"># sync action checks out your 'target_sync_branch' anyway</span>
        <span class="na">ref</span><span class="pi">:</span>  <span class="s">mkbook</span>
        <span class="c1"># REQUIRED if your upstream repo is private (see wiki)</span>
        <span class="c1"># persist-credentials: false</span>

    <span class="c1"># REQUIRED step</span>
    <span class="c1"># Step 2: run the sync action</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Sync upstream changes</span>
      <span class="na">id</span><span class="pi">:</span> <span class="s">sync</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">aormsby/Fork-Sync-With-Upstream-action@v3.4.1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">target_sync_branch</span><span class="pi">:</span> <span class="s">mkbook</span>
        <span class="c1"># REQUIRED 'target_repo_token' exactly like this!</span>
        <span class="na">target_repo_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">upstream_sync_branch</span><span class="pi">:</span> <span class="s">master</span>
        <span class="na">upstream_sync_repo</span><span class="pi">:</span> <span class="s">mongodb/specifications</span>
        <span class="c1"># upstream_repo_access_token: $</span>

        <span class="c1"># Set test_mode true during manual dispatch to run tests instead of the true action!!</span>
        <span class="na">test_mode</span><span class="pi">:</span> <span class="s">$</span>

    <span class="c1"># Step 3: Display a sample message based on the sync output var 'has_new_commits'</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">New commits found</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'true'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "New commits were found to sync."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">No new commits</span>
      <span class="na">if</span><span class="pi">:</span> <span class="s">steps.sync.outputs.has_new_commits == 'false'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo "There were no new commits."</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show value of 'has_new_commits'</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">echo $</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install latest mdbook</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')</span>
        <span class="s">url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"</span>
        <span class="s">mkdir mdbook</span>
        <span class="s">curl -sSL $url | tar -xz --directory=./mdbook</span>
        <span class="s">echo `pwd`/mdbook &gt;&gt; $GITHUB_PATH</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build Book</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s"># This assumes your book is in the root of your repository.</span>
        <span class="s"># Just add a `cd` here if you need to change to another directory.</span>
        <span class="s">mdbook build</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">JamesIves/github-pages-deploy-action@4.1.7</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">branch</span><span class="pi">:</span> <span class="s">gh-pages</span> <span class="c1"># The branch the action should deploy to.</span>
        <span class="na">folder</span><span class="pi">:</span> <span class="s">book</span> <span class="c1"># The folder the action should deploy.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that the above is configured to run on a <a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule"><code class="language-plaintext highlighter-rouge">schedule</code></a>, so GitHub Actions will fire once a day to check if there were any updates in the upstream repository that we may want to sync.</p>

<h2 id="results">Results</h2>

<p>Since I wrote about <a href="/blog/2024/05/17/peeling-the-mongodb-drivers-onion/">“Peeling the MongoDB Drivers Onion”</a> I wanted this to be included in the book as well, so this was included as the <a href="https://github.com/alexbevi/specifications/blob/mkbook/source/README.md"><code class="language-plaintext highlighter-rouge">source/README.md</code></a> file. The rest of the contents of the specification repository were untouched and are just being rendered by <code class="language-plaintext highlighter-rouge">mdBook</code>.</p>

<p>If you want to explore MongoDB’s Driver Specifications, you can now just click on through to <a href="https://alexbevi.com/specifications/">alexbevi.com/specifications</a> (or select “Specifications” from the menu) and explore these to your heart’s content :)</p>]]></content><author><name></name></author><category term="MongoDB" /><category term="mongodb" /><category term="drivers" /><summary type="html"><![CDATA[MongoDB’s Drivers Specifications have always been available on GitHub. Since the content license is extremely permissive there are a number of things we could do to transform that work as long as we provide proper attribution.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/mongodb-logo.png" /><media:content medium="image" url="https://www.alexbevi.com/images/mongodb-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Overhauling My Scoring Criteria</title><link href="https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria/" rel="alternate" type="text/html" title="Overhauling My Scoring Criteria" /><published>2024-08-22T05:32:09-04:00</published><updated>2024-09-14T15:21:30-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/22/overhauling-my-scoring-criteria/"><![CDATA[<p>When I started the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series I devised a scoring system that I thought would meaningfully allow me to rate the games I was playing in a fair and balanced way:</p>

<blockquote class="prompt-warning">
  <p><strong>Atmosphere</strong>: This will focus on how the game makes you feel while you’re playing it and includes inputs such as <em>Music</em>, <em>Sound Effects</em>, <em>Graphics</em>, <em>Cut Scenes</em> and overall quality.
<br />Max Points: <strong>20</strong></p>

  <p><strong>Story</strong>: Adventure games are very story-driven, and as such the story needs to be evaluated as a top-level criteria. Focus will be on <em>Quality</em>, <em>Immersion</em>, <em>Complexity</em>, <em>Progression and Pacing</em>.
<br />Max Points: <strong>25</strong></p>

  <p><strong>Experience</strong>: How much <em>Fun</em> was the game? Was the <em>Difficulty</em> too high/low? Were the puzzles a <em>Challenge</em> or were they repetitive and felt derivative and lazy? Was there any introduction for the player or are you dropped in blind?
<br />Max Points: <strong>15</strong></p>

  <p><strong>Impact</strong>: Did you enjoy the overall experience? Would you play this again? Would you want to know more about this world and its characters in subsequent adventures?
<br />Max Points: <strong>10</strong></p>
</blockquote>

<p>For the first 84 games in this series, this was the rating system I used. What I learned pretty early on was that I didn’t really have a very good set of evaluation criteria, and since my score only went up to 70 and I was generating a percentage score, it wasn’t very balanced.</p>

<p>Nothing’s set in stone, so now’s as good a time as any to correct this misstep and revise the scoring system for the remainder of the series.</p>

<h2 id="new-scoring-system">New Scoring System</h2>

<p>In an attempt to improve the overall rating system used for the series I’ve decided to expand the categories and make the total score out of 100. I’ve also included some more opinionated criteria to allow me to boost games that I personally enjoyed - even if they’re less critically acclaimed.</p>

<blockquote class="prompt-info">
  <p>[10] <strong>Graphics</strong><br />
The overall visual experience of the game can include background art, character models, game interface, cutscenes, inventory design and basically anything that you can see while playing the game.</p>

  <p>[10] <strong>Sound</strong><br />
What do you hear? Is there ambient music or background noise? If the game is voiced are the actors giving it their all or <a href="https://grammarist.com/idiom/phone-it-in/">phoning it in</a>? Are sound effects present and enhancing the experience, or jarring/distracting.</p>

  <p>[25] <strong>Plot / Progression</strong><br />
What’s the quality of the overarching story in this game? Does it grab your attention and hold it or is it sort of “just there” as a forced reason for you to interact with this virtual world? How does the plot progress, and does everything wrap up at the end? When the game is over do you feel satisfied and want to learn more about this world and its inhabitants?</p>

  <p>[15] <strong>Characters / Development</strong><br />
Is the main character interesting and engaging? Are there other characters you interact with and are they fleshed out or just hollow NPCs there to deliver basic instructions? Do the main and supporting characters add depth to the world and gaming experience and how do they grow and evolve as the game progresses?</p>

  <p>[15] <strong>Gameplay / Experience</strong><br />
This is a game … so is it fun to play? The goal is to get from some starting point to some ending point, but was this journey worth your time? Sometimes these games can be a joy to play through and sometimes they’re a slog and focus too heavily on “filler” or elements that artificially pad out play time.</p>

  <p>[10] <strong>Replayability</strong><br />
Once the game is complete would you ever find yourself itching to play it again? Was the game fun to play or experience, or offer some variety of gameplay or character selection that could entice you back for repeated playthroughs.</p>

  <p>[10] <strong>Impact / Impression</strong><br />
Final thoughts and impressions on this game as a whole. Were you left wanting more, or were you rushing to the end to get it over with.</p>

  <p>[5] <strong>Bonus / Surprise</strong><br />
Anything unexpected or notable that’s worth calling out?</p>
</blockquote>

<h2 id="scores-for-posterity">Scores (for posterity)</h2>

<p>The snapshot of the scores at the time the system was overhauled is below. As I’m going to revisit each of these scores over time, the master list - <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">sorted by score</a> - will slowly be updated.</p>

<ol>
  <li><strong>91%</strong> <a href="/blog/2024/01/20/day-of-the-tentacle/">Maniac Mansion: Day of the Tentacle (LucasArts)</a> - 1993</li>
  <li><strong>89%</strong> <a href="/blog/2023/03/10/full-throttle/">Full Throttle (LucasArts)</a> - 1995</li>
  <li><strong>89%</strong> <a href="/blog/2023/06/14/gabriel-knight-sins-of-the-fathers/">Gabriel Knight: Sins of the Fathers (Sierra On-Line)</a> - 1993</li>
  <li><strong>87%</strong> <a href="/blog/2024/04/30/the-secret-of-monkey-island/">The Secret of Monkey Island (Lucasfilm Games)</a> - 1990</li>
  <li><strong>87%</strong> <a href="/blog/2022/12/16/grim-fandango/">Grim Fandango (LucasArts)</a> - 1998</li>
  <li><strong>86%</strong> <a href="/blog/2023/02/10/beneath-a-steel-sky/">Beneath a Steel Sky (Revolution Software)</a> - 1994</li>
  <li><strong>86%</strong> <a href="/blog/2021/12/22/sanitarium/">Sanitarium (DreamForge Intertainment)</a> - 1998</li>
  <li><strong>84%</strong> <a href="/blog/2023/01/23/sam-and-max-hit-the-road/">Sam &amp; Max Hit the Road (LucasArts)</a> - 1993</li>
  <li><strong>84%</strong> <a href="/blog/2021/08/09/space-quest-the-sarien-encounter/">Space Quest: The Sarien Encounter (Sierra On-Line)</a> - 1986</li>
  <li><strong>84%</strong> <a href="/blog/2024/06/09/flight-of-the-amazon-queen/">Flight of the Amazon Queen (Interactive Binary Illusions)</a> - 1995</li>
  <li><strong>81%</strong> <a href="/blog/2021/08/06/kings-quest/">King’s Quest: Quest for the Crown (Sierra On-Line)</a> - 1984</li>
  <li><strong>80%</strong> <a href="/blog/2021/08/15/princess-tomato-in-the-salad-kingdom/">Princess Tomato in the Salad Kingdom (Hudson Soft)</a> - 1984</li>
  <li><strong>80%</strong> <a href="/blog/2021/08/16/shadowgate/">Shadowgate (ICOM Simulations)</a> - 1987</li>
  <li><strong>79%</strong> <a href="/blog/2024/01/29/innocent-until-caught/">Innocent Until Caught (Divide By Zero)</a> - 1993</li>
  <li><strong>77%</strong> <a href="/blog/2022/03/31/blue-force/">Blue Force (Tsunami Games)</a> - 1993</li>
  <li><strong>76%</strong> <a href="/blog/2023/02/13/rise-of-the-dragon/">Rise of the Dragon (Dynamix)</a> - 1990</li>
  <li><strong>73%</strong> <a href="/blog/2023/03/30/i-have-no-mouth-and-i-must-scream/">I Have No Mouth, and I Must Scream (The Dreamers Guild)</a> - 1995</li>
  <li><strong>71%</strong> <a href="/blog/2023/02/21/police-quest-2/">Police Quest II: The Vengeance (Sierra On-Line)</a> - 1988</li>
  <li><strong>70%</strong> <a href="/blog/2024/02/16/space-quest-iii/">Space Quest III: The Pirates of Pestulon (Sierra On-Line)</a> - 1989</li>
  <li><strong>69%</strong> <a href="/blog/2023/02/18/manhunter-new-york/">Manhunter: New York (Evryware)</a> - 1988</li>
  <li><strong>69%</strong> <a href="/blog/2023/07/31/tony-tough/">Tony Tough and the Night of Roasted Moths (Nayma Software, Prograph Research S.r.l.)</a> - 1999</li>
  <li><strong>67%</strong> <a href="/blog/2023/10/05/blade-runner/">Blade Runner (Westwood Studios)</a> - 1997</li>
  <li><strong>67%</strong> <a href="/blog/2022/03/15/police-quest-1/">Police Quest: In Pursuit of the Death Angel (Sierra On-Line)</a> - 1987</li>
  <li><strong>66%</strong> <a href="/blog/2021/08/03/mystery-house/">Mystery House (On-Line Systems)</a> - 1980</li>
  <li><strong>66%</strong> <a href="/blog/2022/12/31/nightshade/">Nightshade (Beam Software)</a> - 1992</li>
  <li><strong>66%</strong> <a href="/blog/2023/02/24/space-quest-2/">Space Quest II: Vohaul’s Revenge (Sierra On-Line)</a> - 1987</li>
  <li><strong>64%</strong> <a href="/blog/2022/12/19/ringworld/">Ringworld: Revenge of the Patriarch (Tsunami Games)</a> - 1992</li>
  <li><strong>64%</strong> <a href="/blog/2024/05/27/normality/">Normality (Gremlin Interactive)</a> - 1996</li>
  <li><strong>64%</strong> <a href="/blog/2023/02/01/leisure-suit-larry-2/">Leisure Suit Larry Goes Looking for Love (in Several Wrong Places) (Sierra On-Line)</a> - 1988</li>
  <li><strong>63%</strong> <a href="/blog/2023/05/18/dreamweb/">DreamWeb (Creative Reality)</a> - 1994</li>
  <li><strong>63%</strong> <a href="/blog/2021/08/30/labyrinth/">Labyrinth: The Computer Game (Lucasfilm Games)</a> - 1986</li>
  <li><strong>61%</strong> <a href="/blog/2023/06/28/snatcher/">Snatcher (Konami)</a> - 1988</li>
  <li><strong>61%</strong> <a href="/blog/2023/04/20/countdown/">Countdown (Access Software)</a> - 1990</li>
  <li><strong>59%</strong> <a href="/blog/2024/07/09/discworld/">Discworld (Teeny Weeny Games/Perfect 10 Productions)</a> - 1995</li>
  <li><strong>59%</strong> <a href="/blog/2023/11/20/darkseed/">Dark Seed (Cyberdreams)</a> - 1992</li>
  <li><strong>59%</strong> <a href="/blog/2024/02/12/the-adventures-of-willy-beamish/">The Adventures of Willy Beamish (Dynamix)</a> - 1991</li>
  <li><strong>59%</strong> <a href="/blog/2023/12/16/police-quest-iii/">Police Quest III: The Kindred (Sierra On-Line)</a> - 1991</li>
  <li><strong>57%</strong> <a href="/blog/2022/12/19/leisure-suit-larry/">Leisure Suit Larry in the Land of the Lounge Lizards (Sierra On-Line)</a> - 1987</li>
  <li><strong>57%</strong> <a href="/blog/2023/01/19/mean-streets/">Mean Streets (Access Software)</a> - 1989</li>
  <li><strong>56%</strong> <a href="/blog/2023/05/31/return-to-ringworld/">Return to Ringworld (Tsunami Games)</a> - 1994</li>
  <li><strong>56%</strong> <a href="/blog/2023/11/24/the-legend-of-kyrandia/">The Legend of Kyrandia: Fables and Fiends (Westwood Studios)</a> - 1992</li>
  <li><strong>56%</strong> <a href="/blog/2023/11/29/gateway/">Frederik Pohl’s Gateway (Legend Entertainment)</a> - 1992</li>
  <li><strong>56%</strong> <a href="/blog/2024/02/06/loom/">Loom (Lucasfilm Games)</a> - 1990</li>
  <li><strong>53%</strong> <a href="/blog/2023/09/27/ripper/">Ripper (Take-Two Interactive)</a> - 1996</li>
  <li><strong>53%</strong> <a href="/blog/2024/06/02/space-quest-iv-roger-wilco-and-the-time-rippers/">Space Quest IV: Roger Wilco and the Time Rippers (Sierra On-Line)</a> - 1991</li>
  <li><strong>51%</strong> <a href="/blog/2024/02/23/harvester/">Harvester (DigiFX Interactive)</a> - 1996</li>
  <li><strong>51%</strong> <a href="/blog/2023/04/16/beavis-and-butthead/">Beavis and Butt-Head in Virtual Stupidity (Viacom New Media)</a> - 1995</li>
  <li><strong>50%</strong> <a href="/blog/2023/04/11/deja-vu/">Déjà Vu: A Nightmare Comes True (ICOM Simulations)</a> - 1985</li>
  <li><strong>49%</strong> <a href="/blog/2023/03/03/duckman/">Duckman: The Graphic Adventures of a Private Dick (The Illusions Gaming Company)</a> - 1997</li>
  <li><strong>49%</strong> <a href="/blog/2023/02/15/urban-runner/">Urban Runner (Coktel Vision)</a> - 1996</li>
  <li><strong>47%</strong> <a href="/blog/2023/01/16/hopkins-fbi/">Hopkins FBI (MP Entertainment)</a> - 1998</li>
  <li><strong>47%</strong> <a href="/blog/2023/09/06/manhunter-san-francisco/">Manhunter 2: San Francisco (Evryware)</a> - 1989</li>
  <li><strong>46%</strong> <a href="/blog/2024/04/16/lure-of-the-temptress/">Lure of the Temptress (Revolution Software)</a> - 1992</li>
  <li><strong>46%</strong> <a href="/blog/2023/12/27/tass-times-in-tonetown/">Tass Times in Tonetown (Interplay Productions, Brainwave Creations)</a> - 1986</li>
  <li><strong>46%</strong> <a href="/blog/2021/08/08/ulysses-and-the-golden-fleece/">Ulysses and the Golden Fleece (On-Line Systems)</a> - 1981</li>
  <li><strong>44%</strong> <a href="/blog/2023/06/07/torins-passage/">Torin’s Passage (Sierra On-Line)</a> - 1995</li>
  <li><strong>44%</strong> <a href="/blog/2023/08/09/uninvited/">Uninvited (ICOM Simulations)</a> - 1986</li>
  <li><strong>43%</strong> <a href="/blog/2023/02/07/eternam/">Eternam (Infogrames)</a> - 1992</li>
  <li><strong>41%</strong> <a href="/blog/2022/12/21/hugos-house-of-horrors/">Hugo’s House of Horrors (Gray Design Associates)</a> - 1990</li>
  <li><strong>41%</strong> <a href="/blog/2023/04/25/kings-quest-ii/">King’s Quest II: Romancing the Throne (Sierra On-Line)</a> - 1985</li>
  <li><strong>40%</strong> <a href="/blog/2023/02/15/the-crimson-crown-further-adventures-in-transylvania/">The Crimson Crown - Further Adventures in Transylvania (Penguin Software)</a> - 1985</li>
  <li><strong>40%</strong> <a href="/blog/2024/04/25/police-quest-open-season/">Police Quest: Open Season (Sierra On-Line)</a> - 1993</li>
  <li><strong>39%</strong> <a href="/blog/2023/05/23/companions-of-xanth/">Companions of Xanth (Legend Entertainment)</a> - 1993</li>
  <li><strong>39%</strong> <a href="/blog/2024/03/20/codename-iceman/">Codename: ICEMAN (Sierra On-Line)</a> - 1989</li>
  <li><strong>39%</strong> <a href="/blog/2023/01/12/cruise-for-a-corpse/">Cruise for a Corpse (Delphine Software International)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/02/28/ecoquest/">EcoQuest: The Search for Cetus (Sierra On-Line)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/05/10/hugo-ii-whodunit/">Hugo II, Whodunit? (Gray Design Associates)</a> - 1991</li>
  <li><strong>36%</strong> <a href="/blog/2024/07/15/jurassic-park/">Jurassic Park (Sega of America)</a> - 1993</li>
  <li><strong>34%</strong> <a href="/blog/2023/05/10/murder-on-the-mississippi/">Murder on the Mississippi (Activision)</a> - 1986</li>
  <li><strong>34%</strong> <a href="/blog/2024/06/14/altered-destiny/">Altered Destiny (Accolade)</a> - 1990</li>
  <li><strong>34%</strong> <a href="/blog/2023/11/14/the-black-cauldron/">The Black Cauldron (Sierra On-Line)</a> - 1986</li>
  <li><strong>34%</strong> <a href="/blog/2023/10/07/rendezvous-with-rama/">Rendezvous with Rama (Telarium)</a> - 1984</li>
  <li><strong>33%</strong> <a href="/blog/2021/08/24/transylvania/">Transylvania (Penguin Software)</a> - 1982</li>
  <li><strong>31%</strong> <a href="/blog/2023/12/08/the-dark-crystal/">The Dark Crystal (On-Line Systems)</a> - 1983</li>
  <li><strong>31%</strong> <a href="/blog/2024/03/29/the-dallas-quest/">Dallas Quest (Datasoft)</a> - 1984</li>
  <li><strong>29%</strong> <a href="/blog/2023/05/16/ace-ventura/">Ace Ventura (7th Level)</a> - 1996</li>
  <li><strong>29%</strong> <a href="/blog/2022/12/30/wizard-and-the-princess/">Wizard and the Princess (On-Line Systems)</a> - 1980</li>
  <li><strong>27%</strong> <a href="/blog/2023/02/07/kabul-spy/">Kabul Spy (Sirius Software)</a> - 1982</li>
  <li><strong>21%</strong> <a href="/blog/2024/08/06/bargon-attack/">Bargon Attack (Coktel Vision)</a> - 1992</li>
  <li><strong>19%</strong> <a href="/blog/2023/10/26/lost-in-time/">Lost in Time (Coktel Vision)</a> - 1993</li>
  <li><strong>19%</strong> <a href="/blog/2023/04/26/mission-asteroid/">Mission Asteroid (On-Line Systems)</a> - 1980</li>
  <li><strong>14%</strong> <a href="/blog/2023/10/24/adventureland/">Adventureland (Adventure International)</a> - 1982</li>
  <li><strong>13%</strong> <a href="/blog/2023/02/08/emmanuelle/">Emmanuelle (Coktel Vision)</a> - 1989</li>
  <li><strong>7%</strong> (was <strong>11%</strong>) <a href="/blog/2023/03/23/geisha/">Geisha (Coktel Vision)</a> - 1990</li>
</ol>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="series" /><category term="adventure" /><summary type="html"><![CDATA[When I started the “Let’s Adventure!” series I devised a scoring system that I thought would meaningfully allow me to rate the games I was playing in a fair and balanced way:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure-banner.jpg" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bargon Attack (Coktel Vision) - 1992</title><link href="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/" rel="alternate" type="text/html" title="Bargon Attack (Coktel Vision) - 1992" /><published>2024-08-06T06:29:18-04:00</published><updated>2024-09-10T09:02:52-04:00</updated><id>https://www.alexbevi.com/blog/2024/08/06/bargon-attack</id><content type="html" xml:base="https://www.alexbevi.com/blog/2024/08/06/bargon-attack/"><![CDATA[<blockquote class="prompt-info">
  <p>This review is part of the <a href="/blog/2021/07/28/adventure-games-1980-1999/">“Let’s Adventure!”</a> series. See all reviewed games sorted by rating <a href="/blog/2021/08/08/adventure-games-1980-1999-sorted-by-score/">here</a>.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Bargon_Attack">Bargon Attack</a> is an adventure game, originally released in Spain and France in 1992. The cyberpunk game uses stylized art presented in a 2.5D format.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00001.png" alt="" /></p>

<p>Bargon Attack is one of the less known adventures from Coktel Vision, though it was one of the first that introduced the unique interface that was used in many Coktel games that followed. It was also one of the first of Coktel’s games to use FMV technology in cut-scenes.</p>

<p>The gameplay is a mix of science fiction, cyberpunk and comedy elements. It takes place in the near future when an alien race named Bargon conquered the Earth and enslaved its people. You take a role of the young programmer who decides to put an end to the cruel aliens. You’ll travel through 20 or so locations. Each one consists of 1 to 3 screens, similar to other Coktel games.</p>

<p>Along your travels, you’ll face dangerous creatures and some strange alien technology. There are some occasions when you can die (though the option to replay the level is always available), plus the game also features several arcade sequences.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00002.png" alt="" /></p>

<p>The game starts off with some good ol’ fashion copy protection. I assumed ScummVM would allow me to bypass this, but if you happen to play an original copy in DOSBox or something else, the <a href="https://amiga.abime.net/games/view/bargon-attack#scans">scans</a> for these colour charts aren’t hard to find.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00007.png" alt="" /></p>

<p>Once you get past the copy protection you get into the main game, which is a fairly generic point and click adventure. Moving the cursor around the screen will call out areas you can interact with, and click on those will execute the associated action.</p>

<p>Unlike most adventure games, there are only a couple of verbs available, and they tend to just be to “look” at whatever is highlighted, or to pick it up if that’s an option.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00003.png" alt="" /></p>

<p>Picking up items will change the cursor to represent the item you just picked up, but you typically can’t use it right away so you need to right click to get your original cursor back. This was a bit cumbersome and unintuitive at first, but once you realize that’s how you’re supposed to play this game it wasn’t that big of a deal.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00011.png" alt="" /></p>

<p>The purpose of the game seems to be to follow this hooded guy around that you witnessed killing someone. It turns out that he’s from Bargon (and is a Bargonian?) and through people playing the game Bargon Attack, humans have somehow allowed Bargon … to Attack.</p>

<p>I really didn’t follow the plot at all, but there’s a computer at the end you need to put a disk into that for some reason or another will save the Earth.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00012.png" alt="" /></p>

<p>There aren’t a lot of items you need to pick up and use throughout the game, but the arm unit you get early on is actually sort of an interesting tool. You can pick up various “disks” throughout the game that give the arm unit different abilities, which can help you solve puzzles or give you clues as to what to do next.</p>

<p>The programs these disks contain are “shoot”, which lets you fire a beam at something (usually an enemy). A “mutate” program allows you to transform what you aim at, and “translate” can be used to decipher Bargonian text or speech.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00016.png" alt="" /></p>

<p>You’ll use the arm unit quite a bit as it’s the main way to advance through the game. The other way to advance through the game is with a walkthrough as a lot of the puzzles just aren’t that well designed and it’s very easy to get yourself killed.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00009.png" alt="" />
<em>Get used to this screen - it’s the only one you see when you mess up</em></p>

<p>Every time you die - which will happen a lot - you get the exact same <em>Game Over</em> screen. Thankfully the game allows you to just return to the same screen you just died on to try again, so if you forgot to save for a while you typically won’t lose much progress.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00004.png" alt="" />
<em>Make sure you write this pattern down …</em></p>

<p>It’s really not all that obvious what you’re supposed to be doing at any time during this game. Though you’ll meet a couple characters here and there, there’s no dialogue or interaction to speak of so those characters are no different than any other static asset in the game.</p>

<p>The story will progress via the cutscenes as you advance from section to section, but the story also doesn’t really make all that much sense - though they’re clearly trying to make it seem like there is one.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00010.png" alt="" />
<em>Oh goody, a filler arcade sequence</em></p>

<p>To break up the monotony (I guess) there is an arcade sequence early on … assuming you are able to make your way into the water. There’s absolutely no reason for this sequence to exist other than to kill time, so you need to mash your way through a bunch of crab things before they take away enough of your “health” to trigger another <em>Game Over</em>.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00014.png" alt="" /></p>

<p>Though there is absolutely no background music, and the sound effects are annoying at best - the game’s visuals are extremely well done. There really isn’t much to do on each screen you visit, but they are nice to look at.</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00019.png" alt="" /></p>

<p>Since there’s little to no dialogue in the game, plot progression occurs through cutscenes that happen between each game section. You’ll learn that the Earth is destroyed and you have to go to Bargon to put some program in their super computer.</p>

<p>If you do this you save (restore?) the planet - which ends up being your ultimate goal in the game. After a handful of unintuitive puzzles on Bargon you’ll find the computer, make your way up an elevator and put the disk in drive #3 (you do get a clue about this earlier at least).</p>

<p><img src="/images/adventure/bargon/scummvm-bargon-00024.png" alt="" /></p>

<p>Yay, the game is over! I’m not a fan of Coktel Vision games, and so far in this review series some of the lowest scores belong to their titles. Bargon Attack is the best of these games so far, but that’s not saying much.</p>

<p>The intro in the version I played was at least voice acted, so that was a nice touch as this game is mostly devoid of sound. There is no background music at any point throughout the game, and the annoying sound effects that you get occasionally don’t really improve the experience.</p>

<p>The game really isn’t fun, the story isn’t compelling and the experience is lackluster at best. I was hoping to find something interesting to support this review, but I couldn’t. If you happen to be a fan of this game though, check out the reviews at <a href="https://advgamer.blogspot.com/search/label/Bargon%20Attack">The Adventurers Guild</a> on the topic as they’re clearly meant for you ;)</p>

<h2 id="game-information">Game Information</h2>

<table>
  <tbody>
    <tr>
      <td><em>Game</em></td>
      <td>Bargon Attack</td>
    </tr>
    <tr>
      <td><em>Developer</em></td>
      <td><a href="https://en.wikipedia.org/wiki/Coktel_Vision">Coktel Vision</a></td>
    </tr>
    <tr>
      <td><em>Publisher</em></td>
      <td>Coktel Vision</td>
    </tr>
    <tr>
      <td><em>Release Date</em></td>
      <td>1992</td>
    </tr>
    <tr>
      <td><em>Systems</em></td>
      <td>DOS</td>
    </tr>
    <tr>
      <td><em>Game Engine</em></td>
      <td><a href="https://wiki.scummvm.org/index.php?title=Gob">Gob</a></td>
    </tr>
  </tbody>
</table>

<h3 id="my-playthrough">My Playthrough</h3>

<table>
  <tbody>
    <tr>
      <td><a href="https://howlongtobeat.com/game/16676"><em>How Long To Beat?</em></a></td>
      <td>3 hours</td>
    </tr>
    <tr>
      <td><em>Version Played</em></td>
      <td>DOS via <a href="https://www.scummvm.org/">ScummVM</a></td>
    </tr>
    <tr>
      <td><em>Notes</em></td>
      <td><a href="https://www.walkthroughking.com/text/bargonattack.aspx">Walkthrough</a>, <a href="https://amiga.abime.net/manual/0001-0100/42_manual0.pdf?v=85">Manual</a></td>
    </tr>
  </tbody>
</table>

<h3 id="score">Score</h3>

<p>See <a href="https://www.alexbevi.com/blog/2021/07/28/adventure-games-1980-1999/#scoring">here</a> for a refresher on how we’re scoring these games.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Atmosphere (20)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Story (25)</strong></td>
      <td>5</td>
    </tr>
    <tr>
      <td><strong>Experience (15)</strong></td>
      <td>4</td>
    </tr>
    <tr>
      <td><strong>Impact (10)</strong></td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td><strong>21%</strong></td>
    </tr>
  </tbody>
</table>

<h3 id="gallery">Gallery</h3>

<div id="inline-gallery-container" class="inline-gallery-container"></div>
<script type="module">import lightGallery from "https://cdn.skypack.dev/lightgallery@2.4.0";import lgZoom from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/zoom";import lgThumbnail from "https://cdn.skypack.dev/lightgallery@2.4.0/plugins/thumbnail";const $lgContainer = document.getElementById("inline-gallery-container");const inlineGallery = lightGallery($lgContainer, {  container: $lgContainer,  licenseKey: "C2D2C2BD-16BC4564-A4EAE653-401CB884",  dynamic: true,  hash: false,  closable: false,  showMaximizeIcon: true,  slideDelay: 10,  plugins: [lgZoom, lgThumbnail],  dynamicEl: [{ src: '/images/adventure/bargon/scummvm-bargon-00005.png', thumb: '/images/adventure/bargon/scummvm-bargon-00005.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00006.png', thumb: '/images/adventure/bargon/scummvm-bargon-00006.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00008.png', thumb: '/images/adventure/bargon/scummvm-bargon-00008.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00013.png', thumb: '/images/adventure/bargon/scummvm-bargon-00013.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00015.png', thumb: '/images/adventure/bargon/scummvm-bargon-00015.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00017.png', thumb: '/images/adventure/bargon/scummvm-bargon-00017.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00018.png', thumb: '/images/adventure/bargon/scummvm-bargon-00018.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00020.png', thumb: '/images/adventure/bargon/scummvm-bargon-00020.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00021.png', thumb: '/images/adventure/bargon/scummvm-bargon-00021.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00022.png', thumb: '/images/adventure/bargon/scummvm-bargon-00022.png' },{ src: '/images/adventure/bargon/scummvm-bargon-00023.png', thumb: '/images/adventure/bargon/scummvm-bargon-00023.png' },]});inlineGallery.openGallery();</script>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><small>Description from <a href="https://www.mobygames.com/game/13178/bargon-attack/">Moby Games</a></small> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Let&apos;s Adventure!" /><category term="adventure" /><category term="Coktel Vision" /><category term="Gob" /><summary type="html"><![CDATA[This review is part of the “Let’s Adventure!” series. See all reviewed games sorted by rating here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" /><media:content medium="image" url="https://www.alexbevi.com/images/adventure/bargon/scummvm-bargon-00000.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>