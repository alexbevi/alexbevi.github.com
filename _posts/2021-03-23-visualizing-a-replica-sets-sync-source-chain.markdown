---
layout: post
title: "Visualizing a Replica Set's Sync Source Chain"
date: 2021-03-23 10:47:41 -0400
comments: true
categories: [MongoDB]
tags: [mongodb, replication, scripting]
---


A MongoDB [replica set](https://docs.mongodb.com/manual/replication/) is a group of `mongod` processes that maintain the same data set. The [PRIMARY](https://docs.mongodb.com/manual/core/replica-set-primary/) node receives all write operations and The [SECONDARY](https://docs.mongodb.com/manual/core/replica-set-secondary/) nodes replicate the PRIMARY’s [oplog](https://docs.mongodb.com/manual/core/replica-set-oplog/) and apply the operations to their data sets such that the secondaries’ data sets reflect the primary’s data set.

Secondaries capture data from the primary member to maintain an up to date copy of the sets’ data unless [chained replication](https://docs.mongodb.com/manual/tutorial/manage-chained-replication/) is enabled, which changes the [replication source selection](https://docs.mongodb.com/manual/core/replica-set-sync/#replication-sync-source-selection) to allow a secondary member to replicate from another secondary member instead of from the primary.

To determine which node each SECONDARY is syncing from you have to manually review the entries generated by the [`rs.status()`](https://docs.mongodb.com/manual/reference/method/rs.status/) shell helper (or [`replSetGetStatus`](https://docs.mongodb.com/manual/reference/command/replSetGetStatus/#dbcmd.replSetGetStatus) command) and parse each node's [`syncSourceHost`](https://docs.mongodb.com/manual/reference/command/replSetGetStatus/#replSetGetStatus.members[n].syncSourceHost).

When evaluating larger clusters this approach can be cumbersome.

<!-- MORE -->

For example, using a 9 node cluster created using [mtools](https://github.com/rueckstiess/mtools) and [m](https://github.com/aheckmann/m) will produce the following:

```
# launch a 9 node replica set using MongoDB 4.4.4
m 4.4.4-ent
mlaunch init --replicaset --nodes 9 --binarypath $(m bin 4.4.4-ent)
```

```js
> rs.status()
{
    "set" : "replset",
    ...
    "members" : [
        {
            "_id" : 0.0,
            "name" : "localhost:27017",
            ...
            "syncSourceHost" : "",
            ....
        },
        {
            "_id" : 1.0,
            "name" : "localhost:27018",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 2.0,
            "name" : "localhost:27019",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 3.0,
            "name" : "localhost:27020",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 4.0,
            "name" : "localhost:27021",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 5.0,
            "name" : "localhost:27022",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 6.0,
            "name" : "localhost:27023",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 7.0,
            "name" : "localhost:27024",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        },
        {
            "_id" : 8.0,
            "name" : "localhost:27025",
            ...
            "syncSourceHost" : "localhost:27017",
            ...
        }
    ],
    ...
}
```

A much more legible version of the above is:

```js
> printSyncSourceTree(rs.status());
```
```
Replication Sync Source Tree
============================
-- [0] localhost:27017 (PRIMARY)
---- [1] localhost:27018 (SECONDARY)
---- [2] localhost:27019 (SECONDARY)
---- [3] localhost:27020 (SECONDARY)
---- [4] localhost:27021 (SECONDARY)
---- [5] localhost:27022 (SECONDARY)
---- [6] localhost:27023 (SECONDARY)
---- [7] localhost:27024 (SECONDARY)
---- [8] localhost:27025 (SECONDARY)
```

The tree above was generated using the `printSyncSourceTree()` helper function (source code at end of post) from the `mongo` shell.

When all nodes are syncing from the PRIMARY it's not difficult to visualize the sync source topology, however let's mix this up by manually [configuring a SECONDARY's sync target](https://docs.mongodb.com/manual/tutorial/configure-replica-set-secondary-sync-target/).

```js
function assignSyncSource(sourceId, syncTargetId) {
  var members = rs.status().members;
  var source = members.filter(obj => { return obj._id === sourceId })[0];
  var target = members.filter(obj => { return obj._id === syncTargetId })[0];
  var conn = new Mongo(source.name);
  var result = conn.adminCommand({ replSetSyncFrom: target.name });
  printjson(result)
}
assignSyncSource(3, 1)
assignSyncSource(2, 1)
assignSyncSource(5, 3)
assignSyncSource(4, 3)

printReplicationTree(rs.status())
```

The following output is our new replication sync source tree after fiddling with the sync source assignments:

```
Replication Sync Source Tree
============================
-- [0] localhost:27017 (PRIMARY)
---- [1] localhost:27018 (SECONDARY)
------ [2] localhost:27019 (SECONDARY)
------ [3] localhost:27020 (SECONDARY)
-------- [4] localhost:27021 (SECONDARY)
-------- [5] localhost:27022 (SECONDARY)
---- [6] localhost:27023 (SECONDARY)
---- [7] localhost:27024 (SECONDARY)
---- [8] localhost:27025 (SECONDARY)
```

Give this a shot and let me know what you think.

{% gist alexbevi/32dc56923b6d37643c622059b5feee31 %}

