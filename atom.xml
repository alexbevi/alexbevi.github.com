<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ALEX BEVILACQUA]]></title>
  <link href="http://alexbevi.com/atom.xml" rel="self"/>
  <link href="http://alexbevi.com/"/>
  <updated>2012-11-02T08:37:01-04:00</updated>
  <id>http://alexbevi.com/</id>
  <author>
    <name><![CDATA[Alex Bevilacqua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developer Braindump: Tony Tough and the Night of the Roasted Moths]]></title>
    <link href="http://alexbevi.com/blog/2012/11/02/developer-braindump-tony-tough-and-the-night-of-the-roasted-moths/"/>
    <updated>2012-11-02T08:28:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/11/02/developer-braindump-tony-tough-and-the-night-of-the-roasted-moths</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.scummvm.org">ScummVM</a> project recently added support for <a href="http://en.wikipedia.org/wiki/Tony_Tough_and_the_Night_of_Roasted_Moths">Tony Tough and the Night of the Roasted Moths</a>.</p>

<p>The original developer, <a href="https://github.com/rasky">Giovanni Bajo</a> appeared on the <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=scummvm-devel">scummvm-devel</a> mailing list and offered some insight into the development of the original engine.</p>

<p>The following is extracted from the <a href="http://sourceforge.net/mailarchive/message.php?msg_id=30015071">original post</a>.</p>

<!-- more -->




<blockquote><p>I went though the pull review code and of course lots of memories sprang to mind, so I&#8217;m happy to post a few things.</p><p>The game originated in 1996, I was 17 back at the time. Luca Giusti and I wrote the first version of the game engine, and it was based on DOS and 8-bit (palette) graphics, with the venerable Mode X for achieving smooth scrolling and higher resolution (320x240), and compiled sprites (!!!). IIRC Luca wrote the game engine and I wrote the MPAL preprocessor (yuk!), compiler, linker and interpreter. We were a distributed team of 5-6 people working across Italy, and we were using Fidonet and BBS files areas to share files. I live in Florence and one of the artist (Sergio) was in Naples; I still remember that we used a direct modem connection on the phone line (so basically he dialed my home phone number with his modem, to setup a 14.4 kbit connection) and then send me the first 4 room background arts through it; they were an early 8-bit version, but I was in love with them :) I also remember our lead artist (Valerio) sent me the first version of the park map (hand drawn wireframe) by fax; the original thermal paper is now a picture hanging on my home wall :)</p><p>At some point, in 1997, it became clear that we need to gather together to get to a decent point, so we organized a one-week crunch session in a alpine hut in northern italy; we worked 18-20hrs a day for a week, ate lots of pasta, and completed an early version of the first 4 rooms. I remember the game engine was using dirty-rectangles at that time to optimize drawing.</p><p>In 1998 we got a deal with a local publisher (Prograph/Protonic), and part of the team got paid to finish the game. That included myself, but Luca declined (for personal reasons); that meant that I was able to work on the game full-time, while Luca only in his spare time. The publisher insisted on reworking the game with 16-bit graphics, and porting it from DOS to Windows; it wasn&#8217;t trivial to port the existing code (Mode X stuff!), plus Luca couldn&#8217;t handle it in his spare time, so I had to take over the game engine. I wasn&#8217;t familiar with it at all (Luca had written it up until then), and thus decided to rewrite it from scratch. One of the few things that I brought over was the pathfinding code, and in fact I think it&#8217;s quite obvious from its look that it&#8217;s been written by a different hand.</p><p>The game engine is quite easy, as you have seen. I think it&#8217;s been the first real world C++ object-oriented program I have ever written, so it&#8217;s obviously very stretched towards using inheritance everywhere (new toy!). I still remember the joy of finally *understanding* polymorphism, and that&#8217;s when the RMTask base class was born, and the idea of having a list of RMTasks that could be anything by simply reimplementing the draw() call. I saw in the code that the list was called &#8220;OTList&#8221; and, while the name obviously rings a bell to me, I don&#8217;t recall what it means.  BTW, &#8220;RM&#8221; stands for Roasted Moths of course; some classes in the source code begins with &#8220;FP&#8221; instead; that&#8217;s &#8220;Falling Pumpkins&#8221; which was the original title of the game.</p><p>When I reimplemented the game, I went for full screen drawing, without dirty rectangles. I think i was positive that computers were fast enough for it, and in fact it did work quite well. I remember I quite optimized sprite drawing routines; for instance, most sprites are RLE-encoded as a way to quickly skip transparent pixels, and to avoid compiled sprites because there was simply too many sprites to compile them all without having memory issues. The game was running 60 fps on a Pentium 2, so that was good enough for us. The &#8217;30s (sepia) mode was a nice touch, but I remember it was noticeably slower at the time as it was an additional pass over the screen, so the framerate was dropping quite noticeably. </p><p>To build the rooms, setup background animations, decide rectangles of interactions with objects, etc. we built a so-called &#8220;location editor&#8221; (we actually used the word &#8220;location&#8221; for what is usually called &#8220;room&#8221; in adventures), whose source code I think has been lost. It was able to load a .loc file, modify it, and save it back. So both the game and the editor was using the same file format. At some point, we realized that it was better to separate the two formats, because the editor needed more information in basic format, while the game engine might use, for instance, sprites that were already rle-compressed instead of rle-compressing on the fly at load time; so the &#8220;lox&#8221; format was born. I think the game engine still opens the original loc files, but the final game assets only contains lox files.</p><p>One guy in the team (Marco) was one of those magic resources in game teams that is both an artist and a programmer; I think it&#8217;s mostly impossible nowadays, and used to be just rare at the time. So he was in charge of both maintaining the editor *and* drawing the background animations *and* using the editor to insert them into the locations. So that&#8217;s one hell of &#8220;eating multiple levels of dogfood&#8221; :) In fact, he was the one that prodded me to add support for &#8220;slot positions&#8221; to the game engine; with &#8220;slot positions&#8221;, we meant having an optional x,y offset associated to a graphic frame within a animation; I remember we discussed whether this was worth it, but at the end of the day, he was in a better position to know, since he was using the editor after all. Later in the game, it proved *extremely* useful in one specific animation: to animate the beast walking out of its cage. In fact, the game engine has no concept of actors (the only &#8220;actor&#8221; is Tony), so every other actor in the game is just an animated background object; in fact, they just don&#8217;t walk around. So, when the designer required the beast to walk out, Marco faked it through manually settings x,y offsets in the editor within the whole animation, making it scroll away. It took him a while of course, and won the title of &#8220;slot position master&#8221; for this achievement :) </p><p>Stuffing all files in a single compressed &#8220;resource&#8221; file was very common at the time. I don&#8217;t think there was a rationale for doing it, it was just the standard way of doing it. Lucas was doing it, so why shouldn&#8217;t we? :) I think it just looked cool, in a way. We were using LZO as a compressor because it was very fast at decompression; you might have noticed also that LZO is GPL, which means that the game was in blatant violation. I don&#8217;t think I have *knew* what free software was and what a free software license was. I don&#8217;t recall the details, but I wouldn&#8217;t be surprised if I simply altavista&#8217;d for &#8220;fast compression&#8221;, found that source code, downloaded it at 64 kbit/s, and dumped it into the game. I&#8217;m now deep into free software at many levels, I even give talks and do trainings about free software licenses from time to time, so I hope Markus of LZO can forgive the young me for not even realizing what I was doing.</p><p>Speeches gave me quite a few headaches. For a start, I realized that simply exporting all texts from MPAL to a txt/html file wasn&#8217;t enough, because actors need context to meaningfully act. So I ended up writing a program that exported HTML file divided by rooms, with some contexts added, and even manually adding comments to explain them. This has been helpful and was important to get good speeches from them. I remember it was really fun when the actors director called us and played us over the phone the first recordings of character voice tests made by the actors. I think we actually voted between a few options to decide which voice sounded best for Tony. When I got the first speeches files back from them, I had some latency issues, especially when running off CDs. I think I ended up caching the main index in RAM and maybe precaching something (don&#8217;t remember the details). I think I also changed the code so to delay display of subtitles to the moment I could effectively start playing the speech, because it was very unfriendly to first see the text on screen, and the hear the speech 1 second later.</p><p>MPAL was very very basic. I actually didn&#8217;t have a clue how to properly code a VM with bytecode and stuff, and I didn&#8217;t have *any* proper compiler theory training, so in retrospect it&#8217;s amazing I even managed to parse and compile files. So basically MPAL can only assign to variables (which are all globals, plus a weird namespace thingie for locality), call &#8220;custom functions&#8221; (aka C++ code stored in a pointer table) and do basic arithmetic. That&#8217;s it. Not even a proper language, isn&#8217;t it? :) No loop constructors, no ifs, no jumps, nothing. So MPAL was a collection of flat routines, each one associated to a specific verb (action), specific object (eg. door), under a specific condition (eg: when open, that is when global variable room1_door_open==1). Since you couldn&#8217;t have conditions *within* a MPAL routine but only to select *which* routine to run, you can see that cut & paste was a useful tool for scripters :)</p><p>In fact, we didn&#8217;t evolve MPAL much during the main game development. We basically went with what we had on the DOS version, and we were using the same compiler/linker binary for months/years like we had no source code for it. In fact, having written most of it in 1996 (2 yrs before), with zero experience on writing compilers, it was kind of &#8220;magical&#8221; in my eyes that it was somehow working, and I was almost scared to touch it, let alone refactoring. I remember that, near the end of development, the scripts hit some internal hard-coded limit of the compiler (say, too many total variables), and I was terrified to simply open the project in Visual Studio, bump that limit, and recompile everything. In retrospect, I think it was more of a psychological thing, since the compiler worked wonderfully for the whole development and did its job.</p><p>There were no actors in MPAL simply because the game didn&#8217;t really require them, so at some point we decided to simply avoid implementing it and tweak the storyboard accordingly. The game designer, Stefano, wasn&#8217;t very happy about it but we eventually found a deal and I simply added a way to run background tasks in MPAL (actually, through a custom verb &#8220;Idle&#8221;, so not to modify the compiler!), to let actors at least chat and animate in background, but without ever walking. In fact, the game engine had already been designed for multiple actors in mind (this is why you have the RMCharacter class separated from RMTony), but there was nothing in MPAL, and of course development time is limited. </p><p>Given my ignorance of &#8220;advanced&#8221; programming techniques, I think I simply couldn&#8217;t think of how one could execute a linear (blocking) piece of script code without recurring to multi-threading. So I think I didn&#8217;t even explore alternatives to multithreading. Obviously multithreading programming isn&#8217;t easy, so custom C++ functions, called from MPAL, were full of locking issues wrt to the main thread that redraws the screen. The game was developed under Windows 95 and in fact was released before Windows 2000 was out; on the NT kernel, the game didn&#8217;t work too well and crashed often because of race conditions. I see that you debugged and fixed at least few those bugs, well done! Those simply weren&#8217;t triggering on a 9x kernel. </p><p>Another issue with MPAL is that there&#8217;s no way to skip cutscenes; I don&#8217;t remember whether I couldn&#8217;t think of a good way of doing it, or whether all methods I devised would require too much workload on scripters that were already quite full. I think it&#8217;s my #1 technical regret when I see the game, and in fact I would quite love if you found a way to implement it now.</p><p>I think this ends my braindump of today. Feel free to ask questions of course.</p><p>Thanks again for your work!</p><footer><strong>Giovanni Bajo</strong> <cite>2012 October 25</cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Hot Corner Hover in Linux Mint 13]]></title>
    <link href="http://alexbevi.com/blog/2012/11/02/disable-hot-corner-hover-in-linux-mint-13/"/>
    <updated>2012-11-02T08:01:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/11/02/disable-hot-corner-hover-in-linux-mint-13</id>
    <content type="html"><![CDATA[<p>I use <a href="http://www.synergy-foss.org">Synergy</a> on all my computers to share a common mouse and keyboard, but I&#8217;ve found that with Gnome 3 based distributions, the hot corner was causing me some grief.</p>

<p>The beauty of using a Linux-based system though is that you can pretty much change anything you&#8217;re unhappy with, so that&#8217;s what I&#8217;m here to do.</p>

<!-- more -->


<p>By default, <a href="http://linuxmint.com">Linux Mint</a> uses the <a href="http://cinnamon.linuxmint.com">Cinnamon</a> desktop, so the configuration file we&#8217;re looking for is at <code>/usr/share/cinammon/js/ui/layout.js</code>.</p>

<p>For Linux Mint 12, which still used <a href="https://live.gnome.org/GnomeShell">Gnome Shell</a>, the file was at <code>/usr/share/gnome-shell/js/ui/layout.js</code>.</p>

<p>Edit the appropriate file</p>

<pre><code>$ sudo nano /usr/share/cinammon/js/ui/layout.js
</code></pre>

<p>Locate the following section (I just searched for <em>hot-corner</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_corner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clutter</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hot-corner&#39;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">width</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">reactive</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And change the value of <code>reactive</code> from <em>true</em> to <em>false</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_corner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clutter</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hot-corner&#39;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">width</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">reactive</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Log off, then back on. Booya!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Broken Sudo]]></title>
    <link href="http://alexbevi.com/blog/2012/10/30/fixing-broken-sudo/"/>
    <updated>2012-10-30T14:58:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/10/30/fixing-broken-sudo</id>
    <content type="html"><![CDATA[<p>This is pretty much a transcription of <a href="http://www.psychocats.net/ubuntu/fixsudo">http://www.psychocats.net/ubuntu/fixsudo</a>, which is just such a good article I wanted to keep a copy for reference.</p>

<h2>How does <em>sudo</em> work?</h2>

<p>The way that Ubuntu has implemented <em>sudo</em>, the <code>/etc/sudoers</code> file says that users in the admin group can (after a password authentication) temporarily escalate to system-wide privileges for particular tasks. And then the <code>/etc/groups</code> file says which users are in the admin group.</p>

<p>You can read more on <a href="https://help.ubuntu.com/community/RootSudo">the community documentation</a> about Ubuntu&#8217;s implementation of <em>sudo</em>.</p>

<!-- more -->


<h2>Cause and Symptoms</h2>

<p><em>sudo</em> breaks when one or more of the following occurs:</p>

<ul>
<li>the <code>/etc/sudoers</code> file has been altered to no longer allow users in the admin group to escalate privilege</li>
<li>the permissions on the <code>/etc/sudoers</code> file are changed to something other than 0440</li>
<li>a user who should not have been has been taken out of the <em>admin</em> group</li>
</ul>


<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise01.jpg"></p>

<p>If <em>sudo</em> is broken this way, you may notice an error saying you&#8217;re not in the _sudo_ers file and the incident is going to be reported. Or you may just see the next command prompt without any action being executed.</p>

<h2>Booting into recovery mode</h2>

<p>Since fixing <em>sudo</em> involves editing system files, and you would otherwise need <em>sudo</em> to do so, you&#8217;ll have to boot into recovery mode to gain root (system-wide) access in order to repair <em>sudo</em>.</p>

<p>If you have a single-boot (Ubuntu is the only operating system on your computer), to get the boot menu to show, you have to hold down the Shift key during bootup.</p>

<p>If you have a dual-boot (Ubuntu is installed next to Windows, another Linux operating system, or Mac OS X; and you choose at boot time which operating system to boot into), the boot menu should appear without the need to hold down the <em>Shift</em> key.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise02.jpg"></p>

<p>From the boot menu, select <em>recovery mode</em>, which is usually the second boot option.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise03.jpg"></p>

<p>After you select recovery mode and wait for all the boot-up processes to finish, you&#8217;ll be presented with a few options. In this case, you want the <em>Drop to root shell</em> prompt option so press the Down arrow to get to that option, and then press Enter to select it.</p>

<p>The root account is the ultimate administrator and can do anything to the Ubuntu installation (including erase it), so please be careful with what commands you enter in the root terminal.</p>

<p>In recent versions of Ubuntu, the filesystem is mounted as read-only, so you need to enter the follow command to get it to remount as read-write, which will allow you to make changes:</p>

<pre><code>mount -o rw,remount /
</code></pre>

<h2>Do the actual repair</h2>

<h3>Case 1</h3>

<p>If you&#8217;d removed your last <em>admin</em> user from the <em>admin</em> group, then type</p>

<pre><code>adduser username admin
</code></pre>

<p>where <em>username</em> is your actual username.</p>

<h3>Case 2</h3>

<p>If you had previously edited the /etc/_sudo_ers file and screwed it up, then type</p>

<pre><code>sudo cp /etc/sudoers /etc/sudoers.backup
sudo nano /etc/sudoers
</code></pre>

<p>(the proper command is actually <code>sudo visudo</code>, which checks syntax before you save the <code>/etc/sudoers</code> file, but in some older versions of Ubuntu, that command uses the vi editor, which can be confusing to new users, as opposed to nano, which is more straightforward)
and make it sure it looks like this:</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults  env_reset
Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root  ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:

#includedir /etc/sudoers.d
</code></pre>

<p>When you&#8217;re done making changes, press <em>Control-X, Y, Enter</em>.</p>

<h3>Case 3</h3>

<p>If you are trying to fix the error where it says <em>sudo</em> is mode _____, should be 0440, then you&#8217;ll want to type</p>

<pre><code>chmod 0440 /etc/sudoers
</code></pre>

<p>When you&#8217;re done with whatever commands you needed to enter, type</p>

<pre><code>exit
</code></pre>

<p>This will bring you back to the recovery menu.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise04.jpg">
<img class="center" src="http://alexbevi.com/images/fixsudoprecise05.jpg"></p>

<p>Choose to resume a normal boot. Then you should be able to <em>sudo</em> again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Latest MongoDB in Ubuntu]]></title>
    <link href="http://alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu/"/>
    <updated>2012-08-29T13:46:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu</id>
    <content type="html"><![CDATA[<p>A couple projects I work on use <a href="http://www.mongodb.org/">MongoDB</a> as the database, and I&#8217;m generally not satisfied to use the (often outdated) version that ships with Ubuntu.</p>

<p>As a result, I wrote this script to automate fetching, extracting and linking the latest version.</p>

<!-- more -->


<p>To configure the script, just replace the <code>PKG</code> information with whatever value is most relevant for your configuration at <a href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a>.</p>

<div><script src='https://gist.github.com/3516100.js?file='></script>
<noscript><pre><code>#!/bin/bash

PKG=mongodb-linux-x86_64-2.2.0
URL=http://fastdl.mongodb.org/linux

if [ -f /etc/init.d/mongod ]
then
  echo &quot;mongod already installed ... stopping&quot;
  sudo service mongod stop
else
  echo &quot;installing mongod script&quot;
  wget https://raw.github.com/gist/3516078/713ad981715236473999f30636bca2ee3dcc5f24/mongod
  sudo mv mongod /etc/init.d/mongod
  sudo chmod +x /etc/init.d/mongod
  echo &quot;creating mongodb user&quot;
  sudo useradd mongodb
  echo &quot;creating directories&quot;
  sudo mkdir -p /var/lib/mongodb
  sudo mkdir -p /var/log/mongodb
  sudo chown mongodb.mongodb /var/lib/mongodb
  sudo chown mongodb.mongodb /var/log/mongodb
  sudo update-rc.d mongod defaults
fi

wget $URL/$PKG.tgz
sudo tar -xvzf $PKG.tgz -C /usr/local/

if [ -d /usr/local/mongodb ]
then
  echo &quot;removing existing mongodb symlink&quot;
  sudo rm -rf /usr/local/mongodb
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
else
  echo &quot;creating symlinks&quot;
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
  sudo ln -s /usr/local/mongodb/bin/bsondump /usr/local/bin/bsondump
  sudo ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
  sudo ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod
  sudo ln -s /usr/local/mongodb/bin/mongodump /usr/local/bin/mongodump
  sudo ln -s /usr/local/mongodb/bin/mongoexport /usr/local/bin/mongoexport
  sudo ln -s /usr/local/mongodb/bin/mongofiles /usr/local/bin/mongofiles
  sudo ln -s /usr/local/mongodb/bin/mongoimport /usr/local/bin/mongoimport
  sudo ln -s /usr/local/mongodb/bin/mongorestore /usr/local/bin/mongorestore
  sudo ln -s /usr/local/mongodb/bin/mongos /usr/local/bin/mongos
  sudo ln -s /usr/local/mongodb/bin/mongosniff /usr/local/bin/mongosniff
  sudo ln -s /usr/local/mongodb/bin/mongostat /usr/local/bin/mongostat
fi

echo &quot;cleaning up&quot;
rm $PKG.tgz

echo &quot;starting mongod service&quot;
sudo service mongod start</code></pre></noscript></div>


<p>Note that this script pulls <code>mongod</code> from a gist which I created. This script is originally from <a href="https://github.com/ijonas">Ijonas Kisselbach</a>&#8217;s <a href="https://raw.github.com/ijonas/dotfiles/master/etc/init.d/mongod">dotfiles</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Pry Breakpoints out of Git]]></title>
    <link href="http://alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git/"/>
    <updated>2012-08-23T07:57:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git</id>
    <content type="html"><![CDATA[<p>My Ruby workflow as of late has almost always contained <a href="http://www.git-scm.com">Git</a> for version control, and <a href="http://pryrepl.org/">Pry</a> for debugging.</p>

<p>Although it&#8217;s extremely convenient during development to add a quick breakpoint using <code>binding.pry</code>, it can be a bit frustrating to clients if you accidentally deploy with these breakpoints still intact.</p>

<!-- more -->


<p>After hunting around for a bit, I decided to write a pre-commit <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">hook</a> that would check the files I was about to check in to ensure that I didn&#8217;t accidentally still have breakpoints enabled.</p>

<div><script src='https://gist.github.com/3436040.js?file='></script>
<noscript><pre><code># Git pre-commit hook
#
# Check all Ruby (*.rb) files for Pry breakpoint references
#
# Based on http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/
#
# Intallation:
#       ln -s /path/to/pre-commit.sh /path/to/project/.git/hooks/pre-commit
#
FORBIDDEN='binding.pry'
git diff --cached --name-only | \
    find -name '*.rb' | \
    GREP_COLOR='4;5;37;41' xargs grep --color --with-filename -n $FORBIDDEN &amp;&amp; \
    echo 'COMMIT REJECTED Found &quot;$FORBIDDEN&quot; references. Please remove them before commiting' &amp;&amp; \
    exit 1</code></pre></noscript></div>


<p>This file just needs to be saved to <code>/path/to/source/.git/hooks/pre-commit</code> and made exectuable.</p>

<p>If you happen to leave a breakpoint intact, the next time you try to commit your changes, the commit will fail and indicate where these breakpoints are, and what files need to be updated to allow the commit to succeed.</p>

<p><img src="http://alexbevi.com/images/2012-08-23-ss.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04 Desktop WITHOUT Unity]]></title>
    <link href="http://alexbevi.com/blog/2012/08/10/ubuntu-12-dot-04-desktop-without-unity/"/>
    <updated>2012-08-10T08:03:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/10/ubuntu-12-dot-04-desktop-without-unity</id>
    <content type="html"><![CDATA[<p>As much as I enjoy Ubuntu, I haven&#8217;t warmed to their Unity desktop. I personally find it&#8217;s too similar to OS X, I don&#8217;t really like the launcher with larger icons, the global menu, the shifted window control buttons, notification area changes .. etc.</p>

<p>Since it&#8217;s based on GTK3, I know you can modify this all, but I&#8217;d rather just use a desktop environment that doesn&#8217;t require that level of tweaking.</p>

<p>Enter Cinnamon. Cinnamon is developed by the Linux Mint team, which has a distribution based on Ubuntu.</p>

<p>Over at the <a href="http://www.linuxbsdos.com/2012/04/26/install-the-latest-and-greatest-cinnamon-desktop-on-ubuntu-12-04/">LinuxBSDOS</a> blog, there was an article on how to get Cinnamon installed in the latest Ubuntu.</p>

<p>I found that after doing this, I ended up with no sound. To fix this, <a href="http://askubuntu.com/questions/135778/no-sound-on-ubuntu-12-04/153470#153470">AskUbuntu</a> has an article that I found useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shoutcast Streaming from the Command Line]]></title>
    <link href="http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line/"/>
    <updated>2012-07-18T08:20:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I spend a lot of time working in a terminal, and I like to spend that time listening to music. Since I work primarly in Linux, I was hoping there would be an easy way to merge these two activities &#8230; and it turns out there was :)</p>

<!-- more -->


<p>After searching around, i found a <a href="http://crunchbanglinux.org/forums/post/150587/#p150587">post on the crunchbang forums</a> that provided exactly the script I was looking for.</p>

<p>I modified it a tiny bit to check for dependencies:</p>

<figure class='code'><figcaption><span>Linux Shoutcast Search and Streaming - shoutcast.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># search shoutcast and send url to radiotray or another player</span>
</span><span class='line'><span class="c"># needs Bash 4, curl, [radiotray], [xsel to send url to X selection for pasting]</span>
</span><span class='line'><span class="c"># (comment out line 53 &quot;printf &#39;%s&#39;...&quot; if you don&#39;t use xsel)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">command</span> -v curl &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;curl required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'><span class="nb">command</span> -v xsel &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;xsel required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'><span class="nb">command</span> -v radiotray &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;radiotray required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># choose player (&amp; options if necessary): radio url will be sent to it.</span>
</span><span class='line'>radioplay<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    radiotray <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="c">#    mplayer -playlist &quot;$1&quot; # replace &#39;mplayer -playlist&#39; to taste, $1 will hold the url</span>
</span><span class='line'><span class="c">#    exec mplayer -playlist &quot;$1&quot; # add &#39;exec&#39; if you&#39;d rather launch player and leave script</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start up radiotray in background if it&#39;s not already running</span>
</span><span class='line'><span class="c"># Comment out this line if you don&#39;t use radiotray.</span>
</span><span class='line'>pgrep radiotray &gt;/dev/null <span class="o">||</span> <span class="o">(</span> radiotray &gt;/dev/null 2&gt;&amp;1 &amp; <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">##########################################################################</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Please enter keyword(s)&quot;</span>
</span><span class='line'><span class="nb">read </span>keyword
</span><span class='line'><span class="nv">keyword</span><span class="o">=</span><span class="s2">&quot;${keyword// /%20}&quot;</span> <span class="c"># escape spaces for url</span>
</span><span class='line'><span class="nv">results</span><span class="o">=</span><span class="k">$(</span> curl -s <span class="s2">&quot;http://www.shoutcast.com/Internet-Radio/$keyword&quot;</span> |awk <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">BEGIN {</span>
</span><span class='line'><span class="s1">    RS=&quot;&lt;div class=\&quot;dirlist\&quot;&gt;&quot;</span>
</span><span class='line'><span class="s1">    FS=&quot;&gt;&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">NR &lt; 2 {next}</span>
</span><span class='line'><span class="s1">{url = name = $2</span>
</span><span class='line'><span class="s1">sub(/^.*title=\&quot;/,&quot;&quot;,name)</span>
</span><span class='line'><span class="s1">sub(/\&quot;.*$/,&quot;&quot;,name)</span>
</span><span class='line'><span class="s1">sub(/^.*href=\&quot;/,&quot;&quot;,url)</span>
</span><span class='line'><span class="s1">sub(/\&quot;.*$/,&quot;&quot;,url)</span>
</span><span class='line'><span class="s1">print url,name }</span>
</span><span class='line'><span class="s1">&#39;</span> <span class="k">)</span>
</span><span class='line'><span class="o">[[</span> <span class="nv">$results</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;Sorry, no results for $keyword&quot;</span>; <span class="k">continue</span>;<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">unset </span>list
</span><span class='line'><span class="nb">declare</span> -A list <span class="c"># make associative array</span>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>url name <span class="c"># read in awk&#39;s output</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>list<span class="o">[</span><span class="s2">&quot;$name&quot;</span><span class="o">]=</span><span class="s2">&quot;$url&quot;</span>
</span><span class='line'><span class="k">done</span> &lt;&lt;&lt; <span class="s2">&quot;$results&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PS3</span><span class="o">=</span><span class="s1">&#39;Please enter the number of your choice &gt; &#39;</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    select </span>station in <span class="s2">&quot;${!list[@]}&quot;</span> <span class="s1">&#39;Search Again&#39;</span> Quit
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">=</span> <span class="s1">&#39;Search Again&#39;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">break </span>2
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">=</span> Quit <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s1">&#39;Goodbye...&#39;</span>; <span class="nb">exit</span>; <span class="o">}</span>
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="s1">&#39;%s&#39;</span> <span class="s2">&quot;${list[$station]}&quot;</span> | xsel --input <span class="c">#--clipboard  # can paste url</span>
</span><span class='line'>        radioplay <span class="s2">&quot;${list[$station]}&quot;</span>
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">Last station chosen was $station ( ${list[$station]} )</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">done</span> <span class="c"># closes loop started at line 18</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here we go again ...]]></title>
    <link href="http://alexbevi.com/blog/2012/07/18/here-we-go-again-dot-dot-dot/"/>
    <updated>2012-07-18T07:53:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/07/18/here-we-go-again-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>So, another year, another blogging engine, another crack at blogging.</p>

<p>This time around I&#8217;m trying out <a href="http://octopress.org">Octopress</a>. There&#8217;s something very appealing about being able to interact with this blog via rake tasks and <a href="http://git-scm.com">Git</a>.</p>

<!-- more -->


<p>This page was generated using <code>rake new_post["Here we go again ..."]</code></p>

<p>Octopress is essentially <a href="https://github.com/mojombo/jekyll/">Jekyll</a>, which means it can be deployed very easily to either <a href="https://github.com">Github</a> or <a href="http://www.heroku.com">Heroku</a>.</p>

<p>Why all the links you may ask? Because I can write posts using <a href="http://daringfireball.net/projects/markdown">Markdown</a>, and I sometimes mix up the syntax between Markdown and <a href="http://www.textism.com/tools/textile/">Textile</a>, so I&#8217;m just trying to hammer it into my brain ;)</p>
]]></content>
  </entry>
  
</feed>
