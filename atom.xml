<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ALEX BEVILACQUA]]></title>
  <link href="http://alexbevi.com/atom.xml" rel="self"/>
  <link href="http://alexbevi.com/"/>
  <updated>2013-07-09T09:35:48-04:00</updated>
  <id>http://alexbevi.com/</id>
  <author>
    <name><![CDATA[Alex Bevilacqua]]></name>
    <email><![CDATA[alexbevi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developer Braindump: Warcraft]]></title>
    <link href="http://alexbevi.com/blog/2013/03/26/developer-braindump-warcraft/"/>
    <updated>2013-03-26T12:50:00-04:00</updated>
    <id>http://alexbevi.com/blog/2013/03/26/developer-braindump-warcraft</id>
    <content type="html"><![CDATA[<p>In an effort to centralize some articles about how some classic games were devloped, I&rsquo;ve collected the <a href="http://www.codeofhonor.com/blog/?s=%22The+making+of+Warcraft%22">various parts</a> of <a href="http://www.codeofhonor.com/blog/">Patrick Wyatt&rsquo;s blog</a> series about the intital development of <a href="http://en.wikipedia.org/wiki/Warcraft">Warcraft</a>.</p>

<p>Please note that this version of the series is just meant to capture the content, and not all formatting changes have been captured.</p>

<p>Please see the original posts for the full experience ;)</p>

<!-- more -->




<hr>


<p>Back before the dawn of time, which is to say when PC games were written for the DOS operating system, I got to work on a game called Warcraft.</p>

<h2>I get to lead a project!</h2>

<p>While I had developed several PC games, a couple of Mac games, and seven console titles for the Super Nintendo and Sega Genesis, I was either in a junior role on those projects, or the projects were game “ports” rather than original development work. A game “port” is the process of moving a game from one platform, like the Amiga, and converting the code, design, artwork and other game assets to make them work on another, like the Nintendo.</p>

<p>My role encompassed two jobs: leading the development team as Producer — a game industry term for project manager, designer, evangelist, and cat herder — and writing the majority of the game code as Lead Programmer. This was perhaps less daunting then, when a game project might employ ten or twenty developers, than it is now, with development teams tipping the scales at two-hundred or more developers.</p>

<h2>The source of Warcraft</h2>

<p>The developers at the startup company I worked for — then named Silicon &amp; Synapse but later renamed Blizzard in a nod towards our tempestuous development methodology — played a great many games during our free time. And from that game-playing came the spark to create Warcraft.</p>

<p>We were inspired to create Warcraft after playing (and replaying and replaying) a game called Dune 2, by Westwood Studios. Dune 2 was arguably the first modern real-time strategy (RTS) game; with a scrolling world map, real-time unit construction and movement, and individual unit combat. It isn’t that much different in design than a modern RTS like Starcraft 2, excepting perhaps a certain scale and graphics quality.</p>

<p>Its predecessor, Dune 1 — a very worthy game itself — shared some of the same elements, but its semi-real-time unit combat was wrapped inside an adventure game. Dune 2 stripped its predecessors’ idea of the player representing a character inside the game-world and focused exclusively on the modern RTS mechanics: harvesting resources, building a base, harvesting more resources, building an army, and finally, finding and conquering the enemy.</p>

<p>Along with the other folks at Blizzard I exhaustively played Dune 2 during lunch breaks and after work, playing each of the three competing races to determine their strengths and weaknesses; and afterward comparing play-styles, strategies and tactics with others in the office.</p>

<p>While the game was great fun, it suffered from several obvious defects that called out (nay, screamed) to be fixed. Most notably, the only way that my friends and I could play the game was against the computer. It was obvious that this gaming style would be ideal as a multiplayer game. Unlike turn-based games, where each player must wait for all opponents to issue unit movement orders, a real-time game would enable all players to give orders simultaneously, placing a premium on rapid, decisive tactical movements over long, drawn-out strategic planning.</p>

<p>And with that singular goal in mind, development of the game began without any serious effort to plan the game design, evaluate the technical requirements, build the schedule, or budget for the required staff. Not even on a napkin. Back at Blizzard we called this the “business plan du jour”, which was or standard operating methodology.</p>

<h2>Initial development</h2>

<p>As the sole developer on the project, and lacking an art team during the initial phase, I screen-captured the artwork of Dune 2 to use until such time as my forward progress warranted an artist or two. The artists were tied up working on any number of other pressing deadlines and didn’t need distractions at this point — we were always pressed for time.</p>

<p>My early programming efforts developing the game engine included creating a tile-based scrolling map renderer, a sprite renderer to draw game units and other bitmaps, a sprite-sequencing engine to animate game units, an event-dispatcher to post mouse and keyboard events, a game-dispatcher to control unit-behavior, and a great deal of user-interface code to control application behavior. With this subset of the project completed in the first few weeks it became possible to “play” a solo game, though I didn’t implement unit-construction until sometime later; early play required using typed commands to spawn units on screen.</p>

<p>Each day I’d build upon the previous efforts in organic fashion. Without schedule milestones or an external driver for the project, I was in the enviable position of choosing which features to build next, which made me incredibly motivated. I already enjoyed game development, and getting to do this green-field programming was like a drug. Even now, some 22 years after getting into the game industry, I still love the creative aspects of programming.</p>

<h2>The first unique feature: multi-unit selection</h2>

<p>One feature of which I was particularly proud was unit-selection. Unlike Dune 2, which only allowed the user to select a single unit at a time, and which necessitated frenzied mouse-clicking to initiate joint-unit tactical combat, it was obvious that enabling players to select more than one unit would speed task-force deployment and dramatically improve game combat.</p>

<p>Before I started in the game industry I had worked extensively with several low-end “Computer Assisted Design” (CAD) programs like MacDraw and MacDraft to design wine-cellars for my dad’s wine cellar business, so it seemed natural to use the “click &amp; drag” rectangle-selection metaphor to round up a group of units to command.</p>

<p>I believe that Warcraft was the first game to use this user-interface metaphor. When I first implemented the feature it was possible to select and control large numbers of units at a time; there was no upper limit on the number of units that could be selected.</p>

<p>While selecting and controlling one hundred units at a time demonstrated terrible weaknesses in the simple path-finding algorithm I had implemented, after I got the basic algorithms working I nevertheless spent hours selecting units and dispatching game units to destinations around the map instead of writing more code; it was the coolest feature I had ever created in my programming career up to that time!</p>

<p>Later in the development process, and after many design arguments between team-members, we decided to allow players to select only four units at a time based on the idea that users would be required to pay attention to their tactical deployments rather than simply gathering a mob and sending them into the fray all at once. We later increased this number to nine in Warcraft II. Command and Conquer, the spiritual successor to Dune 2, didn’t have any upper bound on the number of units that could be selected. It’s worth another article to talk about the design ramifications, for sure.</p>

<p>Apart from the ability to control multiple units at one time, at this phase Warcraft resembled nothing so much as a stripped-down version of Dune 2, so much so that I defensively joked that, while Warcraft was certainly inspired by Dune 2, the game was radically different — our radar minimap was in the upper-left corner of the screen, whereas theirs was in the lower-right corner.</p>

<h2>The formation of the fellowship</h2>

<p>By early 1994, I had made enough progress to warrant additional help on the project. I was joined by Ron Millar, Sam Didier, Stu Rose, Bob Fitch, Jesse McReynolds, Mike Morhaime, Mickey Nielsen, and others. Many of these folks started work on the game after our company was acquired by Davidson &amp; Associates in February 1994.</p>

<p>Ron Millar, who, with his long blond hair and strong build, was obviously the progeny of Viking warriors. He was originally hired on as an artist based on his skill in creating artwork for Gameboy titles at Virgin Games, but his amazing creativity and design sensibilities led to his taking on a design role in many Blizzard projects, and he stepped into a similar role for Warcraft.</p>

<p>Sam Didier, a strong, stocky and stalwart character who resembled nothing so much as a bear scaled down to human proportions, and whose heroic characters and epic drawings are now the definitive art style for Blizzard games, had honed his computer drawing skills on sixteen-bit console titles, but his penchant for drawing fantasy artwork during meetings and at any other spare moment demonstrated his capability to lead the art direction for this new title.</p>

<p>Stu Rose — whose background as an illustrator led to his design of the Blizzard logo still used today — initially contributed to the background tile-map artwork, but he would later take on a critical role in the ultimate design of Warcraft. Stu is quite memorable as a voice actor in the role of Human Peon Peasant, where his rendition of a downtrodden brute-laborer was comedic genius.</p>

<p>Bob Fitch had started work as a programmer and project lead on another title at the same time I started development of Warcraft. Allen Adham, the president of Blizzard, had assigned Bob the task of building a word game called “Games People Play” that would include crossword, scramble, boggle, and other similar diversions. Bob’s notable lack of enthusiasm for the project resulted in his making little progress on the title for many months; with Warcraft showing well Bob was released to assist me, and his enthusiasm for the game helped move the project forward more rapidly.</p>

<p>Jesse, a Caltech graduate, started work on building a network driver for the IPX network protocol so the game could be played on a Local Area Network (LAN). Mike Morhaime, one of the two co-founders of Blizzard, later took on the significantly more difficult task of writing a “mixed-mode” modem driver. While Warcraft was a DOS “Protected Mode” game, the modem driver could be called from both Protected Mode and Real Mode due to quirks in the DOS operating system and the 80386 chip-architecture it ran on, so he could regularly be found in his office staring at screens full of diagnostic numbers as he worked through the complicated timing issues related to re-entrant code. At the end of the day, the modem code was rock-solid, quite an achievement given the primitive toolset we had at the time.</p>

<h2>Warcraft art</h2>

<p>Allen Adham hoped to obtain a license to the Warhammer universe to try to increase sales by brand recognition. Warhammer was a huge inspiration for the art-style of Warcraft, but a combination of factors, including a lack of traction on business terms and a fervent desire on the part of virtually everyone else on the development team (myself included) to control our own universe nixed any potential for a deal. We had already had terrible experiences working with DC Comics on “Death and Return of Superman” and “Justice League Task Force”, and wanted no similar issues for our new game.</p>

<p>It’s surprising now to think what might have happened had Blizzard not controlled the intellectual property rights for the Warcraft universe — it’s highly unlikely Blizzard would be such a dominant player in the game industry today.</p>

<p>Years after the launch of Warcraft my dad, upon returning from a trip to Asia, gave me a present of a set of Warhammer miniatures in the form of a skeleton charioteer and horses with the comment: “I found these cool toys on my trip and they reminded me a lot of your game; you might want to have your legal department contact them because I think they’re ripping you off.” Hmmm!</p>

<h2>Blockers to game development</h2>

<p>One interesting facet of the early development process was that, while I was building a game that would be playable using modems or a local area network, the company had no office LAN. Because we developed console titles, which would easily fit on a floppy disk, it wasn’t something that was necessary, though it would certainly have simplified making backups.</p>

<p>So when I started collaborating with other artists and programmers, we used the “sneaker network”, carrying floppy disks back and forth between offices to integrate source code revisions and artwork.</p>

<p>Bob Fitch was the second programmer on the project, and he and I would regularly copy files and code-changes back and forth. Periodically we’d make integration mistakes and a bug we fixed would re-appear. We’d track it down and discover that — during file-copying while integrating changes — we had accidentally overwritten the bug fix, and we’d have to remember how we had fixed it previously.</p>

<p>This happened more than a few times because of the rapidity with which we developed code and our lack of any processes to handle code-integration other than “remembering” which files we had worked on. I was somewhat luckier in this regard in that my computer was the “master” system upon which we performed all the integrations, so my changes were less likely to get lost. These days we use source-control to avoid such stupidities, but back then we didn’t even know what it was!</p>

<p>With more programmers, designers and artists working on the title progress increased substantially, but we also discovered a big blocker to our progress. The game was initially developed in DOS “Real Mode”, which meant that only 640K of memory was available, less about 120K for the operating system. Can you believe how crap computers were back then!?!</p>

<p>As the art team started creating game units, backgrounds and user-interface artwork, we rapidly burned through all of the memory and started looking for alternatives. A first attempt at a solution was to use EMS “paged memory” mapping and store art resources “above” the 640K memory barrier.</p>

<p>Stories programmers tell about EMS memory are like those that old folks tell about walking uphill to school, barefoot, in the snow, both ways, except that EMS stories are even more horrible, and actually true.</p>

<p>In any event the EMS solution quite fortunately didn’t work; it turned out there was a better solution. A company called Watcom released a C compiler which included a DOS-mode “extender” that allowed programs to be written in “Protected Mode” with access to linear 32-bit memory, something every programmer takes for granted today when they write 32-bit (or even 64-bit applications). While it required a couple of days to update the source code, the DOS-mode extender worked perfectly, and we were back in business, now with access to substantially more memory.</p>

<h2>Initial proposal</h2>

<p>Blizzard was working on at least four other games when I started on the Warcraft project, and as the company numbered only 20 everyone was mega-busy keeping those projects on track. It wasn’t uncommon for artists, programmers and designers to be working on two or sometimes three projects at a time, and of course our sole musician/sound-engineer, Glenn Stafford, worked on everything.</p>

<p>But we regularly found time to meet in large groups to brainstorm and discuss company strategy, so much that we called our efforts the “business plan du jour“.</p>

<p>I already discussed our motivation to create a Real Time Strategy (RTS) game modeled after Dune II in a previous article, but one other key idea propelled us forward.</p>

<p>The other impetus for the game started with a proposal that Allen Adham — president and company co-founder — made during one of our brainstorming sessions. He wanted to build a series of war games that would be released in near identical white boxes under the banner “Warcraft”, with subheadings announcing the historical context for each game: The Roman Empire, The Vietnam War, and so forth.</p>

<p>The goal with the identical boxes was to control a large section of shelf-space that would be easy for players to spot in a crowded retail environment, similar to the Gold Box series of Dungeons &amp; Dragons games from SSI, which enjoyed great success during the late 1980′s. New players would be drawn to the section of games by its dominating shelf-presence, and veteran players who enjoyed one game they would know where to find the next. I know; retail: so archaic compared to app stores and Amazon, right?!?</p>

<p>Ron Millar and Sam Didier, two of the early artists to work at the company, weren’t excited about the idea of working on historical simulations, they enjoyed fantasy games like Warhammer and Dungeons &amp; Dragons. One glance at Sam’s artwork is enough to demonstrate his passion for the fantasy milieu. So at a later meeting they proposed the idea that the first game should be set in a high-fantasy world of Orcs and humans, where they’d have more opportunity to create innovative game artwork instead of being required to conform to the tenets of historical accuracy. The idea took hold, with the first game in the series becoming Warcraft: Orcs and Humans.</p>

<h2>Initial game design</h2>

<p>Many people believe that a game designer is solely responsible for all idea conception and actually “creates the game design”, and this may be true for some development teams. Designers do need to be highly creative and bring to life many of the elements of the game personally.</p>

<p>But equally important is for designers to be receptive to the ideas of others: without some involvement in the game’s design the rest of the team has less motivation to do their best work. And beyond that, it’s never possible to know where the next great design idea is going to come from. It’s critical for designers to listen so that the best ideas of others aren’t stifled.</p>

<p>Our informal design process during the early period of Warcraft’s development worked effectively in that regard. Many brainstorming sessions occurred during hallway meetings, lunches, smoke-breaks, and after late evenings of game playing. Everyone in the company contributed their thoughts. With little formal process and no single design document, the game design evolved with each passing month.</p>

<p>Ron, who had started his career in the game industry as an artist, was at that time our go-to guy for design on Blizzard games. Though he was finishing up the development of Blackthorne, a side-scrolling shooter for Super Nintendo, he devoted time to generating ideas for the game.</p>

<p>Stu Rose was another artist who became one of Blizzard’s early staffers. From a personality standpoint he was the polar opposite of Ron in most respects, and his efforts as part of the design group occasioned conflicts of opinion with Ron, though during the times they did agree they were an unassailable force.</p>

<p>These two ended up as the book-ends for the entire design process, each working independently to develop the world’s culture and plot overview, define the game’s units, specify the play mechanics, envision how magic spells worked, develop the game’s missions, choose place-names, and finalize other minutiae that are nevertheless important to make games comes to life.</p>

<p>At this late date it’s not possible to document who developed exactly which idea without canvassing the entire team and sorting out arguments over events that happened so long ago. Even back then we had difficulties determining how game-design credit should be shared, and ultimately decided the fairest, most egalitarian solution was to credit everyone, and thus the Warcraft: Orcs vs. Humans box credits include “Game design by Blizzard Entertainment”. Incidentally the Moby Games credits for Warcraft 1 are completely borked because they mix the much later Macintosh and 1998 releases of the game with the original 1994 DOS release, so many folks are mis-credited.</p>

<p>While my recollection of the exact timing of events is dim, I’ve recently seen an early design document dated 1994 and labeled “Chaos Studios”, which means it was generated in early 1994 before the company had been renamed Blizzard. By February 1994 we had a set of (still very rough) design documents that had been through several iterations and contained the key concepts for the game.</p>

<p>Admittedly, it would probably have been better to have a design in place before I started programming in September 1993, but with the amount of “substrate” that I needed to build before the actual fun-n-game parts could be developed, the lack of a design wasn’t a show-stopper at that stage, particularly since we already pulled many of the game’s elements from Dune 2.</p>

<h2>What got chopped</h2>

<p>While it’s still (barely) possible to play Warcraft 1 today, it’s not much fun compared to later RTS games. The difficulty of getting the game running on modern computers leads one to high expectations that are then crushed when viewing a game with a screen resolution of only 320×200 pixels — one twentieth of the resolution of a modern high res monitor — and with user interface and play balance that are markedly inferior to our later efforts.</p>

<p>But by playing Warcraft 1 it is possible to see the ideas that survived through the design winnowing process into the game’s final release. In many ways Warcraft 1 isn’t so much different from later games in the series.</p>

<p>Today gamers are familiar with classic Warcraft units like Barracks, Town Halls, Lumber Mills and Gold Mines, all of which survived into future releases of Warcraft games. Those iconic units persist because their names and functions are easily comprehensible to those of us who live in the real world instead of Azeroth.</p>

<p>But many of the ideas that our early design documents contained didn’t come to fruition. Some of this was related to the brutal timeline — the game had to launch for Christmas, 1994 and we barely made it. Ideas died because better alternatives existed, or didn’t have strong advocates, or were too time-consuming to implement, or would have required too much memory, or weren’t fun.</p>

<p>I thought folks might like to know about ideas that ended up on the cutting room floor, like the Mason’s Hall [required for stone buildings], Dwarven Inn [greater production of stone], Elven Fletcher [upgrades for archers], Tax House and Ale House.</p>

<p>These buildings all served secondary functions, some of which could be combined elsewhere. We instead added their functionality to existing buildings instead of creating buildings solely dedicated to one function, as for example the Dwarven Inn and Elven Fletcher buildings.</p>

<p>The Mason’s Hall was dropped because we considered using stone as a third resource (in addition to gold and lumber) an unnecessary complexity. We revisited the idea again for Warcraft 2, and dropped it again after actually implementing (programming) the idea.</p>

<p>The Ale Stand was designed to increase the rate at which soldiers and gold would be produced. I’m not sure how we can rectify that design idea with the amount of work that actually gets done after a night of heavy drinking in our world, but I imagine there are special rules of magic at work in Azeroth. Or maybe that’s why we cut the Ale Stand.</p>

<p>And NPC races like lizard men, hobgoblins and Halflings were also on the drawing board but were ultimately rejected, almost certainly due to the effort of drawing and animating the figures in DPaint.</p>

<p>Game development is about trade-offs — great games don’t have to do everything, they have to do a limited number of things well.</p>

<h2>Formations</h2>

<p>A design idea much discussed but never implemented was “formations”, where units would stick together on the battlefield. Formations are difficult to implement so the feature was chopped from the spec.</p>

<p>Some of the complexities that prevented implementation: units in formation all move at the same speed so slow units don’t get left behind — this created programming complexity. Formations need the ability to rotate — or “wheel” in military parlance — so that a formation heading north comprised of infantry carrying pikes with archers following behind can turn as a group to face an enemy detachment approaching from the east, with the archers still lined up behind the protective wall of infantry — this created user interface complexity. Given enough time we could have completed the feature, but we needed the development time for more basic features.</p>

<p>As a stand-in, I did implement “numbered group selection”. A user would select a group of units and press the Ctrl (control) key plus a number key (1-4). Those unit-groupings would be remembered so it would be possible to later re-select those units by pressing the number key (1-4) by itself. But those units would move independently even though selected as a group.</p>

<p>A player-character on the battlefield
Another idea much discussed but never implemented was that of having a unit that represented the player on the game map: an avatar that would progress from mission to mission during the game.</p>

<p>For a game-avatar to represent the player, it should morph from a weak unit into a mighty hero over the course of several missions to create a sense of progression. To do this properly would require that the character would only become more powerful if utilized. An underutilized avatar would remain weak, while an avatar constantly at work on the front lines would become stronger.</p>

<p>Carrying a unit over from one mission to the next adds to the difficulty of play-balancing missions. A great player will graduate a strong avatar from each mission, and that avatar’s strength will make succeeding missions seem easy, while a less-skilled player’s avatar could be so weak as to make winning later missions impossible. These two problems would lead players to drop out of the game — in the first instance for lack of challenge, and in the second due to frustration, as few players want to go backwards and redo previous missions in order to survive a mission later in the game.</p>

<p>A competitor’s product named War Wind released several years after Warcraft allowed units to be carried over from mission to mission; the game’s designers allowed up to four units to be transferred, but finessed the play-balance problem by ensuring that these units weren’t powerful enough to affect gameplay, somewhat the antithesis of what a heroic player-avatar is supposed to represent.</p>

<h2>Heroes — in Warcraft 1?!?</h2>

<p>We also considered including hero-units in Warcraft 1; they had names like the Illusion Thief, Barbarian, Huntress, and Juggernaut, each with specialized skills. Ultimately we trimmed the list of game units substantially; probably due to design and art-animation time constraints.</p>

<p>As someone with limited involvement in Warcraft III, it was interesting to see the idea of heroes finally implemented in the series, though the design genesis of heroes in Warcraft III comes from a different source — that is, not from ideas re-hashed from Warcraft 1 design documents.</p>

<p>Briefly, Warcraft III started out as a game called Heroes of Warcraft, which departed from the type of traditional RTS we had already launched five times before (W1, W2:ToD, W2:BtDP, SC, SC:BW) and was instead a squad-based tactical combat game set in the Warcraft universe. This game morphed into a more traditional RTS — but retained the element of heroes — after a change of team-leads halfway through the development.</p>

<h2>Warcraft’s bright color palette</h2>

<p>If you consider the artwork of the Warcraft series, you’ll see that the colors are shockingly loud in comparison to, say, Diablo, where only in a dim room is it truly possible to see the beauty of the art. The bright, cartoony art-style was different from the style of many other PC war games of the era, which hewed to more realistic color palette.</p>

<p>Part of that difference can be explained by the past experiences of our artists, who had worked on several Super Nintendo and Sega Genesis console titles, where games required more dynamic colors since televisions of that era were so much worse at displaying colors than PC monitors. Console games on TVs, which had lower pixel resolution and color bleed, needed high-contrast artwork to show well.</p>

<p>Another reason was at the behest of Allen, who charged all the artists with drawing artwork in bright conditions. He’d regularly stalk the halls of Blizzard turning on lights and opening window-blinds.</p>

<p>His view was that most folks play games in bright rooms, so our artists should be authoring our games to play well in that environment. He argued that it’s easy to draw artwork that reads well when viewed in a dark room with no outside light can distract from the monitor. But when computer art is competing with bright lights it’s much more difficult to see. And fluorescent bulbs are the worst form of light available — the cold, flickering glow of their tubes tires the eyes and washes out colors.</p>

<p>So the lights were always on in the art rooms to force artists to compensate for terrible lighting by creating art that accounted for those conditions. These working conditions chafed on some (all?) of the art team, but ultimately led to artwork that stood out compared to products of the day.</p>

<p>Now you know why Warcraft artwork looks like it has been candy-coated!</p>

<p>After six months of development that started in September 1993, Warcraft: Orcs vs. Humans, the first product in what would eventually become the Warcraft series, was finally turning into a game instead of an extended tech-demo.</p>

<p>For several months I was the only full-time employee on the project, which limited the rate of development. I was fortunate to be assisted by other staff members, including Ron Millar, Stu Rose, and others, who did design work on the project. And several artists contributed prototype artwork when they found time in between milestones on other projects.</p>

<p>The team was thinly staffed because the development of Warcraft was self-funded by the company from revenues received for developing titles for game publishers like Interplay and SunSoft, and the company coffers were not deep.</p>

<p>At that time we were developing four 16-bit console titles: The Lost Vikings 2 (the sequel to our critically-acclaimed but low-selling, side-scrolling “run-and-jump” puzzle game), Blackthorne (a side-scrolling “run-and-jump” game where the lead character gets busy with a shotgun), Justice League Task Force (a Street Fighter clone set in the DC Comics universe), and Death and Return of Superman (a side-scrolling beat-em-up based on the DC universe comic series of the same name).</p>

<p>With the money received for developing these games and other odd jobs the company was able to pay initial development costs.</p>

<h2>Game development economics</h2>

<p>For most of the history of the game industry, independent game development studios — which is to say studios that weren’t owned by a retail game publishing company — usually funded their projects by signing contracts with those publishing companies. Publishers would “advance” money for the development of the project. In addition to advances for development, publishers were responsible for publicity, marketing, manufacturing, retail distribution, customer support and so forth.</p>

<p>Back in the early 90′s there were many more retail game-publishers than exist today, but the increasing cost of game development and especially of game publishing led to massive industry consolidation due to bankruptcies and acquisitions, so when you think of a retail game publisher today you’ll probably think of Activision-Blizzard, EA or Ubisoft instead of the myriad mid-sized companies that existed twenty years ago.</p>

<p>As in all industries, the terms of contracts are drawn up to be heavily in the favor of the people with the money. This is the other golden rule: “he who has the money makes the rules”. While in theory these agreements are structured so that the game developer is rewarded when a game sells well, as in the record and movie industries publishers capture the vast majority of profits, with developers receiving enough money to survive to sign another agreement — if they’re lucky.</p>

<p>When I mentioned “advances” paid by the publisher, the more correct term is “advances against royalties”, where the developer if effectively receiving a forgivable loan to be repaid from royalties for game sales. It sounds great: develop a game, get paid for each copy sold. But the mechanics work out such that the vast majority of game titles never earn enough money to recoup (pay for) the advances. Since development studios often had to give up the rights to their title and sequels, these agreements are often thinly disguised work-for-hire agreements.</p>

<p>To aim for better deal terms, a common strategy employed by development studios was to self-fund an initial game prototype, then use the prototype to “pitch” a development deal to publishers. The longer a developer was able to self-fund game creation the better the eventual contract terms.</p>

<p>Perhaps the best example of this strategy is Valve Software, where Gabe Newell used the wealth he earned at Microsoft to fund the development of Half Life and thereby gain a measure of control over the launch schedule for the game — releasing the game only when it was a high-quality product instead of rushing it out the door to meet quarterly revenue goals as Sierra Entertainment (the game’s publisher) desired. More importantly, Gabe’s financial wherewithal enabled Valve to obtain ownership of the online distribution rights for Half Life just as digital downloads were becoming a viable strategy for selling games, and led to that studio’s later — vast — successes.</p>

<p>The downside to self-funding a prototype is the risk that the developer takes in the event that the game project is not signed by a publisher — oftentimes resulting in the death of the studio.</p>

<p>The company I worked for — at that time named Silicon and Synapse — was self-funding Warcraft, along with another project called Games People Play, which would include crossword puzzles, boggle and similar games found on the shelves at airport bookstores to entertain stranded travelers.</p>

<p>By developing two games that targeted radically different audiences the company owners hoped to create multiple sources of revenue that would be more economically stable compared to betting all the company’s prospects on the core entertainment market (that is, “hard core” gamers like you ‘n me).</p>

<p>Of course spreading bets across diverse game genres also has risks, inasmuch as a company brand can be diluted by creating products that don’t meet the desires its audiences. One of the great strengths of the Blizzard brand today is that users will buy its games sight-unseen because they believe in the company’s vision and reputation. That reputation would have been more difficult to establish had the company released both lower-budget casual titles and high-budget AAA+ games, as did Sierra Entertainment, which is now out of business after repeated struggles to find an audience.</p>

<p>In any event, creating Games People Play turned out to be a misstep because developing a casual entertainment product was so demoralizing for the lead programmer that the project never matured and was later canceled. Or perhaps it wasn’t a mistake, because the combination of Warcraft and Games People Play convinced Davidson &amp; Associates, at that time the second largest educational software company in the world, to purchase Silicon &amp; Synapse.</p>

<h2>Our new overlords</h2>

<p>Davidson &amp; Associates, started by Jan Davidson and later joined by her husband Bob, was a diversified educational software company whose growth was predicated on the success of a title named Math Blaster, in which a player answers math problems to blow up incoming asteroids before they destroy the player’s ship. It was a clever conjunction of education and entertainment, and the company reaped massive rewards from its release.</p>

<p>Aside: As an educational title Math Blaster may have had some value when used properly, but I had occasion to see it used in folly. My high school journalism class would write articles for our school newspaper in a computer room shared with the remedial education class; my fellow journalism students and I watched in horror as remedial twelfth graders played Math Blaster using calculators. As asteroids containing expressions like “3 + 5″ and “2 * 3″ approached those students would rapidly punch the equations into calculators then enter the results to destroy those asteroids. Arguably they were learning something, considering they outsmarted their teachers, but I’m not sure it was the best use of their time given their rapidly approaching entry into the work-force.</p>

<p>With good stewardship and aggressive leadership Davidson &amp; Associates expanded into game manufacturing (creating &amp; packing the retail box), game distribution (shipping boxes to retailers and intermediate distributors), and direct-to-school learning-materials distribution. They saw an opportunity to expand into the entertainment business, but their early efforts at creating entertainment titles internally convinced them that it would make better sense to purchase an experienced game development studio rather than continuing to develop their own games with a staff more knowledgeable about early learning than swords &amp; sorcery.</p>

<p>And so at a stroke the cash-flow problems that prevented the growth of the Warcraft development team were solved by the company’s acquisition; with the deep pockets of Davidson backing the effort it was now possible for Silicon &amp; Synapse (renamed Blizzard in the aftermath of the sale) to focus on its own titles instead of pursuing marginally-profitable deals with other game publishers. And they were very marginal — even creating two top-rated games in 1993, which led to the company being named “Nintendo Developer of the Year”, the company didn’t receive any royalties.</p>

<p>With a stack of cash from the acquisition to hire new employees and enable existing staff to jump on board the project, the development of Warcraft accelerated dramatically.</p>

<h2>The design “process”</h2>

<p>The approach to designing and building games at Blizzard during its early years could best be described as “organic”. It was a chaotic process that occurred during formal design meetings but more frequently during impromptu hallway gatherings or over meals.</p>

<p>Some features came from design documents, whereas others were added by individual programmers at whim. Some game art was planned, scheduled and executed methodically, whereas other work was created late at night because an artist had a great idea or simply wanted to try something different. Other elements were similarly ad-libbed; the story and lore for Warcraft came together only in the last several months prior to launch.</p>

<p>While the process was unpredictable, the results were spectacular. Because the team was comprised of computer game fanatics, our games evolved over the course of their development to become something that gamers would want to play and play and play. And Warcraft, our first original game for the IBM PC, exemplified the best (and sometimes the worst) of that process, ultimately resulting in a game that — at least for its day — was exemplary.</p>

<h2>How the Warcraft unit-creation system came about</h2>

<p>As biologists know the process of evolution has false starts where entire branches of the evolutionary tree are wiped out, and so it was with our development efforts. Because we didn’t have spec to measure against, we instead experimented and culled the things that didn’t work. I’d like to say that this was a measured, conscious process in each case, but many times it arose from accidents, arguments, and personality conflicts.</p>

<p>One event I remember in particular was related to the creation of game units. During the early phase of development, units were conjured into existence using “cheat” commands typed into the console because there was no other user-interface mechanism to build them. As we considered how best to create units, various ideas were proposed.</p>

<p>Ron Millar, an artist who did much of the ideation and design for early Blizzard games proposed that players would build farm-houses, and — as in the game Populous — those farms would periodically spawn basic worker units, known as (Human) peasants and (Orc) peons. The player would be able to use those units directly for gold-mining, lumber-harvesting and building-construction, but they wouldn’t be much good as fighters.</p>

<p>Those “peons” not otherwise occupied could be directed by the player to attend military training in barracks, where they’d disappear from the map for a while and eventually emerge as skilled combatants. Other training areas would be used for the creation of more advanced military units like catapult teams and wizards.</p>

<p>The idea was not fully “fleshed out”, which was one of the common flaws of our design process: the end result of the design process lacked the formality to document how an idea should be implemented. So the idea was kicked around and argued back and forth through the informal design team (that is, most of the company) before we started coding (programming) the implementation.</p>

<p>Before we started working on the code Ron left to attend a trade show (probably Winter CES — the Consumer Electronics Show), along with Allen Adham, the company’s president. And during their absence an event occurred which set the direction for the entire Warcraft series, an event that I call the “Warcraft design coup”.</p>

<p>Stu Rose, another early artist/designer to join the company (employee #6, I believe), came late one afternoon to my office to make a case for a different approach. Stu felt that the unit creation mechanism Ron proposed had too many as-yet-unsolved implementation complexities, and moreover that it was antithetical to the type of control we should be giving players in a Real-Time Strategy (RTS) game.</p>

<p>In this new RTS genre the demands on players were much greater than in other genres and players’ attention could not be focused in one place for long because of the many competing demands: plan the build/upgrade tree, drive economic activity, create units, place buildings, scout the map, oversee combat and micromanage individual unit skills. In an RTS the most limited resource is player attention so adding to the cognitive burden with an indirect unit creation mechanism would add to the attention deficit and increase the game’s difficulty.</p>

<p>To build “grunts”, the basic fighting unit, it would be necessary to corral idle peasants or those working on lower priority tasks to give them training, unnecessarily (in Stu’s view) adding to the game’s difficulty.</p>

<p>I was a ready audience for his proposal as I had similar (though less well thought out) concerns and didn’t feel that unit creation was an area where we needed to make bold changes. Dune II, the game from which the design of Warcraft was derived, had a far simpler mechanism for unit creation: just click a button on the user-interface panel of a factory building and the unit would pop out a short time later. It wasn’t novel — the idea was copied from even earlier games — but it just worked.</p>

<p>Stu argued that we should take this approach, and in lieu of more debate just get it done now, so over the next couple of days and late nights I banged out the game and user-interface code necessary to implement unit creation, and the design decision became fait accompli. By the time Ron and Allen returned the game was marginally playable in single-player mode, excepting that the enemy-computer AI was still months away from being developed.</p>

<p>Warcraft was now an actual game that was simple to play and — more importantly — fun. We never looked back.</p>

<h2>The first multiplayer game of Warcraft</h2>

<p>In June 1994, after ten months of development, the game engine was nearly ready for multiplayer. It was with a growing sense of excitement that I integrated the code changes that would make it possible to play the first-ever multiplayer game of Warcraft. While I had been busy building the core game logic (event loop, unit-dispatcher, path-finding, tactical unit-AI, status bar, in-game user-interface, high-level network code) to play, other programmers had been working on related components required to create a multiplayer game.</p>

<p>Jesse McReynolds, a graduate of Caltech, had finished coding a low-level network library to send IPX packets over a local-area network. The code was written based on knowledge gleaned from the source code of <del>Quake</del> Doom, which <del>had been recently</del> was later open-sourced by John Carmack at id software. While the IPX interface layer was only several hundred lines of C code, it was the portion of the code that interfaced with the network-card driver to ensure that messages created on one game client would be sent to the other player.</p>

<p>And Bob Fitch, who was earning his master’s degree from Cal State Fullerton, developed the initial “glue screens” that enabled players to create and join multiplayer games. My office was next to Bob’s, which was mighty convenient since it was necessary for us to collaborate closely to integrate his game join-or-create logic to my game-event loop.</p>

<p>After incorporating the changes I compiled the game client and copied it to a network drive while Bob raced back to his office to join the game. In what was a minor miracle, the code we’d written actually worked and we were able to start playing the very first multiplayer game of Warcraft.</p>

<p>As we started the game I felt a greater sense of excitement than I’d ever known playing any other game. Part of the thrill was in knowing that I had helped to write the code, but even more so were two factors that created a sense of terror: playing against a human opponent instead of a mere computer AI, and more especially, not knowing what he was up to because of the fog of war.</p>

<h2>The fog of war</h2>

<p><img src="http://alexbevi.com/images/Warcraft-1-fog-of-war.jpg"></p>

<p>One of the ideas drawn from earlier games was that of hiding enemy units from sight of the opposing player. A black graphic overlay hid areas of the game map unless a friendly unit explored the area, which is designed to mimic the imperfect information known by a general about enemy operations and troop movements during real battles.</p>

<p>Empire, a multiplayer turn-based strategy game written almost seventeen years before by the brilliant Walter Bright (creator the “D” programming language), used fog of war for that same purpose. Once an area of the map was “discovered” (uncovered) it would remain visible forever afterwards, so an important consideration when playing was to explore enough of the map early in the game so as to receive advance warning of enemy troop movements before their incursions could cause damage to critical infrastructure or economic capability.</p>

<p>The psychological terror created by not knowing what the enemy is doing has been the demise of many generals throughout history, and adding this element to the RTS genre is a great way to add to the excitement (and fear) level. Thank Walter and the folks at Westwood who created Dune II for their savvy!</p>

<h2>Computer AI</h2>

<p>As many gamers know, computer-controlled “Artificial Intelligence” (AI) players in strategy games are often weak. It’s common for human players to discover exploits that the computer AI is not programmed to defend against that can be used destroy the AI with little difficulty, so computer AI players usually rely upon a numeric troop advantage, positional advantage, or “asymmetric rules” in order to give players a good challenge.</p>

<p>In most Warcraft missions the enemy computer players are given entire cities and armies to start with when battling human players. Moreover, Warcraft contains several asymmetric rules which make it easier for the AI player to compete, though these rules would perhaps be called outright cheating by most players.</p>

<p>One rule we created to help the computer AI was to reduce the amount of gold removed from gold mines to prevent them from being mined-out. When a human player’s workers emerge from a gold mine those workers remove 100 units of ore from the mine and deliver it back to the player’s town hall on each trip, and eventually the gold mine is exhausted by these mining efforts. However, when an AI-controlled worker makes the same trip, the worker only remove 8 units of ore from the mine, while still delivering 100 units into the AI treasury.</p>

<p>This asymmetric rule actually makes the game more fun in two respects: it prevents humans from “turtling”, which is to say building an unassailable defense and using their superior strategic skills to overcome the computer AI. Turtling is a doomed strategy against computer AIs because the human player’s gold-mines will run dry long before those of the computer.</p>

<p>Secondarily, when the human player eventually does destroy the computer encampment there will still be gold left for the player to harvest, which makes the game run faster and is more fun than grinding out a victory with limited resources.</p>

<p>Most players are aware of a more serious violation of the spirit of fair competition: the computer AI cheats because it can see through the fog of war; the AI knows exactly what the player is doing from moment to moment. In practice this wasn’t a huge advantage for the computer and merely served to prevent it from appearing completely stupid.</p>

<p>Interestingly, with the long popularity of StarCraft (over 14 years since launch and still played), a group of AI programmers has risen to the challenge of building non-cheating AIs. Aided by a library called BWAPI, these programmers write code that can inject commands directly into the StarCraft engine to play the game. Programmers enter their AIs in competitions with each other to determine the victor. While these BWAPI AI players are good, the best of them are handily beaten by skilled human opponents.</p>

<h2>Playing against a human</h2>

<p>As a person who had played many (many many) strategy games before developing Warcraft, I was well aware of the limitations of computer AIs of that era. While I had battled against many computer AIs, sometimes losing, many times winning, I was never scared by AI intelligence, even when battling the terrible Russian offensive in the game Eastern Front by Chris Crawford, which I played on a friend’s Atari 800 until eventually the audio cassette tape (!) that contained the game was so old it could no longer be read.</p>

<p>These games were fun, exciting, and most certainly challenging, but not scary. But something changed when I played the first multiplayer game of Warcraft.</p>

<p>The knowledge that I was competing against an able human player — not just in terms of skill and strategy, but also in terms of speed of command — but was prevented from seeing his actions by the fog of war was both electrifying and terrifying. In my entire career I have never felt as excited about a single game as I was during that first experience playing Warcraft, where it was impossible to know whether I was winning or losing.</p>

<p>As a massive adrenaline rush spiked in my bloodstream, I did my best to efficiently harvest gold and lumber, build farms and barracks, develop an offensive capability, explore the map, and — most importantly — crush Bob’s armies before he could do the same to mine.</p>

<p>This was no test-game to verify the functionality of the engine; I know he felt the same desire to claim bragging rights over who won the first-ever multiplayer game of Warcraft. Moreover, when we had played Doom together at Blizzard, I had won some renown because, after a particularly fierce game Bob had become so angry at me for killing him so frequently with a rocket launcher that he had vowed never to play me again. I knew he’d be looking for payback.</p>

<p>As our armies met in battle, we redoubled our efforts to build more units and threw them into the fray. Once I discovered his encampment and attacked, I felt more hopeful. Bob’s strategy seemed disorganized and it appeared I would be able to crush his forces, but I wanted to leave nothing to chance so I continued at a frenzied pace, attacking his units and buildings wherever I could find them.</p>

<p>And then … crash:</p>

<p><img src="http://alexbevi.com/images/Dos4GW-crash.png"></p>

<p>Bad news bears – DOS4GW lets us know Warcraft crashed
As any programmer knows, the likelihood of new code working properly the first time is close to zero, and so it should be no surprise that the game crashed. The game’s graphics scrolled off the top of the monitor and were replaced with the blocky text of the DOS4GW “crash screen” so familiar to gamers in the era before Windows gaming. Now we have the far more sophisticated Windows Error Reporting dialog which enables the player to submit the crash report, though occasionally players see the dreaded “blue screen of death” which is remarkably similar to those of old.</p>

<p>After the crash I leaped up from my chair and ran into Bob’s office, yelling “That was awesooooommmme!” immediately followed by “… and I was kicking your ass!” So I was surprised to hear Bob’s immediate rebuttal: to the contrary, he had been destroying me.</p>

<p>It took a few minutes for our jangled nerves to return to normal but in short order we determined that not only did we have a crash bug but also a game-state synchronization problem, which I termed a “sync bug”: the two computers were showing entirely different battles that, while they started identically, diverged into two entirely different universes.</p>

<p>Someone who hasn’t worked on programming network code might assume that the two Warcraft game clients would send the entire game state back and forth each turn as the game is played. That is, each turn the computers would send the positions and actions for every game unit. In a slow-paced game with only a few board positions, like Chess or Checkers, this would certainly be possible but in a game like Warcraft, with up to 600 units in action at once, it was impossible to send that volume of information over the network.</p>

<p>We anticipated that many gamers would play Warcraft with 2400 baud modems, which could only transmit a few hundred characters per second. Younger gamers who never used a modem should take the time to read up on the technology, which was little removed from smoke signals, and only slightly more advanced than banging rocks together. Remember, this was before Amazon, Google and Netflix — we’re talking the dark ages, man.</p>

<p>Having previously “ported” Battle Chess from DOS to Windows, I was familiar with how multiplayer games could communicate using modems. I knew that because of the limited bandwidth available via a modem it would have been impossible to send the entire game state over the network, so my solution was to send only each player’s commands and have both players execute those commands simultaneously.</p>

<p>I knew that this solution would work because computers are great at doing exactly what they’re told. Unfortunately it turned out that many times we humans who program them are not so good at telling computers exactly the right thing to do, and that is a major source of bugs. When two computers are supposed to be doing the same thing, but disagree because of a bug, well, that’s a problem.</p>

<p>A sync bug arises when the two computers simulating the game each choose different answers to the same question, and from there diverge further and further over time. As in time-travel movies like Back to the Future, small changes made by the time-traveler while in the past lead to entirely different futures; so it was that games of Warcraft would similarly diverge. On my computer my Elvish archer would see your Orcish peon and attack, whereas on your computer the peon would fail to notice the attack and wander off to harvest lumber. With no mechanism to discover or rectify these types of disagreements, our two games would soon be entirely different.</p>

<p>So it was that the first game of Warcraft was a draw, but at the same time it was a giant win for the game team — it was hella fun! Other team members in the office played multiplayer soon afterwards and discovered it was like Blue Sky, the pure crystal meth manufactured by Walter White in Breaking Bad. Once people got a taste for multiplayer Warcraft, nothing else was as good. Even with regular game crashes, we knew we were on to something big.</p>

<p>All we needed to do was get the game done.</p>

<p>Tragically, we soon made an even worse discovery: not only did we have numerous sync bugs, but there were also many different causes for those sync bugs. If all the sync bugs were for similar reasons we could have endeavored to fix the singular root cause. Instead it turned out there were numerous different types of problems, each of which caused a different type of sync bug, and each which therefore necessitated its own fix.</p>

<h2>Why do sync bugs happen</h2>

<p>When developing Warcraft I had designed a solution to minimize the amount of data that needed to be transmitted over the network by only sending the commands that each player initiated, like “select unit 5″, “move to 650, 1224″, and “attack unit 53″. Many programmers have independently designed this same system; it’s an obvious solution to the problem of trying to synchronize two computers without sending the entire game state between them every single game turn.</p>

<p>Aside: These days there are probably several patents retroactively trying to claim credit for this approach. Over time I’ve come to believe that software should not be patentable; most any idea in software is something that a moderately experienced programmer could invent, and the definition of patents requires that patents be non-obvious. Nuff said.</p>

<p>I hadn’t yet implemented a mechanism to verify synchronization between the two computers, so any bug in the game code that caused those computers to make different choices would cause the game to “bifurcate” – that is, split it into two loosely-coupled universes that would continue to communicate but diverge with increasing rapidity over time.</p>

<p>Creating systems designed to detect de-synchronization issues was clearly the next task on my long list of things to do to ship the game!</p>

<h2>In for the long haul</h2>

<p>You know the ending to this story: Warcraft eventually shipped only five months later. It seemed an eternity because we worked so many hours each day, encountered so many obstacles, overcame so many challenges, and created something we cared for so passionately. I’ll continue to explore those remaining months in future blog articles, but so much was packed into that time that it’s impossible to squeeze those recollections into this already too long post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetching Changesets in Redmine from Heroku using Subversion]]></title>
    <link href="http://alexbevi.com/blog/2012/11/21/fetching-changesets-in-redmine-from-heroku-using-svn/"/>
    <updated>2012-11-21T08:44:00-05:00</updated>
    <id>http://alexbevi.com/blog/2012/11/21/fetching-changesets-in-redmine-from-heroku-using-svn</id>
    <content type="html"><![CDATA[<p>I manage my open source and contract development projects using <a href="http://www.redmine.org">Redmine</a>.</p>

<p>Since I&rsquo;m &ldquo;frugal&rdquo;, I tend to try to push the free hosting envelope as far as possible. As a result, I have my Redmine deployment on <a href="http://www.heroku.com">Heroku</a>, my files and attachments on <a href="http://www.dropbox.com">Dropbox</a> and my source on <a href="https://github.com">GitHub</a>.</p>

<p>I also like to link to changesets in my projects, which is easy enough to do when you host the source and the Redmine server on the same machine.</p>

<p>Not so easy with Heroku+GitHub &hellip;. until now!</p>

<p>By the end of this tutorial, we will have:</p>

<ul>
<li>Setup a build system using Vagrant that matches the Heroku hosting environment</li>
<li>Compiled a statically linked <a href="http://subversion.apache.org/">Subversion</a> client</li>
<li>Added the svn client to our Redmine repository and pushed it to Heroku</li>
<li>Configured a project in Redmine to fetch changesets from GitHub using Subversion</li>
</ul>


<!-- more -->


<h2>Overview</h2>

<p>In 2012, <a href="https://github.com/blog/626-announcing-svn-support">GitHub announced SVN support</a>, which primarly opened the service up to developers who hadn&rsquo;t given up the centralized development model.</p>

<p>As an added bonus, it gave us an alternative view into the commit logs for our projects without the need for a local copy.</p>

<p>In order to proceed, I&rsquo;m making the following assumptions:</p>

<ul>
<li>You are hosting an instance of Redmine on Heroku</li>
<li>You are comfortable using <a href="http://git-scm.com">Git</a></li>
<li>You&rsquo;ve used a <a href="http://debian.org">Debian</a>-based Linux distribution in the past</li>
<li>You&rsquo;ve used the <a href="http://en.wikipedia.org/wiki/GNU_build_system">GNU Build System</a> before</li>
<li>You have <a href="http://www.ruby-lang.org">Ruby</a> and <a href="http://rubygems.org">RubyGems</a> configured (if not, <a href="http://rvm.io">RVM</a> is a good place to start)</li>
<li>You are not crazy enough to try doing this from Windows or OSX ;)</li>
<li>You have a sense of humour and realize the winky above indicates this guide was written for Linux, but could easily be adapted for any OS</li>
</ul>


<h2>Configuring the Build Environment</h2>

<p>Heroku (as of November, 2012 at least) deploys applications to an Ubuntu 10.04 x86_64 environment, and we&rsquo;re going to be statically linking for that environment, so we need to setup a build system that reflects this requirement.</p>

<p>The most efficient way of doing this is to use <a href="http://vagrantup.com">Vagrant</a> to initialize a bare-bones <a href="http://releases.ubuntu.com/lucid">Ubuntu Lucid</a> system.</p>

<p>Since Rubygems should already be installed, it can be used to quickly setup Vagrant:</p>

<pre><code>gem install vagrant
</code></pre>

<p>Now, let&rsquo;s fetch a pre-build lucid system (thanks Vagrant!) and initialize it in the current directory:</p>

<pre><code>vagrant box add lucid64 http://files.vagrantup.com/lucid64.box
vagrant init
</code></pre>

<p>This will create a <code>Vagrantfile</code> in the current director, which contains configuration information for our build system. In order to tell Vagrant to use the <em>lucid64</em> instace we&rsquo;ve downloaded, the <code>Vagrantfile</code> needs to be edited and the <em>config.vm.box</em> section updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="c1"># Every Vagrant virtual environment requires a box to build off of.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;lucid64&quot;</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that everything is ready to go, let&rsquo;s start the instance.</p>

<pre><code>vagrant up
</code></pre>

<p>Once vagrant has started the virtual machine, we can access it via ssh using:</p>

<pre><code>vagrant ssh
</code></pre>

<h2>Building Subversion</h2>

<p>For the purposes of this tutorial, I&rsquo;m going to be using the 1.6 branch of Subversion, which still had the <em>subversion-deps</em> packaged seperately.</p>

<blockquote><p><strong>NOTE</strong> With the 1.7 branch, there is a script that automates the process, and I&rsquo;ll likely update this tutorial at some point to use this.</p></blockquote>

<p>First, we need to get the source:</p>

<pre><code>wget http://subversion.tigris.org/downloads/subversion-deps-1.6.19.tar.bz2
wget http://subversion.tigris.org/downloads/subversion-1.6.19.tar.bz2
tar xvf subversion-deps-1.6.19.tar.bz2
tar xvf subversion-1.6.19.tar.bz2
cd subversion-1.6.19
</code></pre>

<p>Second, we&rsquo;ll install any additonal components required to compile successfully:</p>

<pre><code>sudo apt-get install build-essential libxml2-dev
</code></pre>

<p>Finally, we&rsquo;ll configure the build to exclude as much as possible and to produce a static binary:</p>

<pre><code>./configure --with-ssl \
            --without-gssapi \
            --without-swig \
            --without-neon \
            --enable-all-static
make
</code></pre>

<p>Once the build completes, the only file we&rsquo;re interested in is the <code>svn</code> client, so we&rsquo;ll copy that to the <code>/vagrant</code> directory of our build machine, but first we&rsquo;ll strip it.</p>

<pre><code>strip subversion/svn/svn
cp subversion/svn/svn /vagrant
</code></pre>

<blockquote><p><strong>NOTE</strong> stripping the binary reduces the overall size from ~ 12 MB to ~ 4 MB, which is important since we have limited space on Heroku.</p>

<pre><code>vagrant@lucid64:~/subversion-1.6.19$ ls -l subversion/svn/svn
-rwxr-xr-x 1 vagrant vagrant 12060462 2012-11-21 14:37 subversion/svn/svn*

vagrant@lucid64:~/subversion-1.6.19$ strip subversion/svn/svn   

vagrant@lucid64:~/subversion-1.6.19$ ls -l subversion/svn/svn
-rwxr-xr-x 1 vagrant vagrant 4257472 2012-11-21 14:56 subversion/svn/svn*
</code></pre></blockquote>

<p>The <code>/vagrant</code> directory is shared between the host and the guest machine by default, so this gives us access to the Subversion client if we open a new console and access the project folder we started Vagrant in.</p>

<p>Since we&rsquo;re now done, we can end the ssh session and stop the virtual machine</p>

<pre><code>exit
vagrant halt
</code></pre>

<h2>Adding Subversion to Redmine</h2>

<p>Go to the root of your local Redmine repository, and create a <code>bin</code> folder. Now copy the <code>svn</code> binary to this folder, add the result to your repository and push to Heroku.</p>

<pre><code>mkdir bin
cp /path/to/static/svn bin  
git commit -a -m "Adding a Statically Linked Subversion to Redmine"
git push heroku master
</code></pre>

<p>If all went well, when you access the <em>Repositories</em> tab under <em>Administration &ndash;> Settings</em>, Subversion should be listed and the version we just uploaded displayed.</p>

<p><img class="center" src="http://alexbevi.com/images/heroku-svn-01.jpg"></p>

<h2>Accessing Changesets from GitHub</h2>

<p>The final step is to configure an existing project to access a project on GitHub.</p>

<p>First, add a new repository and point it to the GitHub url you would normally use to access the project on the web.</p>

<blockquote><p><strong>NOTE</strong> Leave the <em>Login</em> and <em>Password</em> fields blank unless this is a private repository</p></blockquote>

<p><img class="center" src="http://alexbevi.com/images/heroku-svn-02.jpg"></p>

<p>Once configured, clicking on the <em>Repository</em> tab should fetch the changesets and show the source tree</p>

<p><img class="center" src="http://alexbevi.com/images/heroku-svn-03.jpg"></p>

<blockquote><p><strong>NOTE</strong> This can potentially time out on a larger project and require clicking on the <em>Repository</em> tab multiple times until all changesets have been fetched and parsed.</p>

<p><strong>NOTE</strong> Viewing changeset diffs doesn&rsquo;t work</p></blockquote>

<p>I&rsquo;ve used my personal installation as an example at <a href="http://alexbevi-pm.herokuapp.com/projects/redmine-dropbox-attachments">http://alexbevi-pm.herokuapp.com/projects/redmine-dropbox-attachments</a>.</p>

<p>This method isn&rsquo;t on-par with a self-hosted solution, but it&rsquo;s good enough if you don&rsquo;t have a VPS in your budget ;)</p>

<h3>REFERENCES</h3>

<ul>
<li><a href="http://rickvanderzwet.blogspot.ca/2007/11/building-static-subversion.html">http://rickvanderzwet.blogspot.ca/2007/11/building-static-subversion.html</a></li>
<li><a href="http://bindle.me/blog/index.php/405/running-binaries-on-heroku">http://bindle.me/blog/index.php/405/running-binaries-on-heroku</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Braindump: Tony Tough and the Night of the Roasted Moths]]></title>
    <link href="http://alexbevi.com/blog/2012/11/02/developer-braindump-tony-tough-and-the-night-of-the-roasted-moths/"/>
    <updated>2012-11-02T08:28:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/11/02/developer-braindump-tony-tough-and-the-night-of-the-roasted-moths</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.scummvm.org">ScummVM</a> project recently added support for <a href="http://en.wikipedia.org/wiki/Tony_Tough_and_the_Night_of_Roasted_Moths">Tony Tough and the Night of the Roasted Moths</a>.</p>

<p>The original developer, <a href="https://github.com/rasky">Giovanni Bajo</a> appeared on the <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=scummvm-devel">scummvm-devel</a> mailing list and offered some insight into the development of the original engine.</p>

<p>The following is extracted from the <a href="http://sourceforge.net/mailarchive/message.php?msg_id=30015071">original post</a>.</p>

<!-- more -->




<blockquote><p>I went though the pull review code and of course lots of memories sprang to mind, so I&#8217;m happy to post a few things.</p><p>The game originated in 1996, I was 17 back at the time. Luca Giusti and I wrote the first version of the game engine, and it was based on DOS and 8-bit (palette) graphics, with the venerable Mode X for achieving smooth scrolling and higher resolution (320x240), and compiled sprites (!!!). IIRC Luca wrote the game engine and I wrote the MPAL preprocessor (yuk!), compiler, linker and interpreter. We were a distributed team of 5-6 people working across Italy, and we were using Fidonet and BBS files areas to share files. I live in Florence and one of the artist (Sergio) was in Naples; I still remember that we used a direct modem connection on the phone line (so basically he dialed my home phone number with his modem, to setup a 14.4 kbit connection) and then send me the first 4 room background arts through it; they were an early 8-bit version, but I was in love with them :) I also remember our lead artist (Valerio) sent me the first version of the park map (hand drawn wireframe) by fax; the original thermal paper is now a picture hanging on my home wall :)</p><p>At some point, in 1997, it became clear that we need to gather together to get to a decent point, so we organized a one-week crunch session in a alpine hut in northern italy; we worked 18-20hrs a day for a week, ate lots of pasta, and completed an early version of the first 4 rooms. I remember the game engine was using dirty-rectangles at that time to optimize drawing.</p><p>In 1998 we got a deal with a local publisher (Prograph/Protonic), and part of the team got paid to finish the game. That included myself, but Luca declined (for personal reasons); that meant that I was able to work on the game full-time, while Luca only in his spare time. The publisher insisted on reworking the game with 16-bit graphics, and porting it from DOS to Windows; it wasn&#8217;t trivial to port the existing code (Mode X stuff!), plus Luca couldn&#8217;t handle it in his spare time, so I had to take over the game engine. I wasn&#8217;t familiar with it at all (Luca had written it up until then), and thus decided to rewrite it from scratch. One of the few things that I brought over was the pathfinding code, and in fact I think it&#8217;s quite obvious from its look that it&#8217;s been written by a different hand.</p><p>The game engine is quite easy, as you have seen. I think it&#8217;s been the first real world C++ object-oriented program I have ever written, so it&#8217;s obviously very stretched towards using inheritance everywhere (new toy!). I still remember the joy of finally *understanding* polymorphism, and that&#8217;s when the RMTask base class was born, and the idea of having a list of RMTasks that could be anything by simply reimplementing the draw() call. I saw in the code that the list was called &#8220;OTList&#8221; and, while the name obviously rings a bell to me, I don&#8217;t recall what it means.  BTW, &#8220;RM&#8221; stands for Roasted Moths of course; some classes in the source code begins with &#8220;FP&#8221; instead; that&#8217;s &#8220;Falling Pumpkins&#8221; which was the original title of the game.</p><p>When I reimplemented the game, I went for full screen drawing, without dirty rectangles. I think i was positive that computers were fast enough for it, and in fact it did work quite well. I remember I quite optimized sprite drawing routines; for instance, most sprites are RLE-encoded as a way to quickly skip transparent pixels, and to avoid compiled sprites because there was simply too many sprites to compile them all without having memory issues. The game was running 60 fps on a Pentium 2, so that was good enough for us. The &#8217;30s (sepia) mode was a nice touch, but I remember it was noticeably slower at the time as it was an additional pass over the screen, so the framerate was dropping quite noticeably. </p><p>To build the rooms, setup background animations, decide rectangles of interactions with objects, etc. we built a so-called &#8220;location editor&#8221; (we actually used the word &#8220;location&#8221; for what is usually called &#8220;room&#8221; in adventures), whose source code I think has been lost. It was able to load a .loc file, modify it, and save it back. So both the game and the editor was using the same file format. At some point, we realized that it was better to separate the two formats, because the editor needed more information in basic format, while the game engine might use, for instance, sprites that were already rle-compressed instead of rle-compressing on the fly at load time; so the &#8220;lox&#8221; format was born. I think the game engine still opens the original loc files, but the final game assets only contains lox files.</p><p>One guy in the team (Marco) was one of those magic resources in game teams that is both an artist and a programmer; I think it&#8217;s mostly impossible nowadays, and used to be just rare at the time. So he was in charge of both maintaining the editor *and* drawing the background animations *and* using the editor to insert them into the locations. So that&#8217;s one hell of &#8220;eating multiple levels of dogfood&#8221; :) In fact, he was the one that prodded me to add support for &#8220;slot positions&#8221; to the game engine; with &#8220;slot positions&#8221;, we meant having an optional x,y offset associated to a graphic frame within a animation; I remember we discussed whether this was worth it, but at the end of the day, he was in a better position to know, since he was using the editor after all. Later in the game, it proved *extremely* useful in one specific animation: to animate the beast walking out of its cage. In fact, the game engine has no concept of actors (the only &#8220;actor&#8221; is Tony), so every other actor in the game is just an animated background object; in fact, they just don&#8217;t walk around. So, when the designer required the beast to walk out, Marco faked it through manually settings x,y offsets in the editor within the whole animation, making it scroll away. It took him a while of course, and won the title of &#8220;slot position master&#8221; for this achievement :) </p><p>Stuffing all files in a single compressed &#8220;resource&#8221; file was very common at the time. I don&#8217;t think there was a rationale for doing it, it was just the standard way of doing it. Lucas was doing it, so why shouldn&#8217;t we? :) I think it just looked cool, in a way. We were using LZO as a compressor because it was very fast at decompression; you might have noticed also that LZO is GPL, which means that the game was in blatant violation. I don&#8217;t think I have *knew* what free software was and what a free software license was. I don&#8217;t recall the details, but I wouldn&#8217;t be surprised if I simply altavista&#8217;d for &#8220;fast compression&#8221;, found that source code, downloaded it at 64 kbit/s, and dumped it into the game. I&#8217;m now deep into free software at many levels, I even give talks and do trainings about free software licenses from time to time, so I hope Markus of LZO can forgive the young me for not even realizing what I was doing.</p><p>Speeches gave me quite a few headaches. For a start, I realized that simply exporting all texts from MPAL to a txt/html file wasn&#8217;t enough, because actors need context to meaningfully act. So I ended up writing a program that exported HTML file divided by rooms, with some contexts added, and even manually adding comments to explain them. This has been helpful and was important to get good speeches from them. I remember it was really fun when the actors director called us and played us over the phone the first recordings of character voice tests made by the actors. I think we actually voted between a few options to decide which voice sounded best for Tony. When I got the first speeches files back from them, I had some latency issues, especially when running off CDs. I think I ended up caching the main index in RAM and maybe precaching something (don&#8217;t remember the details). I think I also changed the code so to delay display of subtitles to the moment I could effectively start playing the speech, because it was very unfriendly to first see the text on screen, and the hear the speech 1 second later.</p><p>MPAL was very very basic. I actually didn&#8217;t have a clue how to properly code a VM with bytecode and stuff, and I didn&#8217;t have *any* proper compiler theory training, so in retrospect it&#8217;s amazing I even managed to parse and compile files. So basically MPAL can only assign to variables (which are all globals, plus a weird namespace thingie for locality), call &#8220;custom functions&#8221; (aka C++ code stored in a pointer table) and do basic arithmetic. That&#8217;s it. Not even a proper language, isn&#8217;t it? :) No loop constructors, no ifs, no jumps, nothing. So MPAL was a collection of flat routines, each one associated to a specific verb (action), specific object (eg. door), under a specific condition (eg: when open, that is when global variable room1_door_open==1). Since you couldn&#8217;t have conditions *within* a MPAL routine but only to select *which* routine to run, you can see that cut & paste was a useful tool for scripters :)</p><p>In fact, we didn&#8217;t evolve MPAL much during the main game development. We basically went with what we had on the DOS version, and we were using the same compiler/linker binary for months/years like we had no source code for it. In fact, having written most of it in 1996 (2 yrs before), with zero experience on writing compilers, it was kind of &#8220;magical&#8221; in my eyes that it was somehow working, and I was almost scared to touch it, let alone refactoring. I remember that, near the end of development, the scripts hit some internal hard-coded limit of the compiler (say, too many total variables), and I was terrified to simply open the project in Visual Studio, bump that limit, and recompile everything. In retrospect, I think it was more of a psychological thing, since the compiler worked wonderfully for the whole development and did its job.</p><p>There were no actors in MPAL simply because the game didn&#8217;t really require them, so at some point we decided to simply avoid implementing it and tweak the storyboard accordingly. The game designer, Stefano, wasn&#8217;t very happy about it but we eventually found a deal and I simply added a way to run background tasks in MPAL (actually, through a custom verb &#8220;Idle&#8221;, so not to modify the compiler!), to let actors at least chat and animate in background, but without ever walking. In fact, the game engine had already been designed for multiple actors in mind (this is why you have the RMCharacter class separated from RMTony), but there was nothing in MPAL, and of course development time is limited. </p><p>Given my ignorance of &#8220;advanced&#8221; programming techniques, I think I simply couldn&#8217;t think of how one could execute a linear (blocking) piece of script code without recurring to multi-threading. So I think I didn&#8217;t even explore alternatives to multithreading. Obviously multithreading programming isn&#8217;t easy, so custom C++ functions, called from MPAL, were full of locking issues wrt to the main thread that redraws the screen. The game was developed under Windows 95 and in fact was released before Windows 2000 was out; on the NT kernel, the game didn&#8217;t work too well and crashed often because of race conditions. I see that you debugged and fixed at least few those bugs, well done! Those simply weren&#8217;t triggering on a 9x kernel. </p><p>Another issue with MPAL is that there&#8217;s no way to skip cutscenes; I don&#8217;t remember whether I couldn&#8217;t think of a good way of doing it, or whether all methods I devised would require too much workload on scripters that were already quite full. I think it&#8217;s my #1 technical regret when I see the game, and in fact I would quite love if you found a way to implement it now.</p><p>I think this ends my braindump of today. Feel free to ask questions of course.</p><p>Thanks again for your work!</p><footer><strong>Giovanni Bajo</strong> <cite>2012 October 25</cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Hot Corner Hover in Linux Mint 13]]></title>
    <link href="http://alexbevi.com/blog/2012/11/02/disable-hot-corner-hover-in-linux-mint-13/"/>
    <updated>2012-11-02T08:01:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/11/02/disable-hot-corner-hover-in-linux-mint-13</id>
    <content type="html"><![CDATA[<p>I use <a href="http://www.synergy-foss.org">Synergy</a> on all my computers to share a common mouse and keyboard, but I&rsquo;ve found that with Gnome 3 based distributions, the hot corner was causing me some grief.</p>

<p>The beauty of using a Linux-based system though is that you can pretty much change anything you&rsquo;re unhappy with, so that&rsquo;s what I&rsquo;m here to do.</p>

<!-- more -->


<p>By default, <a href="http://linuxmint.com">Linux Mint</a> uses the <a href="http://cinnamon.linuxmint.com">Cinnamon</a> desktop, so the configuration file we&rsquo;re looking for is at <code>/usr/share/cinammon/js/ui/layout.js</code>.</p>

<p>For Linux Mint 12, which still used <a href="https://live.gnome.org/GnomeShell">Gnome Shell</a>, the file was at <code>/usr/share/gnome-shell/js/ui/layout.js</code>.</p>

<p>Edit the appropriate file</p>

<pre><code>$ sudo nano /usr/share/cinammon/js/ui/layout.js
</code></pre>

<p>Locate the following section (I just searched for <em>hot-corner</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_corner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clutter</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hot-corner&#39;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">width</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">reactive</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And change the value of <code>reactive</code> from <em>true</em> to <em>false</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_corner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clutter</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;hot-corner&#39;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">width</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                       <span class="nx">reactive</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Log off, then back on. Booya!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Broken Sudo]]></title>
    <link href="http://alexbevi.com/blog/2012/10/30/fixing-broken-sudo/"/>
    <updated>2012-10-30T14:58:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/10/30/fixing-broken-sudo</id>
    <content type="html"><![CDATA[<p>This is pretty much a transcription of <a href="http://www.psychocats.net/ubuntu/fixsudo">http://www.psychocats.net/ubuntu/fixsudo</a>, which is just such a good article I wanted to keep a copy for reference.</p>

<h2>How does <em>sudo</em> work?</h2>

<p>The way that Ubuntu has implemented <em>sudo</em>, the <code>/etc/sudoers</code> file says that users in the admin group can (after a password authentication) temporarily escalate to system-wide privileges for particular tasks. And then the <code>/etc/groups</code> file says which users are in the admin group.</p>

<p>You can read more on <a href="https://help.ubuntu.com/community/RootSudo">the community documentation</a> about Ubuntu&rsquo;s implementation of <em>sudo</em>.</p>

<!-- more -->


<h2>Cause and Symptoms</h2>

<p><em>sudo</em> breaks when one or more of the following occurs:</p>

<ul>
<li>the <code>/etc/sudoers</code> file has been altered to no longer allow users in the admin group to escalate privilege</li>
<li>the permissions on the <code>/etc/sudoers</code> file are changed to something other than 0440</li>
<li>a user who should not have been has been taken out of the <em>admin</em> group</li>
</ul>


<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise01.jpg"></p>

<p>If <em>sudo</em> is broken this way, you may notice an error saying you&rsquo;re not in the _sudo_ers file and the incident is going to be reported. Or you may just see the next command prompt without any action being executed.</p>

<h2>Booting into recovery mode</h2>

<p>Since fixing <em>sudo</em> involves editing system files, and you would otherwise need <em>sudo</em> to do so, you&rsquo;ll have to boot into recovery mode to gain root (system-wide) access in order to repair <em>sudo</em>.</p>

<p>If you have a single-boot (Ubuntu is the only operating system on your computer), to get the boot menu to show, you have to hold down the Shift key during bootup.</p>

<p>If you have a dual-boot (Ubuntu is installed next to Windows, another Linux operating system, or Mac OS X; and you choose at boot time which operating system to boot into), the boot menu should appear without the need to hold down the <em>Shift</em> key.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise02.jpg"></p>

<p>From the boot menu, select <em>recovery mode</em>, which is usually the second boot option.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise03.jpg"></p>

<p>After you select recovery mode and wait for all the boot-up processes to finish, you&rsquo;ll be presented with a few options. In this case, you want the <em>Drop to root shell</em> prompt option so press the Down arrow to get to that option, and then press Enter to select it.</p>

<p>The root account is the ultimate administrator and can do anything to the Ubuntu installation (including erase it), so please be careful with what commands you enter in the root terminal.</p>

<p>In recent versions of Ubuntu, the filesystem is mounted as read-only, so you need to enter the follow command to get it to remount as read-write, which will allow you to make changes:</p>

<pre><code>mount -o rw,remount /
</code></pre>

<h2>Do the actual repair</h2>

<h3>Case 1</h3>

<p>If you&rsquo;d removed your last <em>admin</em> user from the <em>admin</em> group, then type</p>

<pre><code>adduser username admin
</code></pre>

<p>where <em>username</em> is your actual username.</p>

<h3>Case 2</h3>

<p>If you had previously edited the /etc/_sudo_ers file and screwed it up, then type</p>

<pre><code>sudo cp /etc/sudoers /etc/sudoers.backup
sudo nano /etc/sudoers
</code></pre>

<p>(the proper command is actually <code>sudo visudo</code>, which checks syntax before you save the <code>/etc/sudoers</code> file, but in some older versions of Ubuntu, that command uses the vi editor, which can be confusing to new users, as opposed to nano, which is more straightforward)
and make it sure it looks like this:</p>

<pre><code>#
# This file MUST be edited with the 'visudo' command as root.
#
# Please consider adding local content in /etc/sudoers.d/ instead of
# directly modifying this file.
#
# See the man page for details on how to write a sudoers file.
#
Defaults  env_reset
Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root  ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:

#includedir /etc/sudoers.d
</code></pre>

<p>When you&rsquo;re done making changes, press <em>Control-X, Y, Enter</em>.</p>

<h3>Case 3</h3>

<p>If you are trying to fix the error where it says <em>sudo</em> is mode _____, should be 0440, then you&rsquo;ll want to type</p>

<pre><code>chmod 0440 /etc/sudoers
</code></pre>

<p>When you&rsquo;re done with whatever commands you needed to enter, type</p>

<pre><code>exit
</code></pre>

<p>This will bring you back to the recovery menu.</p>

<p><img class="center" src="http://alexbevi.com/images/fixsudoprecise04.jpg">
<img class="center" src="http://alexbevi.com/images/fixsudoprecise05.jpg"></p>

<p>Choose to resume a normal boot. Then you should be able to <em>sudo</em> again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Latest MongoDB in Ubuntu]]></title>
    <link href="http://alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu/"/>
    <updated>2012-08-29T13:46:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/29/install-latest-mongodb-in-ubuntu</id>
    <content type="html"><![CDATA[<p>A couple projects I work on use <a href="http://www.mongodb.org/">MongoDB</a> as the database, and I&rsquo;m generally not satisfied to use the (often outdated) version that ships with Ubuntu.</p>

<p>As a result, I wrote this script to automate fetching, extracting and linking the latest version.</p>

<!-- more -->


<p>To configure the script, just replace the <code>PKG</code> information with whatever value is most relevant for your configuration at <a href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a>.</p>

<div><script src='https://gist.github.com/3516100.js'></script>
<noscript><pre><code>#!/bin/bash

PKG=mongodb-linux-x86_64-2.2.0
URL=http://fastdl.mongodb.org/linux

if [ -f /etc/init.d/mongod ]
then
  echo &quot;mongod already installed ... stopping&quot;
  sudo service mongod stop
else
  echo &quot;installing mongod script&quot;
  wget https://raw.github.com/gist/3516078/713ad981715236473999f30636bca2ee3dcc5f24/mongod
  sudo mv mongod /etc/init.d/mongod
  sudo chmod +x /etc/init.d/mongod
  echo &quot;creating mongodb user&quot;
  sudo useradd mongodb
  echo &quot;creating directories&quot;
  sudo mkdir -p /var/lib/mongodb
  sudo mkdir -p /var/log/mongodb
  sudo chown mongodb.mongodb /var/lib/mongodb
  sudo chown mongodb.mongodb /var/log/mongodb
  sudo update-rc.d mongod defaults
fi

wget $URL/$PKG.tgz
sudo tar -xvzf $PKG.tgz -C /usr/local/

if [ -d /usr/local/mongodb ]
then
  echo &quot;removing existing mongodb symlink&quot;
  sudo rm -rf /usr/local/mongodb
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
else
  echo &quot;creating symlinks&quot;
  sudo ln -s /usr/local/$PKG /usr/local/mongodb
  sudo ln -s /usr/local/mongodb/bin/bsondump /usr/local/bin/bsondump
  sudo ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
  sudo ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod
  sudo ln -s /usr/local/mongodb/bin/mongodump /usr/local/bin/mongodump
  sudo ln -s /usr/local/mongodb/bin/mongoexport /usr/local/bin/mongoexport
  sudo ln -s /usr/local/mongodb/bin/mongofiles /usr/local/bin/mongofiles
  sudo ln -s /usr/local/mongodb/bin/mongoimport /usr/local/bin/mongoimport
  sudo ln -s /usr/local/mongodb/bin/mongorestore /usr/local/bin/mongorestore
  sudo ln -s /usr/local/mongodb/bin/mongos /usr/local/bin/mongos
  sudo ln -s /usr/local/mongodb/bin/mongosniff /usr/local/bin/mongosniff
  sudo ln -s /usr/local/mongodb/bin/mongostat /usr/local/bin/mongostat
fi

echo &quot;cleaning up&quot;
rm $PKG.tgz

echo &quot;starting mongod service&quot;
sudo service mongod start</code></pre></noscript></div>


<p>Note that this script pulls <code>mongod</code> from a gist which I created. This script is originally from <a href="https://github.com/ijonas">Ijonas Kisselbach</a>&rsquo;s <a href="https://raw.github.com/ijonas/dotfiles/master/etc/init.d/mongod">dotfiles</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Pry Breakpoints out of Git]]></title>
    <link href="http://alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git/"/>
    <updated>2012-08-23T07:57:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/23/keeping-pry-breakpoints-out-of-git</id>
    <content type="html"><![CDATA[<p>My Ruby workflow as of late has almost always contained <a href="http://www.git-scm.com">Git</a> for version control, and <a href="http://pryrepl.org/">Pry</a> for debugging.</p>

<p>Although it&rsquo;s extremely convenient during development to add a quick breakpoint using <code>binding.pry</code>, it can be a bit frustrating to clients if you accidentally deploy with these breakpoints still intact.</p>

<!-- more -->


<p>After hunting around for a bit, I decided to write a pre-commit <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">hook</a> that would check the files I was about to check in to ensure that I didn&rsquo;t accidentally still have breakpoints enabled.</p>

<div><script src='https://gist.github.com/3436040.js'></script>
<noscript><pre><code># Git pre-commit hook
#
# Check all Ruby (*.rb) files for Pry breakpoint references
#
# Based on http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/
#
# Intallation:
#       ln -s /path/to/pre-commit.sh /path/to/project/.git/hooks/pre-commit
#
FORBIDDEN='binding.pry'
git diff --cached --name-only | \
    find -name '*.rb' | \
    GREP_COLOR='4;5;37;41' xargs grep --color --with-filename -n $FORBIDDEN &amp;&amp; \
    echo 'COMMIT REJECTED Found &quot;$FORBIDDEN&quot; references. Please remove them before commiting' &amp;&amp; \
    exit 1</code></pre></noscript></div>


<p>This file just needs to be saved to <code>/path/to/source/.git/hooks/pre-commit</code> and made exectuable.</p>

<p>If you happen to leave a breakpoint intact, the next time you try to commit your changes, the commit will fail and indicate where these breakpoints are, and what files need to be updated to allow the commit to succeed.</p>

<p><img src="http://alexbevi.com/images/2012-08-23-ss.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04 Desktop WITHOUT Unity]]></title>
    <link href="http://alexbevi.com/blog/2012/08/10/ubuntu-12-dot-04-desktop-without-unity/"/>
    <updated>2012-08-10T08:03:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/08/10/ubuntu-12-dot-04-desktop-without-unity</id>
    <content type="html"><![CDATA[<p>As much as I enjoy Ubuntu, I haven&rsquo;t warmed to their Unity desktop. I personally find it&rsquo;s too similar to OS X, I don&rsquo;t really like the launcher with larger icons, the global menu, the shifted window control buttons, notification area changes .. etc.</p>

<p>Since it&rsquo;s based on GTK3, I know you can modify this all, but I&rsquo;d rather just use a desktop environment that doesn&rsquo;t require that level of tweaking.</p>

<p>Enter Cinnamon. Cinnamon is developed by the Linux Mint team, which has a distribution based on Ubuntu.</p>

<p>Over at the <a href="http://www.linuxbsdos.com/2012/04/26/install-the-latest-and-greatest-cinnamon-desktop-on-ubuntu-12-04/">LinuxBSDOS</a> blog, there was an article on how to get Cinnamon installed in the latest Ubuntu.</p>

<p>I found that after doing this, I ended up with no sound. To fix this, <a href="http://askubuntu.com/questions/135778/no-sound-on-ubuntu-12-04/153470#153470">AskUbuntu</a> has an article that I found useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shoutcast Streaming from the Command Line]]></title>
    <link href="http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line/"/>
    <updated>2012-07-18T08:20:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/07/18/shoutcast-streaming-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I spend a lot of time working in a terminal, and I like to spend that time listening to music. Since I work primarly in Linux, I was hoping there would be an easy way to merge these two activities &hellip; and it turns out there was :)</p>

<!-- more -->


<p>After searching around, i found a <a href="http://crunchbanglinux.org/forums/post/150587/#p150587">post on the crunchbang forums</a> that provided exactly the script I was looking for.</p>

<p>I modified it a tiny bit to check for dependencies:</p>

<figure class='code'><figcaption><span>Linux Shoutcast Search and Streaming - shoutcast.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># search shoutcast and send url to radiotray or another player</span>
</span><span class='line'><span class="c"># needs Bash 4, curl, [radiotray], [xsel to send url to X selection for pasting]</span>
</span><span class='line'><span class="c"># (comment out line 53 &quot;printf &#39;%s&#39;...&quot; if you don&#39;t use xsel)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">command</span> -v curl &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;curl required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'><span class="nb">command</span> -v xsel &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;xsel required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'><span class="nb">command</span> -v radiotray &gt; /dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;radiotray required.&quot;</span> &gt;&amp;2; <span class="nb">exit </span>1; <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># choose player (&amp; options if necessary): radio url will be sent to it.</span>
</span><span class='line'>radioplay<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    radiotray <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="c">#    mplayer -playlist &quot;$1&quot; # replace &#39;mplayer -playlist&#39; to taste, $1 will hold the url</span>
</span><span class='line'><span class="c">#    exec mplayer -playlist &quot;$1&quot; # add &#39;exec&#39; if you&#39;d rather launch player and leave script</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start up radiotray in background if it&#39;s not already running</span>
</span><span class='line'><span class="c"># Comment out this line if you don&#39;t use radiotray.</span>
</span><span class='line'>pgrep radiotray &gt;/dev/null <span class="o">||</span> <span class="o">(</span> radiotray &gt;/dev/null 2&gt;&amp;1 &amp; <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">##########################################################################</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Please enter keyword(s)&quot;</span>
</span><span class='line'><span class="nb">read </span>keyword
</span><span class='line'><span class="nv">keyword</span><span class="o">=</span><span class="s2">&quot;${keyword// /%20}&quot;</span> <span class="c"># escape spaces for url</span>
</span><span class='line'><span class="nv">results</span><span class="o">=</span><span class="k">$(</span> curl -s <span class="s2">&quot;http://www.shoutcast.com/Internet-Radio/$keyword&quot;</span> |awk <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">BEGIN {</span>
</span><span class='line'><span class="s1">    RS=&quot;&lt;div class=\&quot;dirlist\&quot;&gt;&quot;</span>
</span><span class='line'><span class="s1">    FS=&quot;&gt;&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">NR &lt; 2 {next}</span>
</span><span class='line'><span class="s1">{url = name = $2</span>
</span><span class='line'><span class="s1">sub(/^.*title=\&quot;/,&quot;&quot;,name)</span>
</span><span class='line'><span class="s1">sub(/\&quot;.*$/,&quot;&quot;,name)</span>
</span><span class='line'><span class="s1">sub(/^.*href=\&quot;/,&quot;&quot;,url)</span>
</span><span class='line'><span class="s1">sub(/\&quot;.*$/,&quot;&quot;,url)</span>
</span><span class='line'><span class="s1">print url,name }</span>
</span><span class='line'><span class="s1">&#39;</span> <span class="k">)</span>
</span><span class='line'><span class="o">[[</span> <span class="nv">$results</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;Sorry, no results for $keyword&quot;</span>; <span class="k">continue</span>;<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">unset </span>list
</span><span class='line'><span class="nb">declare</span> -A list <span class="c"># make associative array</span>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>url name <span class="c"># read in awk&#39;s output</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>list<span class="o">[</span><span class="s2">&quot;$name&quot;</span><span class="o">]=</span><span class="s2">&quot;$url&quot;</span>
</span><span class='line'><span class="k">done</span> &lt;&lt;&lt; <span class="s2">&quot;$results&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PS3</span><span class="o">=</span><span class="s1">&#39;Please enter the number of your choice &gt; &#39;</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    select </span>station in <span class="s2">&quot;${!list[@]}&quot;</span> <span class="s1">&#39;Search Again&#39;</span> Quit
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">=</span> <span class="s1">&#39;Search Again&#39;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">break </span>2
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">=</span> Quit <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s1">&#39;Goodbye...&#39;</span>; <span class="nb">exit</span>; <span class="o">}</span>
</span><span class='line'>        <span class="o">[[</span> <span class="nv">$station</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="s1">&#39;%s&#39;</span> <span class="s2">&quot;${list[$station]}&quot;</span> | xsel --input <span class="c">#--clipboard  # can paste url</span>
</span><span class='line'>        radioplay <span class="s2">&quot;${list[$station]}&quot;</span>
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">Last station chosen was $station ( ${list[$station]} )</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">done</span> <span class="c"># closes loop started at line 18</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here we go again ...]]></title>
    <link href="http://alexbevi.com/blog/2012/07/18/here-we-go-again-dot-dot-dot/"/>
    <updated>2012-07-18T07:53:00-04:00</updated>
    <id>http://alexbevi.com/blog/2012/07/18/here-we-go-again-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>So, another year, another blogging engine, another crack at blogging.</p>

<p>This time around I&rsquo;m trying out <a href="http://octopress.org">Octopress</a>. There&rsquo;s something very appealing about being able to interact with this blog via rake tasks and <a href="http://git-scm.com">Git</a>.</p>

<!-- more -->


<p>This page was generated using <code>rake new_post["Here we go again ..."]</code></p>

<p>Octopress is essentially <a href="https://github.com/mojombo/jekyll/">Jekyll</a>, which means it can be deployed very easily to either <a href="https://github.com">Github</a> or <a href="http://www.heroku.com">Heroku</a>.</p>

<p>Why all the links you may ask? Because I can write posts using <a href="http://daringfireball.net/projects/markdown">Markdown</a>, and I sometimes mix up the syntax between Markdown and <a href="http://www.textism.com/tools/textile/">Textile</a>, so I&rsquo;m just trying to hammer it into my brain ;)</p>
]]></content>
  </entry>
  
</feed>
